/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:40:34 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.MouseListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.time.Clock;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.plaf.synth.SynthSpinnerUI;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("org.jfree.data.function.PolynomialFunction2D");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("org.jfree.data.function.PolynomialFunction2D"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) null, (MouseListener) null);
      assertNull(mouseListener0);
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.hasListener((EventListener) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      defaultStatisticalCategoryDataset0.add(3229.43, 3229.43, (Comparable) "org.jfree.data.function.PolynomialFunction2D", (Comparable) "org.jfree.data.function.PolynomialFunction2D");
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (List) arrayList0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("org.jfree.data.function.PolynomialFunction2D"));
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) "org.jfree.data.function.PolynomialFunction2D", (Comparable) "org.jfree.data.function.PolynomialFunction2D");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("org.jfree.data.function.PolynomialFunction2D"));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains("org.jfree.data.function.PolynomialFunction2D"));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'data' array.", "Null 'data' array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Null 'data' array.", (double) 0, 0);
      assertNotNull(pieDataset1);
      assertEquals(6, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 0, (-2924), 2);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1675.0), (-2924), 2, 2, 0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Aug 31 04:02:00 GMT 1899", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'data' array.", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2.0) <= upper (-2924.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2367.271829761, 2367.271829761, "2");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 2367.271829761);
      assertNotNull(xYBarDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(2367.271829761));
      
      Double double0 = new Double(2367.271829761);
      assertNotNull(double0);
      assertEquals(2367.271829761, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertFalse(stack0.isEmpty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(3550.9077446415, range0.getUpperBound(), 0.01);
      assertEquals(2367.271829761, range0.getLength(), 0.01);
      assertEquals(2367.271829761, range0.getCentralValue(), 0.01);
      assertEquals(1183.6359148805, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2367.271829761, 2367.271829761, "org.jree.data.xy.MrixSeriesCollection");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 2367.271829761);
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(2367.271829761));
      
      Double double0 = new Double(2367.271829761);
      assertNotNull(double0);
      assertEquals(2367.271829761, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double0));
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, range0.getCentralValue(), 0.01);
      assertEquals(2367.771829761, range0.getUpperBound(), 0.01);
      assertEquals(2366.771829761, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2367.271829761, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2367.271829761, range1.getCentralValue(), 0.01);
      assertEquals(2367.271829761, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, false);
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2367.271829761, range2.getLowerBound(), 0.01);
      assertEquals(2367.271829761, range2.getCentralValue(), 0.01);
      assertEquals(2367.271829761, range2.getUpperBound(), 0.01);
      assertTrue(stack0.contains(double0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 1613.1156507070336, "3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2578), (-2578));
      assertNotNull(lineFunction2D0);
      assertEquals((-2578.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2578.0), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2578), (-766.5605), 2, "Duplicate items in 'columnKeys'.1");
      assertNotNull(xYSeries0);
      assertEquals((-2578.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2578.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(6643506.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-766.5605), xYSeries0.getMaxX(), 0.01);
      assertEquals(1973614.969, xYSeries0.getMinY(), 0.01);
      assertEquals((-2578.0), xYSeries0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      categoryTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1737.105031, Double.NaN, "1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|Q`@M |", "|Q`@M |", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(4, doubleArray0.length);
      
      defaultPieDataset0.insertValue(0, (Comparable) "|Q`@M |", (double) 0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "|Q`@M |", (double) 0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultTableXYDataset0.validateObject();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "\"$8Gl^CCy.;2Am1LT");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("KeyedValueComparatorType.BY_KEY");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      boolean boolean1 = arrayList0.add("KeyedValueComparatorType.BY_KEY");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      assertTrue(boolean1 == boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      defaultStatisticalCategoryDataset0.add((-1200.275125), (-1200.275125), (Comparable) "KeyedValueComparatorType.BY_KEY", (Comparable) "KeyedValueComparatorType.BY_KEY");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1200.275125), range0.getLowerBound(), 0.01);
      assertEquals((-1200.275125), range0.getCentralValue(), 0.01);
      assertEquals((-1200.275125), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals((-1200.275125), range1.getLowerBound(), 0.01);
      assertEquals((-1200.275125), range1.getCentralValue(), 0.01);
      assertEquals((-1200.275125), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[10][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2010);
      assertNotNull(categoryToPieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2010, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Float float0 = Float.valueOf(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      MockDate mockDate0 = new MockDate(12, 5, 12, (-11), (-1844), 1103);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-4428.79635);
      doubleArray0[1] = (double) 1103;
      doubleArray0[2] = (double) 59;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(minute0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-4428.79635), 1103.0, 59.0}, doubleArray0, 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.816449937E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.816449937E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.816449937E12), range0.getCentralValue(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertArrayEquals(new double[] {(-4428.79635), 1103.0, 59.0}, doubleArray0, 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.816449937E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.816449937E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.816449937E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-4428.79635), range1.getCentralValue(), 0.01);
      assertEquals((-4428.79635), range1.getLowerBound(), 0.01);
      assertEquals((-4428.79635), range1.getUpperBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-4428.79635), 1103.0, 59.0}, doubleArray0, 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("\"0K|iyoJiUS#{,&Q6");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.POSITIVE_INFINITY, (-1737.1726735114246), (Comparable) "\"0K|iyoJiUS#{,&Q6", (Comparable) "\"0K|iyoJiUS#{,&Q6");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("\"0K|iyoJiUS#{,&Q6");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.POSITIVE_INFINITY, (-1737.1726735114246), (Comparable) "\"0K|iyoJiUS#{,&Q6", (Comparable) "\"0K|iyoJiUS#{,&Q6");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("\"0K|iyoJiUS#{,&Q6");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.POSITIVE_INFINITY, (-1737.1726735114246), (Comparable) "\"0K|iyoJiUS#{,&Q6", (Comparable) "\"0K|iyoJiUS#{,&Q6");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      boolean boolean1 = arrayList0.add("\"0K|iyoJiUS#{,&Q6");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range1);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6", "\"0K|iyoJiUS#{,&Q6");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-12), 823);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-12), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(823, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("b$,Ha-83^2`~[ MWrw", 30, 30);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 30);
      assertNotNull(xYBarDataset0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-15.0), number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(398.6, (double) 0, "No such series : ");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((double) 0, (-654.639596834228), "-*S+ANp -]FnO2#Z7");
      assertEquals(398.6, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(398.6, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-654.639596834228), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "C_H");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "org.jfree.data.gantt.TaskSeries");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(0.0));
      
      Double double0 = new Double(2549.8104531489375);
      assertNotNull(double0);
      assertEquals(2549.8104531489375, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add((Double) null);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertFalse(stack0.contains(0.0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(stack0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("\"0K|iyoJiUS#{,&Q6");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("\"0K|iyoJiUS#{,&Q6", 11, 11);
      assertNotNull(matrixSeries0);
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getLength(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList0, true);
      assertNotNull(range2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range2.getCentralValue(), 0.01);
      assertEquals(10.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(10.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.contains("\"0K|iyoJiUS#{,&Q6"));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("{", 30, 1);
      assertNotNull(matrixSeries0);
      assertEquals(30, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(30, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(30, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(30, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number2);
      assertEquals(30, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number2);
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-17);
      doubleArray1[1] = (double) (-17);
      doubleArray1[2] = (double) (-17);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-17.0), range0.getCentralValue(), 0.01);
      assertEquals((-17.0), range0.getUpperBound(), 0.01);
      assertEquals((-17.0), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = Float.valueOf(581.46F);
      assertNotNull(float0);
      assertEquals(581.46F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[26];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[19];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(26, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(26, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Float float0 = Float.valueOf(558.7084F);
      assertNotNull(float0);
      assertEquals(558.7084F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[558.7084]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[23];
      doubleArray0[11] = (double) (-11);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[558.7084]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.586078671E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586078671E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586078671E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[558.7084]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.586078671E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586078671E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586078671E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range2);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[558.7084]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.586078671E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586078671E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586078671E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Y", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2586));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2586), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(8, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(558.7084F);
      assertNotNull(float0);
      assertEquals(558.7084F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[558.7084]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(558.7084F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      assertNotNull(mockDate0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 558.7084F;
      doubleArray0[2] = 852.706;
      doubleArray0[3] = (double) (-11);
      doubleArray0[4] = (double) (-11);
      doubleArray0[5] = (double) 558.7084F;
      doubleArray0[6] = (double) (-11);
      doubleArray0[7] = (double) (-11);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 19 12:48:49 GMT 1888", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {558.7083740234375, 0.0, 852.706, (-11.0), (-11.0), 558.7083740234375, (-11.0), (-11.0)}, doubleArray0, 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(558.7083740234375, (String) null, (String) null);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) (-11.0);
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) 558.7083740234375;
      numberArray1[3] = (Number) 558.7083740234375;
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) float0;
      numberArray1[6] = (Number) (-11.0);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) 558.7083740234375;
      numberArray2[2] = (Number) (-11.0);
      numberArray2[3] = (Number) (-11.0);
      numberArray2[4] = (Number) 558.7083740234375;
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      numberArray2[5] = (Number) short0;
      numberArray2[6] = (Number) 558.7083740234375;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (-11.0);
      numberArray3[1] = (Number) short0;
      numberArray3[2] = (Number) 852.706;
      numberArray3[3] = (Number) 558.7083740234375;
      numberArray3[4] = (Number) (-11.0);
      numberArray3[5] = (Number) (-11.0);
      numberArray3[6] = (Number) (-11.0);
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) (-11.0);
      numberArray4[1] = (Number) 852.706;
      numberArray4[2] = (Number) (-11.0);
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 558.7083740234375;
      numberArray5[1] = (Number) 558.7083740234375;
      numberArray5[2] = (Number) 852.706;
      numberArray5[3] = (Number) (-11.0);
      numberArray5[4] = (Number) 558.7083740234375;
      numberArray5[5] = (Number) 558.7083740234375;
      numberArray5[6] = (Number) 558.7083740234375;
      numberArray5[7] = (Number) (-11.0);
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-11.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("t/A]", "t/A]", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(18, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 3054, 514);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3054, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(514, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(18, numberArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("t/A]", 514, 6);
      assertNotNull(matrixSeries0);
      assertEquals(6, matrixSeries0.getColumnsCount());
      assertEquals(3084, matrixSeries0.getItemCount());
      assertEquals(514, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(6, matrixSeries0.getColumnsCount());
      assertEquals(3084, matrixSeries0.getItemCount());
      assertEquals(514, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(6, matrixSeries0.getColumnsCount());
      assertEquals(3084, matrixSeries0.getItemCount());
      assertEquals(514, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(513.0, number0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("KY oxu4wTCdHD>8mb", 30, 30);
      assertNotNull(matrixSeries0);
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getColumnsCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KY oxu4wTCdHD>8mb");
      assertFalse(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "KY oxu4wTCdHD>8mb", 0.5, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(13, 13);
      assertNotNull(lineFunction2D0);
      assertEquals(13.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(13.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 13, 536, 536, "1EkM(");
      assertNotNull(xYSeriesCollection0);
      assertEquals(13.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(13.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(13.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(13.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3581.5, range0.getCentralValue(), 0.01);
      assertEquals(182.0, range0.getLowerBound(), 0.01);
      assertEquals(6981.0, range0.getUpperBound(), 0.01);
      assertEquals(6799.0, range0.getLength(), 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1EkM(";
      stringArray0[1] = "J`Cb'(OOye'";
      stringArray0[2] = "1EkM(";
      stringArray0[3] = "1EkM(";
      stringArray0[4] = "1EkM(";
      stringArray0[5] = "1EkM(";
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[4];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      numberArray1[0] = (Number) bigInteger0;
      Double double0 = new Double(13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      numberArray1[1] = (Number) double0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray1[2] = (Number) integer0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) bigInteger0, (Comparable) "1EkM(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (1) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1759.00533605738;
      doubleArray1[1] = (-235.6052146485098);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-243.98369870962995);
      doubleArray1[4] = 1711.08372456;
      doubleArray1[5] = (-1375.0010749);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1759.00533605738;
      doubleArray2[1] = 2265.1264252128294;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1711.08372456;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-235.6052146485098);
      doubleArray2[6] = (-235.6052146485098);
      doubleArray2[7] = 1759.00533605738;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(445.0626751564147, range0.getCentralValue(), 0.01);
      assertEquals((-1375.0010749), range0.getLowerBound(), 0.01);
      assertEquals(3640.1275001128297, range0.getLength(), 0.01);
      assertEquals(2265.1264252128294, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.validateObject();
      Short short0 = Short.valueOf((short)512);
      assertNotNull(short0);
      assertEquals((short)512, (short)short0);
      
      defaultStatisticalCategoryDataset0.add(485.0, 2325.0, (Comparable) short0, (Comparable) short0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1), 11);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(11, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean0 = stack0.add("XpN>J!R2t-A[DU");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[XpN>J!R2t-A[DU]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("XpN>J!R2t-A[DU"));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      stack0.ensureCapacity(11);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[XpN>J!R2t-A[DU]", stack0.toString());
      assertEquals(20, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("XpN>J!R2t-A[DU"));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("XpN>J!R2t-A[DU", 11, 11);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[XpN>J!R2t-A[DU]", stack0.toString());
      assertEquals(20, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(matrixSeries0.getDescription());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getLength(), 0.01);
      assertTrue(stack0.contains("XpN>J!R2t-A[DU"));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range2);
      assertNull(matrixSeries0.getDescription());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(5.0, range2.getCentralValue(), 0.01);
      assertEquals(10.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(10.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range3);
      assertNull(matrixSeries0.getDescription());
      assertEquals(11, matrixSeries0.getColumnsCount());
      assertEquals(121, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(10.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(5.0, range3.getCentralValue(), 0.01);
      assertEquals(10.0, range3.getUpperBound(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double(2138.498);
      assertNotNull(double0);
      assertEquals(2138.498, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(2138.498));
      
      boolean boolean0 = stack0.add(double0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[2138.498]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(2138.498));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(8, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][8];
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1630), 8);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(8, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1630), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "`7{RR}6^x>u");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(0.0));
      
      Double double0 = new Double(2367.271829761);
      assertNotNull(double0);
      assertEquals(2367.271829761, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2367.271829761);
      assertNotNull(double2);
      assertEquals(2367.271829761, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double2);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[2367.271829761]", stack0.toString());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean0 = stack0.add("XpN>J!R2t-A[DU");
      assertEquals(10, stack0.capacity());
      assertEquals("[XpN>J!R2t-A[DU]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains("XpN>J!R2t-A[DU"));
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("XpN>J!R2t-A[DU", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = Float.valueOf(581.46F);
      assertNotNull(float0);
      assertEquals(581.46F, (float)float0, 0.01F);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[19];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[19];
      doubleArray0[3] = 1.5;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(19, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = Float.valueOf((-46.85105F));
      assertNotNull(float0);
      assertEquals((-46.85105F), (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-46.85105]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(10, 13, 100, 86, 86, 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3439.298845;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) (-11);
      doubleArray0[3] = (double) (-46.85105F);
      doubleArray0[4] = (double) 86;
      doubleArray0[5] = (double) 100;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (-46.85105F);
      doubleArray0[8] = (double) 100;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 14 15:26:10 GMT 1911", mockDate0.toString());
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3439.298845, 13.0, (-11.0), (-46.851051330566406), 86.0, 100.0, (-1.0), (-46.851051330566406), 100.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(9, numberArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3439.298845, 13.0, (-11.0), (-46.851051330566406), 86.0, 100.0, (-1.0), (-46.851051330566406), 100.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-46.85105]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 14 15:26:10 GMT 1911", mockDate0.toString());
      assertEquals((-1.85037323E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.85037323E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.85037323E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(stack0.contains((-46.85105F)));
      assertArrayEquals(new double[] {3439.298845, 13.0, (-11.0), (-46.851051330566406), 86.0, 100.0, (-1.0), (-46.851051330566406), 100.0}, doubleArray0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-46.85105]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 14 15:26:10 GMT 1911", mockDate0.toString());
      assertEquals((-1.85037323E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.85037323E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.85037323E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1714.1494225, range1.getCentralValue(), 0.01);
      assertEquals(3439.298845, range1.getUpperBound(), 0.01);
      assertEquals(3450.298845, range1.getLength(), 0.01);
      assertEquals((-11.0), range1.getLowerBound(), 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(stack0.contains((-46.85105F)));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {3439.298845, 13.0, (-11.0), (-46.851051330566406), 86.0, 100.0, (-1.0), (-46.851051330566406), 100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[12][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(12, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(12, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range1);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(12, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 581.4;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-1157.685);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1157.685);
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 581.4;
      doubleArray3[4] = 581.4;
      doubleArray3[5] = 581.4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 581.4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 3800.122889155199;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-1157.685);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-2.586078671E12);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = 2221;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 2221);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2221, categoryToPieDataset0.getExtractIndex());
      
      String string0 = "yF4A=rBo.1(==0c";
      TaskSeries taskSeries0 = new TaskSeries("yF4A=rBo.1(==0c");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) week0, (-2158.6996));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeries cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1114.424253006), (-1114.424253006), "org.jfree.data.xy.XYIntervalSeriesCollection");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1114.424253006), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1114.924253006), range0.getLowerBound(), 0.01);
      assertEquals((-1113.924253006), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1114.424253006), range1.getCentralValue(), 0.01);
      assertEquals((-1114.424253006), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1114.424253006), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "M j_PC`<|00<Qu");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray1 = new double[2][7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3359.152);
      doubleArray2[2] = 0.0;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3359.152);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-3359.152);
      doubleArray3[3] = (-3359.152);
      doubleArray3[4] = (-3359.152);
      doubleArray3[5] = (-3359.152);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray1[1] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.46F);
      assertNotNull(float0);
      assertEquals(581.46F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.46]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1200.275125), 1998.4885669, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[581.46]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals((-3198.7636918999997), range0.getLowerBound(), 0.01);
      assertEquals(798.2134419000001, range0.getUpperBound(), 0.01);
      assertEquals(3996.9771338, range0.getLength(), 0.01);
      assertEquals((-1200.2751249999997), range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(float0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range2);
      assertEquals(3996.9771338, range2.getLength(), 0.01);
      assertEquals((-3198.7636918999997), range2.getLowerBound(), 0.01);
      assertEquals(798.2134419000001, range2.getUpperBound(), 0.01);
      assertEquals((-1200.2751249999997), range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Float float0 = Float.valueOf((-1450.2783F));
      assertNotNull(float0);
      assertEquals((-1450.2783F), (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-1450.2783]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      MockDate mockDate0 = new MockDate((-1458), (-1458), (-11), 723, 14, 14);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-11);
      doubleArray0[1] = (double) (-1458);
      doubleArray0[2] = 1310.6688614405195;
      doubleArray0[3] = (double) (-11);
      doubleArray0[4] = (double) (-1458);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 14;
      doubleArray1[1] = (double) (-11);
      doubleArray1[2] = (double) 723;
      doubleArray1[3] = (double) (-1458);
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-11);
      doubleArray2[1] = (double) (-11);
      doubleArray2[2] = (double) (-1458);
      doubleArray2[3] = 1310.6688614405195;
      doubleArray2[4] = 1310.6688614405195;
      doubleArray2[5] = (double) 723;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray2);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-11.0), (-11.0), (-1458.0), 1310.6688614405195, 1310.6688614405195, 723.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-11.0), (-1458.0), 1310.6688614405195, (-11.0), (-1458.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {14.0, (-11.0), 723.0, (-1458.0)}, doubleArray1, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray2);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, numberArray0.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-11.0), (-11.0), (-1458.0), 1310.6688614405195, 1310.6688614405195, 723.0}, doubleArray2, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-1450.2783]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-5.2051668346E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-5.2051668346E13), range0.getCentralValue(), 0.01);
      assertEquals((-5.2051668346E13), range0.getUpperBound(), 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-11.0), (-11.0), (-1458.0), 1310.6688614405195, 1310.6688614405195, 723.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-11.0), (-1458.0), 1310.6688614405195, (-11.0), (-1458.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {14.0, (-11.0), 723.0, (-1458.0)}, doubleArray1, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-1450.2783]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-5.2051668346E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-5.2051668346E13), range0.getCentralValue(), 0.01);
      assertEquals((-5.2051668346E13), range0.getUpperBound(), 0.01);
      assertEquals(14.0, range1.getCentralValue(), 0.01);
      assertEquals(14.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(14.0, range1.getLowerBound(), 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-11.0), (-11.0), (-1458.0), 1310.6688614405195, 1310.6688614405195, 723.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-11.0), (-1458.0), 1310.6688614405195, (-11.0), (-1458.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {14.0, (-11.0), 723.0, (-1458.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("Category 3");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Category 3"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 306.00218410973054, (Comparable) "Category 3", (Comparable) "KeyedValueComparatorType._KEY");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(arrayList0.contains("KeyedValueComparatorType._KEY"));
      assertTrue(arrayList0.contains("Category 3"));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3186);
      doubleArray0[1] = 47.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3186.0), 47.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3186.0), 1.0, 535, (-3186.0));
      assertNotNull(xYSeries0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-152928.0), xYSeries0.getMinY(), 0.01);
      assertEquals((-3186.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-3139.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(535, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3186.0), 47.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(2367.271829761, 2367.271829761, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2366.771829761, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(2367.271829761, range0.getCentralValue(), 0.01);
      assertEquals(2367.771829761, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2367.271829761, range1.getUpperBound(), 0.01);
      assertEquals(2367.271829761, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2367.271829761, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 4735.543659522);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(4735.543659522, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.0, Double.POSITIVE_INFINITY, 5, year0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(4735.543659522, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertNotNull(timeSeries0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(0.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(4735.543659522, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(2367.271829761, 2367.271829761, "K");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      MockDate mockDate0 = new MockDate(1, 1, 2, 44, 4628);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 44;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 44;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("K", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 44.0, 2.0, 1.0, 44.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2367.271829761, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2.0, number1);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {2.0, 44.0, 2.0, 1.0, 44.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(485, 485, 0, 0, 485);
      assertNotNull(mockDate0);
      
      categoryTableXYDataset0.add(Double.NaN, (double) 485, "3");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(485.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(485.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(242.5, range0.getCentralValue(), 0.01);
      assertEquals(485.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = Float.valueOf(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626504163E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-0.10644136933959829));
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-0.10644136933959829), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-0.10644136933959829)));
      
      Double double0 = new Double((-0.10644136933959829));
      assertNotNull(double0);
      assertEquals((-0.10644136933959829), (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains((-0.10644136933959829)));
      assertTrue(stack1.equals((Object)stack0));
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      
      boolean boolean0 = stack1.add(double1);
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(boolean0);
      assertFalse(stack1.contains((-0.10644136933959829)));
      assertTrue(stack1.contains(0.0));
      assertNotSame(stack1, stack0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack1, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.626504163E12), range1.getUpperBound(), 0.01);
      assertEquals((-1.626504163E12), range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack1.contains((-0.10644136933959829)));
      assertTrue(stack1.contains(0.0));
      assertNotSame(range1, range0);
      assertNotSame(stack1, stack0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack1.equals((Object)stack0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack1, range2, true);
      assertNull(range3);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-0.10644136933959829), xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack1.contains((-0.10644136933959829)));
      assertTrue(stack1.contains(0.0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(stack1, stack0);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(stack1.equals((Object)stack0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3316.190814230399;
      doubleArray1[1] = 3079.816010035049;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3079.816010035049;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 1", "Null 'rowKey' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6397.006824265449, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(6397.006824265449, range0.getUpperBound(), 0.01);
      assertEquals(3198.5034121327244, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 523);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(523, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Null 'rowKey' argument.", 3316.190814230399, 523);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 523, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2367.271829761, 2367.271829761, "K");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 2367.271829761);
      assertNotNull(xYBarDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2367.271829761));
      
      Double double0 = new Double(2367.271829761);
      assertNotNull(double0);
      assertEquals(2367.271829761, (double)double0, 0.01);
      
      Double double1 = Double.valueOf("2");
      assertNotNull(double1);
      assertEquals(2.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[2.0]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(2367.271829761));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2367.271829761, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[2.0]", stack0.toString());
      assertEquals(1183.6359148805, range0.getLowerBound(), 0.01);
      assertEquals(2367.271829761, range0.getCentralValue(), 0.01);
      assertEquals(3550.9077446415, range0.getUpperBound(), 0.01);
      assertEquals(2367.271829761, range0.getLength(), 0.01);
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(2367.271829761));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate(4463, 100, 4463, (-1458), (-1));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) (-1458);
      doubleArray0[2] = (double) (-1458);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1458);
      doubleArray0[6] = (double) 28;
      doubleArray0[7] = 2016.054011024342;
      doubleArray0[8] = (double) (-1458);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 28;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu May 19 05:59:00 GMT 6383", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {28.0, (-1.0), Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-1458.0), (-1458.0), Double.NEGATIVE_INFINITY, (-1.0), (-1458.0), 28.0, 2016.054011024342, (-1458.0)}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1633), (-2349), (-2349), (-5), (-2349));
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3334.0, 3.58633761927313, "rA964::gZ]");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3.58633761927313, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-2.586076331E12), (-1.62650421E12), (Comparable) "", (Comparable) "");
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      JList<Integer> jList0 = new JList<Integer>();
      assertNotNull(jList0);
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      
      List<Integer> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(1));
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-2.586076331E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586076331E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.586076331E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) list0, range0, false);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals((-2.586076331E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586076331E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.586076331E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(list0.contains(1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesX[ys';argurent.", "Null 'visibleSeriesX[ys';argurent.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-3282));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3282), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Null 'visibleSeriesX[ys';argurent.", 0.0, (-1406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate(485, 485, 28, 28, 485);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) (-1458);
      categoryTableXYDataset0.add((double) 28, (double) (-1458), "First");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1079.86391);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(350.86391000000003, range0.getCentralValue(), 0.01);
      assertEquals(1079.86391, range0.getUpperBound(), 0.01);
      assertEquals(1458.0, range0.getLength(), 0.01);
      assertEquals((-378.13608999999997), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-729.0), range1.getCentralValue(), 0.01);
      assertEquals((-1458.0), range1.getLowerBound(), 0.01);
      assertEquals(1458.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">`", ">`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, doubleArray0.length);
      
      defaultPieDataset0.setValue((Comparable) ">`", 436.667);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) ">`", (double) 0, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("KeyedValueComparatorType.BY_KEY");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      defaultStatisticalCategoryDataset0.add((-1200.275125), (-1200.275125), (Comparable) "KeyedValueComparatorType.BY_KEY", (Comparable) "KeyedValueComparatorType.BY_KEY");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1200.275125), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1200.275125), range0.getCentralValue(), 0.01);
      assertEquals((-1200.275125), range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-1200.275125), range1.getCentralValue(), 0.01);
      assertEquals((-1200.275125), range1.getUpperBound(), 0.01);
      assertEquals((-1200.275125), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("org.jfree.data.xy.DefaultOHLCDataset");
      assertFalse(stack0.isEmpty());
      assertEquals("[org.jfree.data.xy.DefaultOHLCDataset]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("org.jfree.data.xy.DefaultOHLCDataset"));
      
      boolean boolean1 = stack0.add("1");
      assertFalse(stack0.isEmpty());
      assertEquals("[org.jfree.data.xy.DefaultOHLCDataset, 1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean1);
      assertTrue(stack0.contains("1"));
      assertTrue(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[org.jfree.data.xy.DefaultOHLCDataset, 1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("1"));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      int int0 = 17;
      MockDate mockDate0 = new MockDate(17, 17, 17, (-2), 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626572563E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 17);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(number0));
      
      Double double0 = new Double(17);
      assertNotNull(double0);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[17.0]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(number0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean1 = true;
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range1);
      assertEquals((-1.626572563E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.6265725630085E12), range1.getLowerBound(), 0.01);
      assertEquals((-1.6265725629915E12), range1.getUpperBound(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(number0));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 17, 1646);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(17, seriesChangeInfo0.getIndex1());
      assertEquals(1646, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xIntervalSeriesCollection0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(17, seriesChangeInfo0.getIndex1());
      assertEquals(1646, seriesChangeInfo0.getIndex2());
      
      defaultHighLowDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(17, seriesChangeInfo0.getIndex1());
      assertEquals(1646, seriesChangeInfo0.getIndex2());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-1.6265725629915E12), number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "qBo#e}Bh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = Float.valueOf(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626504163E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 17);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(number0));
      
      Double double0 = new Double(17);
      assertNotNull(double0);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[17.0]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(number0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range1);
      assertEquals((-1.6265041629915E12), range1.getUpperBound(), 0.01);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.6265041630085E12), range1.getLowerBound(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(number0));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-1.6265041629915E12), number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate(485, 485, 0, 0, 485);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      categoryTableXYDataset0.add(4086.67612172, (-3073.11890483), "rA964::gZ]");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-3073.11890483), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Date[] dateArray0 = new Date[5];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 0, 0);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(45);
      assertNotNull(spreadsheetDate0);
      assertEquals(13, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(45, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(13, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(45, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      dateArray0[2] = date0;
      MockDate mockDate2 = new MockDate();
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertTrue(mockDate2.equals((Object)mockDate0));
      
      dateArray0[3] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(1, 5, 510);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertFalse(mockDate3.equals((Object)mockDate1));
      
      dateArray0[4] = (Date) mockDate3;
      double[] doubleArray1 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = "KeyedValueComparatorType.BY_KEY";
      boolean boolean0 = arrayList0.add("KeyedValueComparatorType.BY_KEY");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(string0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = (-2297.27747662847);
      categoryTableXYDataset0.add((-2297.27747662847), (-2297.27747662847), "KeyedValueComparatorType.BY_KEY");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2297.27747662847));
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2297.27747662847), range0.getUpperBound(), 0.01);
      assertEquals((-4594.55495325694), range0.getLowerBound(), 0.01);
      assertEquals(2297.27747662847, range0.getLength(), 0.01);
      assertEquals((-3445.916214942705), range0.getCentralValue(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("KeyedValueComparatorType.BY_KEY");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      int int0 = 2897;
      int int1 = 1653;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(2897, 1653);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1653, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("KeyedValueComparatorType.BY_KEY");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("KeyedValueComparatorType.BY_KEY"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2297.27747662847), (-2297.27747662847), "KeyedValueComparatorType.BY_KEY");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("KeyedValueComparatorType.BY_KEY");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(581.46F);
      assertNotNull(float0);
      assertEquals(581.46F, (float)float0, 0.01F);
      
      Float float1 = stack0.push(float0);
      assertNotNull(float1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[581.46]", stack0.toString());
      assertEquals(581.46F, (float)float1, 0.01F);
      assertTrue(stack0.contains(float1));
      
      Float float2 = Float.valueOf(581.46F);
      assertNotNull(float2);
      assertEquals(581.46F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float2);
      assertEquals("[581.46, 581.46]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), 28, (-11));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 581.46F;
      doubleArray1[1] = (double) 581.46F;
      doubleArray1[2] = (double) 28;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626504163E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 17, (-1.7976931348623157E308), (Comparable) dateArray0[0], (Comparable) dateArray0[0]);
      assertEquals(1, dateArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 17, 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(17, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(17, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) 17);
      assertNotNull(range1);
      assertEquals(25.5, range1.getCentralValue(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals(17.0, range1.getLowerBound(), 0.01);
      assertEquals(34.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesX[ys';argurent.", "Null 'visibleSeriesX[ys';argurent.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1051));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1051);
      doubleArray1[1] = 2528.6522828;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2528.6522828;
      doubleArray2[1] = (double) (-1051);
      doubleArray2[2] = 2528.6522828;
      doubleArray2[3] = (double) (-1051);
      doubleArray2[4] = 2528.6522828;
      doubleArray2[5] = (double) (-1051);
      doubleArray2[6] = (double) (-1051);
      doubleArray2[7] = (double) (-1051);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2528.6522828;
      doubleArray3[1] = 2528.6522828;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2528.6522828, range0.getUpperBound(), 0.01);
      assertEquals(3579.6522828, range0.getLength(), 0.01);
      assertEquals(738.8261414000001, range0.getCentralValue(), 0.01);
      assertEquals((-1051.0), range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("^9/1d0,");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("^9/1d0,"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1412.110270282678, 1412.110270282678, (Comparable) "^9/1d0,", (Comparable) "^9/1d0,");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1412.110270282678, range0.getCentralValue(), 0.01);
      assertEquals(2824.220540565356, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2824.220540565356, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains("^9/1d0,"));
      
      TimeSeries timeSeries0 = new TimeSeries("^9/1d0,");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("^9/1d0,", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("^9/1d0,", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-276));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-276), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "^9/1d0,", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.793168809636565, 1.793168809636565, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.793168809636565, range0.getCentralValue(), 0.01);
      assertEquals(1.293168809636565, range0.getLowerBound(), 0.01);
      assertEquals(2.293168809636565, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.793168809636565, range1.getCentralValue(), 0.01);
      assertEquals(1.793168809636565, range1.getUpperBound(), 0.01);
      assertEquals(1.793168809636565, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.793168809636565, range2.getCentralValue(), 0.01);
      assertEquals(1.793168809636565, range2.getUpperBound(), 0.01);
      assertEquals(1.793168809636565, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1034.7289202893562;
      doubleArray1[1] = 3340.26;
      doubleArray1[2] = 542.0;
      doubleArray1[3] = (-1833.0688858989254);
      doubleArray1[4] = 1649.3353645;
      doubleArray1[5] = (-1567.56);
      doubleArray1[6] = (-3070.3855369046);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3070.3855369046);
      doubleArray3[1] = (-1833.0688858989254);
      doubleArray3[2] = (-3070.3855369046);
      doubleArray3[3] = 1649.3353645;
      doubleArray3[4] = 3340.26;
      doubleArray3[5] = (-1567.56);
      doubleArray3[6] = (-3070.3855369046);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-3070.3855369046);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int0 = 44;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo((SeriesChangeType) null, 44, 44);
      assertNotNull(seriesChangeInfo0);
      assertEquals(44, seriesChangeInfo0.getIndex1());
      assertEquals(44, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalCategoryDataset0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(44, seriesChangeInfo0.getIndex1());
      assertEquals(44, seriesChangeInfo0.getIndex2());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(44, seriesChangeInfo0.getIndex1());
      assertEquals(44, seriesChangeInfo0.getIndex2());
      
      List list1 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list1);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626504163E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 17);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(number0));
      
      Double double0 = new Double(17);
      assertNotNull(double0);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[17.0]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range1);
      assertEquals((-1.6265041629915E12), range1.getUpperBound(), 0.01);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals((-1.6265041630085E12), range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, true);
      assertNotNull(range2);
      assertEquals((-1.6265041629915E12), range2.getUpperBound(), 0.01);
      assertEquals((-1.6265041630085E12), range2.getLowerBound(), 0.01);
      assertEquals((-1.626504163E12), range2.getCentralValue(), 0.01);
      assertEquals(17.0, range2.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range3 = Range.shift(range2, (-422.0589), false);
      assertNotNull(range3);
      assertEquals((-1.6265041629915E12), range2.getUpperBound(), 0.01);
      assertEquals((-1.6265041630085E12), range2.getLowerBound(), 0.01);
      assertEquals((-1.626504163E12), range2.getCentralValue(), 0.01);
      assertEquals(17.0, range2.getLength(), 0.01);
      assertEquals((-1.6265041634305588E12), range3.getLowerBound(), 0.01);
      assertEquals(17.0, range3.getLength(), 0.01);
      assertEquals((-1.6265041634220588E12), range3.getCentralValue(), 0.01);
      assertEquals((-1.6265041634135588E12), range3.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range2, range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range1, false);
      assertNotNull(range4);
      assertEquals((-1.6265041629915E12), range1.getUpperBound(), 0.01);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals((-1.6265041630085E12), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[17.0]", stack0.toString());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range1, range0);
      assertNotSame(range1, range4);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.626504163E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 17);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(number0));
      
      Double double0 = new Double(17);
      assertNotNull(double0);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertEquals("[17.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
      assertNotNull(range1);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.6265041630085E12), range1.getLowerBound(), 0.01);
      assertEquals((-1.6265041629915E12), range1.getUpperBound(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("[17.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range1, false);
      assertNotNull(range2);
      assertEquals((-1.626504163E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.6265041630085E12), range1.getLowerBound(), 0.01);
      assertEquals((-1.6265041629915E12), range1.getUpperBound(), 0.01);
      assertEquals(17.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(17.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("[17.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(number0));
      assertTrue(stack0.contains(double0));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, (-30));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = new Range(17, 17);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(17.0, range0.getCentralValue(), 0.01);
      assertEquals(17.0, range0.getUpperBound(), 0.01);
      assertEquals(17.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.62650421E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-30));
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-30.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(number0));
      
      Double double0 = new Double((-30));
      assertNotNull(double0);
      assertEquals((-30.0), (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertEquals("[-30.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(number0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.626504209985E12) <= upper (-1.626504210015E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("Null 'dataset' argument.");
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'dataset' argument.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'dataset' argument."));
      
      DatasetGroup datasetGroup1 = new DatasetGroup();
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup1.getID());
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 910.25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, (String) null);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(timeSeriesCollection0));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 999, (-1697));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(999, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1697), slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesK[ys';argu.ent.", "Null 'visibleSeriesK[ys';argu.ent.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      boolean boolean0 = stack0.add("");
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      
      DatasetGroup datasetGroup1 = new DatasetGroup();
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup1.getID());
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(""));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      MockDate mockDate0 = new MockDate(7, 120, 120, 7, (-361), (-774));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertNotNull(week0);
      assertEquals("Mon Apr 30 00:46:06 GMT 1917", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(101619L, week0.getSerialIndex());
      assertEquals((-1662246834000L), week0.getFirstMillisecond());
      assertEquals((-1662246834001L), week0.getLastMillisecond());
      assertEquals(18, week0.getWeek());
      assertEquals(1917, week0.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      XYSeries xYSeries0 = new XYSeries(week0);
      assertNotNull(xYSeries0);
      assertEquals("Mon Apr 30 00:46:06 GMT 1917", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(101619L, week0.getSerialIndex());
      assertEquals((-1662246834000L), week0.getFirstMillisecond());
      assertEquals((-1662246834001L), week0.getLastMillisecond());
      assertEquals(18, week0.getWeek());
      assertEquals(1917, week0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 53, (double) 120);
      assertNull(xYDataItem0);
      assertEquals("Mon Apr 30 00:46:06 GMT 1917", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(101619L, week0.getSerialIndex());
      assertEquals((-1662246834000L), week0.getFirstMillisecond());
      assertEquals((-1662246834001L), week0.getLastMillisecond());
      assertEquals(18, week0.getWeek());
      assertEquals(1917, week0.getYearValue());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(120.0, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(120.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(53.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), 28, (-11));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[23];
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 28;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(23, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.586076331E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586076331E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586076331E12), range0.getUpperBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.586076331E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586076331E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586076331E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(581.4581F));
      assertTrue(stack1.equals((Object)stack0));
      
      Float float1 = new Float((-2435.7932981876966));
      assertNotNull(float1);
      assertEquals((-2435.7932F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float1);
      assertEquals("[-2435.7932]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertFalse(stack0.contains(581.4581F));
      assertTrue(stack0.contains(float1));
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[-2435.7932]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(581.4581F));
      assertTrue(stack0.contains(float1));
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1, 542, 542, "java.lang.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("java.lang.String");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(541.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(543.0, range0.getUpperBound(), 0.01);
      assertEquals(272.5, range0.getCentralValue(), 0.01);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 542.0;
      doubleArray1[1] = (double) 542;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 542;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 542;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = 985.95133061118;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "Jv+", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 542);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(542, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "java.lang.String", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 542, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("YdstG;6m<<", "YdstG;6m<<", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      defaultCategoryDataset0.addValue((double) 0, (Comparable) "YdstG;6m<<", (Comparable) "YdstG;6m<<");
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), 491);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(491, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[581.4581]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), 28, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[23];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[2] = (double) (-11);
      Instant instant0 = MockInstant.ofEpochSecond(0L, (long) (-11));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 28;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(23, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.586076319E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.586076319E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.586076319E12), range0.getUpperBound(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(23, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      MockDate mockDate0 = new MockDate((-7), (-7), 504, (-7), (-1645), (-7));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1645);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 504;
      doubleArray0[3] = (double) (-7);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Oct 15 13:34:53 GMT 1893", mockDate0.toString());
      assertEquals(8, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1645.0), Double.POSITIVE_INFINITY, 504.0, (-7.0)}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(4, numberArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1645.0), Double.POSITIVE_INFINITY, 504.0, (-7.0)}, doubleArray0, 0.01);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Oct 15 13:34:53 GMT 1893", mockDate0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(8, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1645.0), Double.POSITIVE_INFINITY, 504.0, (-7.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 13);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'xRange' argument");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1.7976931348623157E308), 1737.105031);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals((-1.7976931348623157E308), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1737.105031, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1834.744657522), 1737.105031, 17, "Null 'xRange' argument");
      assertNotNull(xYSeries0);
      assertEquals((-1.7976931348623157E308), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1737.105031, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-1834.744657522), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(17, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1737.1050310000003, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1412.110270282678, 1412.110270282678, (Comparable) "", (Comparable) "");
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(18, 999, 279, 279, 1, 8);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1987, 1201, 999, (-1082), (-1082));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 279;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1987;
      doubleArray0[4] = (double) 1201;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 581.4581F;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1201;
      doubleArray1[1] = 2138.5953348;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Tue Jan 15 15:01:08 GMT 2002", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1201.0, 2138.5953348}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {279.0, 1.0, 4.0, 1987.0, 1201.0, 1.0, 8.0, 581.4581298828125}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray1);
      assertNotNull(numberArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, numberArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1201.0, 2138.5953348}, doubleArray1, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("Tue Jan 15 15:01:08 GMT 2002", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6.373530708E13, range0.getUpperBound(), 0.01);
      assertEquals(1.011106868E12, range0.getLowerBound(), 0.01);
      assertEquals(6.2724200212E13, range0.getLength(), 0.01);
      assertEquals(3.2373206974E13, range0.getCentralValue(), 0.01);
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1201.0, 2138.5953348}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {279.0, 1.0, 4.0, 1987.0, 1201.0, 1.0, 8.0, 581.4581298828125}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), (-2), 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 2138.59533;
      doubleArray0[0] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, (-2.0), 2138.59533, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, (-2.0), 2138.59533, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(581.4581F);
      assertNotNull(double0);
      assertEquals(581.4581298828125, (double)double0, 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries(float0, "@T6IE", "5fyv#Otd6\\_=");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("@T6IE", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("5fyv#Otd6\\_=", timeSeries0.getRangeDescription());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean1 = timeZone0.observesDaylightTime();
      assertEquals("GMT", timeZone0.getID());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("@T6IE", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("5fyv#Otd6\\_=", timeSeries0.getRangeDescription());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("@T6IE", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("5fyv#Otd6\\_=", timeSeries0.getRangeDescription());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {1.0, 0.0, (-2.0), 2138.59533, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = stack0.add(categoryTableXYDataset0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean0);
      assertTrue(stack0.contains(categoryTableXYDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1, 1);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableXYDataset0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      
      vectorSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(1, seriesChangeInfo0.getIndex1());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(93, 542, 2958465, 542, (-2834), 542);
      assertNotNull(mockDate0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2958465;
      doubleArray1[1] = 2138.5953348;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Mar 21 14:55:02 GMT 10138", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2958465.0, 2138.5953348}, doubleArray1, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray1);
      assertNotNull(numberArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, numberArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2958465.0, 2138.5953348}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number2);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">`", ">`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(0, 505, 501, 501, 408);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Wed Jul 07 03:48:00 GMT 1943", mockDate0.toString());
      assertEquals((-835906319001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-835906320000L), second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertNotNull(mockDate1);
      assertEquals("Wed Jul 07 03:48:00 GMT 1943", mockDate0.toString());
      assertEquals("Wed Jul 07 03:48:00 GMT 1943", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 59);
      assertNotNull(timeSeriesDataItem0);
      assertEquals("Wed Jul 07 03:48:00 GMT 1943", mockDate0.toString());
      assertEquals((-835906319001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-835906320000L), second0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      defaultPieDataset0.insertValue(0, (Comparable) timeSeriesDataItem0, (Number) 59);
      assertEquals("Wed Jul 07 03:48:00 GMT 1943", mockDate0.toString());
      assertEquals((-835906319001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-835906320000L), second0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      stack0.setSize(10);
      assertEquals("[null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertEquals(10, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(523, (-618), 0, 7, 0, 523);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(4);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 523;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1774.094765057;
      doubleArray0[4] = 1391.6619689618028;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Jun 30 07:08:43 GMT 2371", mockDate0.toString());
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {523.0, Double.NaN, 4.0, 1774.094765057, 1391.6619689618028, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {523.0, Double.NaN, 4.0, 1774.094765057, 1391.6619689618028, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Jun 30 07:08:43 GMT 2371", mockDate0.toString());
      assertEquals(1774.094765057, range0.getUpperBound(), 0.01);
      assertEquals(1770.094765057, range0.getLength(), 0.01);
      assertEquals(889.0473825285, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {523.0, Double.NaN, 4.0, 1774.094765057, 1391.6619689618028, 4.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(523.0);
      assertNotNull(double0);
      assertEquals(523.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Jun 30 07:08:43 GMT 2371", mockDate0.toString());
      assertEquals(1774.094765057, range0.getUpperBound(), 0.01);
      assertEquals(1770.094765057, range0.getLength(), 0.01);
      assertEquals(889.0473825285, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {523.0, Double.NaN, 4.0, 1774.094765057, 1391.6619689618028, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "//)~AV^/");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("java.lang.String");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("java.lang.String"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1.0), (-1.0), (Comparable) "java.lang.String", (Comparable) "java.lang.String");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("java.lang.String"));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(581.4581F);
      assertNotNull(double0);
      assertEquals(581.4581298828125, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(false);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = timeSeriesCollection0.indexOf(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, int0);
      
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.5420949012E13, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.5420949012E13, range1.getCentralValue(), 0.01);
      assertEquals(1.5420949012E13, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) simpleHistogramBin0);
      assertNotNull(pieDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleHistogramBin0, 1.7976931348623157E308, 1);
      assertNotNull(pieDataset1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), (-2), 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      boolean boolean1 = mockDate0.before(dateArray0[0]);
      assertEquals("Thu Oct 28 22:04:01 GMT 1897", mockDate0.toString());
      assertFalse(boolean1);
      assertEquals(1, dateArray0.length);
      assertFalse(boolean1 == boolean0);
      
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(581.4581F);
      assertNotNull(double0);
      assertEquals(581.4581298828125, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, true);
      assertNotNull(range2);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2.277597359E12), range2.getCentralValue(), 0.01);
      assertEquals((-2.277597359E12), range2.getUpperBound(), 0.01);
      assertEquals((-2.277597359E12), range2.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      String string0 = null;
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-371.632);
      doubleArray1[1] = 393.09382519558;
      doubleArray1[2] = (-2014.314134991349);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-226.21692469);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray2 = new double[3][3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-226.21692469);
      doubleArray3[1] = 393.09382519558;
      doubleArray3[2] = (-226.21692469);
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray2, doubleArray2);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(1.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(4.0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      defaultHighLowDataset0.setSelectionState(simpleHistogramDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2138.5953348, 0.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2138.5953348, 0.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNotNull(range0);
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.140725359E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.140725359E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2138.5953348, 0.0, 4.0}, doubleArray0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 2.0, (-4034.2779561));
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range1);
      assertEquals((-2.140725359E12), range1.getCentralValue(), 0.01);
      assertEquals((-2.140725359E12), range1.getUpperBound(), 0.01);
      assertEquals((-2.140725359E12), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 2138.5953348, 0.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(2.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset1, true);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset1.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(defaultHighLowDataset1, defaultHighLowDataset0);
      assertNotSame(range1, range0);
      assertFalse(defaultHighLowDataset1.equals((Object)defaultHighLowDataset0));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 514, 1262);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(514, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1262, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), (-2), 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (-2), (-1722.757), (Comparable) float0, (Comparable) dateArray0[0]);
      assertEquals(1, dateArray0.length);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-2.0), number0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-2.0), range0.getCentralValue(), 0.01);
      assertEquals((-2.0), range0.getUpperBound(), 0.01);
      assertEquals((-2.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries1 = new TimeSeries("", "", "~HK{$c3Z]");
      assertNotNull(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("~HK{$c3Z]", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("~HK{$c3Z]", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertTrue(timeSeries2.getNotify());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertNull(timeSeries2.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.5420949012E13, range1.getUpperBound(), 0.01);
      assertEquals(1.5420949012E13, range1.getCentralValue(), 0.01);
      assertEquals(1.5420949012E13, range1.getLowerBound(), 0.01);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(range1, range0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(range1.equals((Object)range0));
      
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<XYSeriesCollection>) null;
      comparableArray0[1] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray0[2] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray0[3] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Vector<String> vector0 = new Stack<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(""));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(vector0.contains(""));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(1.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(4.0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      defaultHighLowDataset0.setSelectionState(simpleHistogramDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) float0, (Comparable) float0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add((double) 0.0F, 1168.9256106814498, (Comparable) "", (Comparable) "");
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(2, int0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2337.8512213628997, range0.getLength(), 0.01);
      assertEquals(1168.9256106814498, range0.getUpperBound(), 0.01);
      assertEquals((-1168.9256106814498), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3069.0505105);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3069.0505105, range1.getLowerBound(), 0.01);
      assertEquals(3069.0505105, range1.getCentralValue(), 0.01);
      assertEquals(3069.0505105, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 526;
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1340);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 526;
      doubleArray1[2] = (double) 526;
      doubleArray0[4] = (double) 526;
      doubleArray1[4] = (double) 526;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("PieDatasetChangeType.ADD_AND_REMOVE", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1340.0), 526.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 526.0, 526.0, 0.0, 526.0}, doubleArray1, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, (-1340.0), 526.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 526.0, 526.0, 0.0, 526.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 517;
      doubleArray2[1] = (double) 517;
      doubleArray2[2] = (double) (-537);
      doubleArray2[3] = 270.81528055;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1987.1426;
      doubleArray1[1] = 3197.4;
      doubleArray1[2] = 2503.43;
      doubleArray1[3] = 400.29;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = 472.2681;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 400.29;
      doubleArray2[1] = 472.2681;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 3197.4;
      doubleArray2[4] = 1987.1426;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(400.29, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1340);
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1340);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 526;
      doubleArray0[4] = (double) 526;
      doubleArray1[4] = (double) 526;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("PieDatasetChangeType.ADD_AND_REMOVE", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 0.0, 526.0, (-1340.0), 526.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 526.0, 0.0, 0.0, 526.0}, doubleArray1, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1552.99026), 245.987252405055);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((-1552.99026), (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-776.49513), range0.getCentralValue(), 0.01);
      assertEquals(1552.99026, range0.getLength(), 0.01);
      assertEquals((-1552.99026), range0.getLowerBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      jDBCXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      simpleHistogramBin0.setSelected(false);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) simpleHistogramBin0);
      assertNotNull(pieDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleHistogramBin0, 2010.769452388, (-2722));
      assertNotNull(pieDataset1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) simpleHistogramBin0, (KeyedValues) pieDataset1);
      assertNotNull(categoryDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1552.99026), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(245.987252405055, simpleHistogramBin0.getUpperBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-299.457);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-299.457);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-299.457);
      doubleArray3[1] = (-299.457);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-299.457);
      doubleArray5[2] = 1.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "P5X", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, Double.POSITIVE_INFINITY, (-910));
      assertNotNull(pieDataset1);
      assertEquals(5, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      int int0 = 4;
      int int1 = 1;
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number2);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[][] numberArray1 = new Number[3][6];
      numberArray1[0] = numberArray0;
      numberArray1[1] = numberArray0;
      numberArray1[2] = numberArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(dateArray0, dateArray0, numberArray1, numberArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.793168809636565, 1.793168809636565, "Requires 'samples' > 1");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.793168809636565);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.793168809636565, range0.getLowerBound(), 0.01);
      assertEquals(3.58633761927313, range0.getUpperBound(), 0.01);
      assertEquals(2.6897532144548473, range0.getCentralValue(), 0.01);
      assertEquals(1.793168809636565, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-789.0);
      doubleArray1[1] = (-475.4079);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-475.4079);
      doubleArray2[1] = (-475.4079);
      doubleArray2[2] = (-789.0);
      doubleArray2[3] = (-789.0);
      doubleArray2[4] = (-475.4079);
      doubleArray2[5] = (-789.0);
      doubleArray2[6] = (-475.4079);
      doubleArray2[7] = (-789.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dAU_#dm&`F@>L0-3", "Null 'xRang' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-1306.3351311);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-1306.3351311);
      doubleArray3[3] = (-1306.3351311);
      doubleArray3[4] = 546.5503;
      doubleArray3[5] = (-1306.3351311);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 546.5503;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = (Number) long0;
      numberArray2[3] = (Number) long0;
      numberArray2[4] = (Number) long0;
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) long0;
      numberArray2[7] = (Number) long0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.4581]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 581.4581F;
      doubleArray1[1] = (double) 581.4581F;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = 1398.5649695356028;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("DomainOrder.NONE", "DomainOrder.NONE", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1398.5649695356028, number0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DynamicTimeSeriesCollection> stack1 = new Stack<DynamicTimeSeriesCollection>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.clear();
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      defaultStatisticalCategoryDataset0.add(3665.13005661393, (-1022.99049), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      defaultStatisticalCategoryDataset0.add(0.0, 1.0, (Comparable) week0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(1320.5697833069648, range0.getCentralValue(), 0.01);
      assertEquals(2642.1395666139297, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2643.1395666139297, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(2643.1395666139297, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(1320.5697833069648, range1.getCentralValue(), 0.01);
      assertEquals(2642.1395666139297, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[4];
      Short short0 = new Short((short)17182);
      assertNotNull(short0);
      assertEquals((short)17182, (short)short0);
      
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) 53;
      numberArray1[2] = (Number) 53;
      numberArray1[3] = (Number) 1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) short0;
      numberArray2[1] = (Number) 53;
      numberArray2[2] = (Number) 53;
      numberArray2[3] = (Number) 53;
      numberArray2[4] = (Number) 53;
      numberArray2[5] = (Number) 53;
      numberArray2[6] = (Number) short0;
      numberArray2[7] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) short0;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) 1;
      numberArray4[1] = (Number) short0;
      numberArray4[2] = (Number) short0;
      numberArray4[3] = (Number) short0;
      numberArray4[4] = (Number) short0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      numberArray6[0] = (Number) 53;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[5];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray6));
      
      numberArray7[0] = (Number) 53;
      numberArray7[1] = (Number) 1;
      numberArray7[2] = (Number) 53;
      numberArray7[3] = (Number) 1;
      numberArray7[4] = (Number) 53;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-672.532551);
      doubleArray1[3] = 1499.8060473308751;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-672.532551);
      doubleArray2[1] = 1499.8060473308751;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1499.8060473308751;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) float0, (Comparable) float0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1168.9256106814498, (Comparable) "", (Comparable) "");
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(2, int0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3069.0505105);
      assertNotNull(range1);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(4460.712479461803, range1.getUpperBound(), 0.01);
      assertEquals(3069.0505105, range1.getLowerBound(), 0.01);
      assertEquals(3764.8814949809016, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1836.7092593603027);
      doubleArray1[1] = (-2389.2503795312);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2389.2503795312);
      doubleArray2[1] = (-1836.7092593603027);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-1836.7092593603027);
      doubleArray2[4] = (-1836.7092593603027);
      doubleArray2[5] = (-1836.7092593603027);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-1836.7092593603027);
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (-2389.2503795312);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1836.7092593603027);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) simpleHistogramBin0);
      assertNotNull(pieDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleHistogramBin0, Double.POSITIVE_INFINITY, 511);
      assertNotNull(pieDataset1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("^9/1d0,");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("^9/1d0,"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1412.110270282678, 1412.110270282678, (Comparable) "^9/1d0,", (Comparable) "^9/1d0,");
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) "^9/1d0,");
      assertNotNull(pieDataset0);
      
      MockDate mockDate0 = new MockDate(157, 157, 157, 161, 15);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Sun Jul 13 17:15:00 GMT 2070", mockDate0.toString());
      assertEquals(3172497300000L, second0.getFirstMillisecond());
      assertEquals(3172497300999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) second0, (double) 59, 334);
      assertNotNull(pieDataset1);
      assertEquals("Sun Jul 13 17:15:00 GMT 2070", mockDate0.toString());
      assertEquals(3172497300000L, second0.getFirstMillisecond());
      assertEquals(3172497300999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertEquals("Sun Jul 13 17:15:00 GMT 2070", mockDate0.toString());
      assertEquals(3172497300000L, second0.getFirstMillisecond());
      assertEquals(3172497300999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(boolean1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">`", ">`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) ">`", (double) 0, 0);
      assertNotNull(pieDataset1);
      assertEquals(1, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(2073L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(2073L, fixedMillisecond0.getSerialIndex());
      assertEquals(2073L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2073L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2073L, fixedMillisecond0.getLastMillisecond());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) fixedMillisecond0);
      assertNotNull(pieDataset0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(2073L, fixedMillisecond0.getSerialIndex());
      assertEquals(2073L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2073L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2073L, fixedMillisecond0.getLastMillisecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0);
      assertNotNull(list1);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list1, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1608.284981943612), 0.8, "&gxb]<Q!");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1608.284981943612), range0.getCentralValue(), 0.01);
      assertEquals((-1608.784981943612), range0.getLowerBound(), 0.01);
      assertEquals((-1607.784981943612), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1607.784981943612), range1.getUpperBound(), 0.01);
      assertEquals((-1608.284981943612), range1.getCentralValue(), 0.01);
      assertEquals((-1608.784981943612), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "";
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(0.0F));
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(0.0F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack0.contains(0.0F));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1341), (-1341));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1341), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1341), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("B", "B", "wj[%/Mmft");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("wj[%/Mmft", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("wj[%/Mmft", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate((-1075), (-537), (-537), (-1075), 1383, 517);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Fri Aug 28 04:11:37 GMT 778", mockDate0.toString());
      assertEquals((-37594871303000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-37594871303000L), fixedMillisecond0.getLastMillisecond());
      
      Task task0 = new Task("wj[%/Mmft", fixedMillisecond0);
      assertNotNull(task0);
      assertEquals("Fri Aug 28 04:11:37 GMT 778", mockDate0.toString());
      assertEquals((-37594871303000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-37594871303000L), fixedMillisecond0.getLastMillisecond());
      assertEquals("wj[%/Mmft", task0.getDescription());
      
      Double double0 = task0.getPercentComplete();
      assertNull(double0);
      assertEquals("Fri Aug 28 04:11:37 GMT 778", mockDate0.toString());
      assertEquals((-37594871303000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-37594871303000L), fixedMillisecond0.getLastMillisecond());
      assertEquals("wj[%/Mmft", task0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertNull(timeSeriesDataItem0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("wj[%/Mmft", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Aug 28 04:11:37 GMT 778", mockDate0.toString());
      assertEquals((-37594871303000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-37594871303000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-37594871303000L), fixedMillisecond0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("B", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("wj[%/Mmft", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1, 520, 520, "java.lan-g.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(260.5, range0.getCentralValue(), 0.01);
      assertEquals(520.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(520.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
      
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Week week1 = (Week)week0.previous();
      assertNotNull(week1);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(6, week1.getWeek());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) week1;
      Comparable<DefaultHighLowDataset>[] comparableArray1 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<DefaultHighLowDataset>) week1;
      comparableArray1[1] = (Comparable<DefaultHighLowDataset>) week1;
      comparableArray1[2] = (Comparable<DefaultHighLowDataset>) week0;
      comparableArray1[3] = (Comparable<DefaultHighLowDataset>) week0;
      comparableArray1[4] = (Comparable<DefaultHighLowDataset>) week1;
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 520;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 520;
      doubleArray1[4] = (double) 53;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 53;
      doubleArray2[1] = (double) 53;
      doubleArray2[2] = (double) 53;
      doubleArray2[3] = (double) 53;
      doubleArray2[4] = (double) 53;
      doubleArray2[5] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 53;
      doubleArray3[1] = (double) 520;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 520;
      doubleArray3[4] = (double) 53;
      doubleArray3[5] = (double) 53;
      doubleArray3[6] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 53;
      doubleArray4[1] = (double) 53;
      doubleArray4[2] = (double) 520;
      doubleArray4[3] = (double) 520;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (double) 53;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 520;
      doubleArray6[3] = 1896.031353;
      doubleArray6[4] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (double) 520;
      doubleArray8[1] = (double) 1;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = (double) 1;
      doubleArray9[1] = (double) 520;
      doubleArray9[2] = (double) 1;
      doubleArray9[3] = (double) 520;
      doubleArray9[4] = 1896.031353;
      doubleArray9[5] = (double) 1;
      doubleArray9[6] = (double) 1;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(">`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">`", ">`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-2431));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range0.getUpperBound(), 0.01);
      assertEquals(2783.3239379236056, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1391.6619689618028);
      assertNotNull(range1);
      assertEquals(2783.3239379236056, range1.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(2087.492953442704, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(2783.3239379236056, number1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1391.6619689618028, range2.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range2.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 7, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 581.4581F;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(581.4581298828125, range0.getCentralValue(), 0.01);
      assertEquals(581.4581298828125, range0.getUpperBound(), 0.01);
      assertEquals(581.4581298828125, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140707359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(581.4581298828125, number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(float0));
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float1);
      assertEquals("[1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(1.0F));
      assertFalse(stack0.contains(float0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float0);
      assertEquals("[1.0, 0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1);
      assertTrue(stack0.contains(1.0F));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) float0, (double) 0.0F, 508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 7, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140707359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(float0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1, 542, 542, "java.lang.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(272.5, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(543.0, range0.getUpperBound(), 0.01);
      assertEquals(541.0, range0.getLength(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1, 1656.80164214439, 542, "java.lang.String");
      assertNotNull(xYSeries0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(2.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1656.80164214439, xYSeries0.getMaxX(), 0.01);
      assertEquals(542, xYSeries0.getItemCount());
      assertEquals(1657.80164214439, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("eVf");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("eVf"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1698.186972076), (double) 1, (Comparable) "eVf", (Comparable) "eVf");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1698.186972076), range0.getCentralValue(), 0.01);
      assertEquals((-1698.186972076), range0.getUpperBound(), 0.01);
      assertEquals((-1698.186972076), range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains("eVf"));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-1698.186972076), number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 2145.72;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 2973.191075653213;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2145.72;
      doubleArray2[1] = 1309.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.8;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2506.82459632);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = 2973.191075653213;
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray3[5] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray4[1] = 2145.72;
      doubleArray4[2] = (-2506.82459632);
      doubleArray4[3] = 1309.0;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = (-7141.0);
      doubleArray4[6] = 2973.191075653213;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Rt9t)%E5";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      double double0 = 1391.6619689618028;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Double double1 = new Double(1391.6619689618028);
      assertNotNull(double1);
      assertEquals(1391.6619689618028, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList1, range0, false);
      assertNull(range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, false);
      assertNull(range2);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1391.6619689618028);
      assertNotNull(range3);
      assertEquals(2783.3239379236056, range3.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range3.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range3.getLength(), 0.01);
      assertEquals(2087.492953442704, range3.getCentralValue(), 0.01);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 840);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 840, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(602.41113F);
      assertNotNull(float0);
      assertEquals(602.41113F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[602.41113]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) float0;
      numberArray0[1] = (Number) float0;
      numberArray0[2] = (Number) float0;
      numberArray0[3] = (Number) float0;
      numberArray0[4] = (Number) float0;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean1 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[602.41113]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-47.93));
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int0 = (-191);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(0.0F));
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(0.0F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float1 = stack0.push(float0);
      assertNotNull(float1);
      assertEquals("[0.0, 0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(0.0F, (float)float1, 0.01F);
      assertTrue(stack0.contains(float1));
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 528, 2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 528, 0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 528);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(528, categoryToPieDataset0.getExtractIndex());
      
      categoryTableXYDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(528, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(528, categoryToPieDataset0.getExtractIndex());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(stack0.contains(float0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1800.110092172066), 3163.53);
      assertNotNull(lineFunction2D0);
      assertEquals((-1800.110092172066), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(3163.53, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0, 779.659018, 2, float0);
      assertNotNull(xYSeries0);
      assertEquals((-1800.110092172066), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(3163.53, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(779.659018, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2464674.583121368, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals((-1800.110092172066), xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(">`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">`", ">`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.4581]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 7, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 581.4581F;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2138.5953348;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(581.4581298828125, range0.getLowerBound(), 0.01);
      assertEquals(581.4581298828125, range0.getCentralValue(), 0.01);
      assertEquals(581.4581298828125, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {581.4581298828125, 4.0, 2.0, 2138.5953348, 2.0, 4.0}, doubleArray0, 0.01);
      
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(572.551, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 572.551 to 2.0
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'xRange'a=gumnt", "Null 'xRange'a=gumnt", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) "Null 'xRange'a=gumnt", (Comparable) integer0);
      assertEquals(1, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[8];
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[0] = (Number) integer1;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "#GJW\"ds7&6=c", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[3];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1507, 1507, 1507);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1507,MONTH=1507,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1507,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[0] = date0;
      Date date1 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1507,MONTH=1507,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1507,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      
      dateArray0[1] = date1;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("{{X-k<");
      assertNotNull(mockSimpleDateFormat0);
      
      MockDate mockDate0 = new MockDate(1507, 1507, 1507, 1507, 1507);
      assertNotNull(mockDate0);
      
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("#GJW\"ds7&6=c", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) "Null 'xRange' argument", (Comparable) integer0);
      assertEquals(1, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[0] = (Number) integer1;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2783.3239379236056, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(2783.3239379236056, number1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range1.getUpperBound(), 0.01);
      assertEquals(2783.3239379236056, range1.getLength(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 581.4581F;
      doubleArray1[1] = (double) 581.4581F;
      doubleArray1[2] = (double) 581.4581F;
      doubleArray1[3] = (double) 581.4581F;
      doubleArray1[4] = (double) 581.4581F;
      doubleArray1[5] = (double) 581.4581F;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 581.4581F;
      doubleArray2[1] = (double) 581.4581F;
      doubleArray2[2] = (double) 581.4581F;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 581.4581F;
      doubleArray3[1] = (double) 581.4581F;
      doubleArray3[2] = (double) 581.4581F;
      doubleArray3[3] = (double) 581.4581F;
      doubleArray3[4] = (double) 581.4581F;
      doubleArray3[5] = (double) 581.4581F;
      doubleArray3[6] = (double) 581.4581F;
      doubleArray3[7] = (-1562.94243342981);
      doubleArray3[8] = (double) 581.4581F;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "6`hh*NCM6:jAR7$l", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("java.lang.String");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate((-3843), (-1491), 1, 305, (-3480), 517);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Sat Oct 11 07:08:37 GMT 2069", mockDate0.toString());
      assertEquals((-127403945483000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-127403945483000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-127403945483000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-127403945483000L), fixedMillisecond0.getMiddleMillisecond());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      assertNull(timeSeriesDataItem0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Sat Oct 11 07:08:37 GMT 2069", mockDate0.toString());
      assertEquals((-127403945483000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-127403945483000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-127403945483000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-127403945483000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1.27403945483E14), range0.getLowerBound(), 0.01);
      assertEquals((-1.27403945483E14), range0.getCentralValue(), 0.01);
      assertEquals((-1.27403945483E14), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection1);
      assertEquals(0, xIntervalSeriesCollection1.getSeriesCount());
      assertTrue(xIntervalSeriesCollection1.equals((Object)xIntervalSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range1);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1.27403945483E14), range1.getCentralValue(), 0.01);
      assertEquals((-1.27403945483E14), range1.getUpperBound(), 0.01);
      assertEquals((-1.27403945483E14), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range2);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1.27403945483E14), range2.getCentralValue(), 0.01);
      assertEquals((-1.27403945483E14), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.27403945483E14), range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-2407));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2407), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      int int0 = bigInteger0.intValue();
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1, int0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1391.6619689618028, (-243.98369870962995));
      assertNotNull(lineFunction2D0);
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      
      int int1 = 542;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1896.031353, 2973.47573938, 542, bigInteger0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1896.031353, range0.getLowerBound(), 0.01);
      assertEquals(2973.47573938, range0.getUpperBound(), 0.01);
      assertEquals(2434.75354619, range0.getCentralValue(), 0.01);
      assertEquals(1077.44438638, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1077.44438638, range1.getLength(), 0.01);
      assertEquals(2434.75354619, range1.getCentralValue(), 0.01);
      assertEquals(2973.47573938, range1.getUpperBound(), 0.01);
      assertEquals(1896.031353, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      String string0 = "k\"x?\\";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("qfs", "org.jfree.data.pie.AbstractPieDataset", "k\"x?", "Null 'xRange' argument");
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // No suitable driver found for qfs
         //
         verifyException("java.sql.DriverManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = "org.jfree.data.xy.AbstractIntervalXYDataset";
      boolean boolean0 = arrayList0.add("org.jfree.data.xy.AbstractIntervalXYDataset");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("org.jfree.data.xy.AbstractIntervalXYDataset"));
      
      double double0 = 1391.6619689618028;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 2019.186342779648, (Comparable) "org.jfree.data.xy.AbstractIntervalXYDataset", (Comparable) "org.jfree.data.xy.AbstractIntervalXYDataset");
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(arrayList0.contains("org.jfree.data.xy.AbstractIntervalXYDataset"));
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(number0.equals((Object)double0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 46.35094999558223);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      int int0 = 493;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 493);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 493, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 1;
      String string0 = "java.lang.String";
      int int1 = 542;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-2443.784054106), (-2443.784054106), (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      MockDate mockDate0 = new MockDate((-537), 3232, 3232, (-537), 173, (-537));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Feb 11 17:44:03 GMT 1641", mockDate0.toString());
      assertEquals((-10378563357000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-10378563357000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Rt9t)%E5", "Rt9t)%E5");
      assertNotNull(timeSeries0);
      assertEquals("Mon Feb 11 17:44:03 GMT 1641", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Rt9t)%E5", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Rt9t)%E5", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Byte byte0 = new Byte((byte) (-101));
      assertNotNull(byte0);
      assertEquals((byte) (-101), (byte)byte0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-4887.568108212).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Float float0 = Float.valueOf(581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.4581F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-2), (-2), (-2), (-2), 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 581.4581F;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 2138.5953348;
      doubleArray0[5] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(581.4581F);
      assertNotNull(double0);
      assertEquals(581.4581298828125, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.4581]", stack0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(stack0.contains(581.4581F));
      assertArrayEquals(new double[] {0.0, 0.0, (-2.0), 2138.5953348, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("java.lang.String");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "java.lang.String", (Comparable) "java.lang.String");
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) list0, range0, false);
      assertNull(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(602.41113F);
      assertNotNull(float0);
      assertEquals(602.41113F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals("[602.41113]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(602.41113F));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYZDataset0, 602.41113F);
      assertNotNull(xYBarDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(602.4111328125, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = Range.expandToInclude((Range) null, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList1, range0, true);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, false);
      assertNull(range2);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1391.6619689618028);
      assertNotNull(range3);
      assertEquals(1391.6619689618028, range3.getLength(), 0.01);
      assertEquals(2087.492953442704, range3.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range3.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range0.getUpperBound(), 0.01);
      assertEquals(2783.3239379236056, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1391.6619689618028);
      assertNotNull(range1);
      assertEquals(2087.492953442704, range1.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range1.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(1391.6619689618028, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (-1.7976931348623157E308));
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range1, true);
      assertNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2087.492953442704, range1.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range1.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(1391.6619689618028, range1.getLowerBound(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1391.6619689618028, (-243.98369870962995));
      assertNotNull(lineFunction2D0);
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1896.031353, 2973.47573938, 542, bigInteger0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1077.44438638, range0.getLength(), 0.01);
      assertEquals(2434.75354619, range0.getCentralValue(), 0.01);
      assertEquals(2973.47573938, range0.getUpperBound(), 0.01);
      assertEquals(1896.031353, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(262878.86654292, range1.getLength(), 0.01);
      assertEquals((-724087.9469483222), range1.getLowerBound(), 0.01);
      assertEquals((-461209.08040540223), range1.getUpperBound(), 0.01);
      assertEquals((-592648.5136768622), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1391.6619689618028, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-461209.08040540223), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1477.0042778872792), (-12.307660385623), "z");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2292.2992693749);
      doubleArray1[1] = 1193.60346902;
      doubleArray1[2] = 774.4022992163839;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2292.7992693749);
      doubleArray2[1] = (-2292.2992693749);
      doubleArray2[2] = 1193.60346902;
      doubleArray2[3] = (-2292.2992693749);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2164.6901744);
      doubleArray3[1] = 427.3927693295;
      doubleArray3[2] = 774.4022992163839;
      doubleArray3[3] = (-2292.7992693749);
      doubleArray3[4] = 774.4022992163839;
      doubleArray3[5] = (-2292.7992693749);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-2292.2992693749);
      doubleArray4[1] = (-1230.828809567891);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 207.9941;
      doubleArray5[1] = (-2292.7992693749);
      doubleArray5[2] = 1193.60346902;
      doubleArray5[3] = (-2292.7992693749);
      doubleArray5[4] = 2135.424696012271;
      doubleArray5[5] = 774.4022992163839;
      doubleArray5[6] = 1193.60346902;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 207.9941;
      doubleArray6[1] = 774.4022992163839;
      doubleArray6[2] = (-2164.6901744);
      doubleArray6[3] = 774.4022992163839;
      doubleArray6[4] = 774.4022992163839;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 207.9941;
      doubleArray7[1] = 1193.60346902;
      doubleArray7[2] = 1193.60346902;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-229.514035328016);
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-229.514035328016);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 2254.903838202032;
      doubleArray4[2] = (-229.514035328016);
      doubleArray4[3] = (-229.514035328016);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2255.903838202032, number0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2254.903838202032, range0.getUpperBound(), 0.01);
      assertEquals(2484.4178735300484, range0.getLength(), 0.01);
      assertEquals((-229.514035328016), range0.getLowerBound(), 0.01);
      assertEquals(1012.6949014370081, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      System.setCurrentTimeMillis(0L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        yIntervalSeriesCollection0.removeSeries(1559);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds.
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(602.41113F);
      assertNotNull(float0);
      assertEquals(602.41113F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(10, stack0.capacity());
      assertEquals("[602.41113]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(602.41113F));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[602.41113]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(stack0.contains(602.41113F));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      String string0 = "#GJW\"ds7&6=c";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "#GJW\"ds7&6=c", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 793;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 793);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(793, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "%>`", (-1729.1145222019));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 793, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(">`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) ">`", 361.85, (-1548));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 361.85;
      doubleArray1[1] = 361.85;
      doubleArray1[2] = (double) (-1548);
      doubleArray1[3] = (double) (-1548);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 361.85;
      doubleArray2[3] = (double) (-1548);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-1548);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 361.85;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 361.85;
      doubleArray3[3] = (double) (-1548);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-1548);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (double) (-1548);
      doubleArray4[4] = 361.85;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2469.77209650469);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) (-1548);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 361.85;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-2083.805966), 1391.6619689618028, (Comparable) "", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-692.1439970381971), range0.getUpperBound(), 0.01);
      assertEquals(2783.3239379236056, range0.getLength(), 0.01);
      assertEquals((-2083.805966), range0.getCentralValue(), 0.01);
      assertEquals((-3475.4679349618027), range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("Rt9t)%E5"));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-1608.284981943612));
      assertNotNull(range1);
      assertEquals((-1608.284981943612), range1.getUpperBound(), 0.01);
      assertEquals(2083.805966, range1.getLength(), 0.01);
      assertEquals((-2650.187964943612), range1.getCentralValue(), 0.01);
      assertEquals((-3692.090947943612), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1999.7527426196907), 1168.9256106814498, (Comparable) "%>`", (Comparable) "#GJW\"ds7&6=c");
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3069.0505105);
      assertNotNull(range1);
      assertEquals(1069.2977678803095, range1.getLowerBound(), 0.01);
      assertEquals(3069.0505105, range1.getUpperBound(), 0.01);
      assertEquals(2069.174139190155, range1.getCentralValue(), 0.01);
      assertEquals(1999.7527426196907, range1.getLength(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 1425.413114453);
      assertNotNull(xYBarDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1425.413114453, xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float((double) 581.4581F);
      assertNotNull(float0);
      assertEquals(581.4581F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 4, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.140725359E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      Instant instant0 = MockInstant.now(clock0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, number2);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertTrue(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertArrayEquals(new double[] {0.0, 4.0, 2.0, 0.0, 2.0, 4.0}, doubleArray0, 0.01);
      
      Number[][] numberArray1 = new Number[3][6];
      numberArray1[0] = numberArray0;
      numberArray1[1] = numberArray0;
      numberArray1[2] = numberArray0;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (-1121.244076);
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 4;
      doubleArray1[3] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(4, doubleArray1.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(12.0, double0, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\u0005ZR6", ")3_gp", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(1L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = Range.shift(range0, 802.996102);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(802.996102, range1.getCentralValue(), 0.01);
      assertEquals(802.996102, range1.getUpperBound(), 0.01);
      assertEquals(802.996102, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) null, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 831);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2691.32811), Double.NaN, ":Iy5CL");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 831);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 831, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1391.6619689618028, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      MockDate mockDate0 = new MockDate((-537), 3232, 3232, (-537), 173, (-537));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Feb 11 17:44:03 GMT 1641", mockDate0.toString());
      assertEquals((-10378563357000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-10378563357000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "Rt9t)%E5", "Rt9t)%E5");
      assertNotNull(timeSeries0);
      assertEquals("Mon Feb 11 17:44:03 GMT 1641", mockDate0.toString());
      assertEquals("Rt9t)%E5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Rt9t)%E5", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Byte byte0 = new Byte((byte) (-101));
      assertNotNull(byte0);
      assertEquals((byte) (-101), (byte)byte0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) byte0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Mon Feb 11 17:44:03 GMT 1641", mockDate0.toString());
      assertEquals((-10378563357000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-10378563357000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-10378563357000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals("Rt9t)%E5", timeSeries0.getDomainDescription());
      assertEquals((-101.0), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Rt9t)%E5", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-101.0), timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range2);
      assertEquals(2783.3239379236056, range2.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range2.getCentralValue(), 0.01);
      assertEquals(2783.3239379236056, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number[][] numberArray0 = new Number[15][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 427.3927693295);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(427.3927693295, range0.getCentralValue(), 0.01);
      assertEquals(427.3927693295, range0.getLowerBound(), 0.01);
      assertEquals(427.3927693295, range0.getUpperBound(), 0.01);
      assertEquals(15, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1168.9256106814498, (double) 1, (Comparable) "java.lang.String", (Comparable) "java.lang.String");
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-1630.5061));
      assertNotNull(range1);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      
      Range range2 = Range.combine(range1, (Range) null);
      assertNotNull(range2);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      assertEquals((-1630.5061), range2.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range2.getCentralValue(), 0.01);
      assertEquals((-461.58048931855024), range2.getUpperBound(), 0.01);
      assertEquals(1168.9256106814498, range2.getLength(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNotNull(range3);
      assertEquals(1168.9256106814498, range3.getUpperBound(), 0.01);
      assertEquals(1168.9256106814498, range3.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[15][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 526, 526);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(526, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(526, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-1340));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1340);
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1340);
      doubleArray0[4] = (double) (-1340);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 526;
      doubleArray1[1] = (double) 526;
      doubleArray1[2] = (double) 526;
      doubleArray1[3] = (double) 526;
      doubleArray1[4] = (double) 526;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 526.0, 526.0, (-1340.0), (-1340.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0, 526.0}, doubleArray1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 526.0, 526.0, (-1340.0), (-1340.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0, 526.0}, doubleArray1, 0.01);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 526.0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      assertNotNull(styledEditorKit_UnderlineAction0);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M+>.7yy", "%>`", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray1.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("%>`", "M+>.7yy", doubleArray1);
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(number1.equals((Object)number0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Number number2 = DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      assertNotNull(number2);
      assertEquals(0.0, number2);
      assertEquals(1, doubleArray1.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(26);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(26, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      SerialDate serialDate0 = SerialDate.addYears(2, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(26, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(756, serialDate0.toSerial());
      assertEquals(7, serialDate0.getDayOfWeek());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(25, serialDate0.getDayOfMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3, 151);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(150, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(150, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number[][] numberArray0 = new Number[15][9];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, doubleArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(356L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2135.424696012271);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2135.424696012271, range0.getCentralValue(), 0.01);
      assertEquals(2135.424696012271, range0.getUpperBound(), 0.01);
      assertEquals(2135.424696012271, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1168.9256106814498, (double) 1, (Comparable) "java.lang.String", (Comparable) "java.lang.String");
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-1630.5061));
      assertNotNull(range1);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      
      Range range2 = Range.combine(range1, (Range) null);
      assertNotNull(range2);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      assertEquals((-461.58048931855024), range2.getUpperBound(), 0.01);
      assertEquals((-1046.043294659275), range2.getCentralValue(), 0.01);
      assertEquals(1168.9256106814498, range2.getLength(), 0.01);
      assertEquals((-1630.5061), range2.getLowerBound(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1.0);
      assertNotNull(range3);
      assertEquals(1168.9256106814498, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(585.4628053407249, range3.getCentralValue(), 0.01);
      assertEquals(1169.9256106814498, range3.getUpperBound(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.FRANCE;
      assertNotNull(locale1);
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertNotNull(locale2);
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertNotNull(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 3654.388351619024);
      assertNotNull(xYBarDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(3654.388351619024, xYBarDataset0.getBarWidth(), 0.01);
      
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(3654.388351619024, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\u0005ZR6", ")3_gp", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "\u0005ZR6");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      TimeSeries timeSeries0 = new TimeSeries(")3_gp", "Null 'f' argument.", "");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Null 'f' argument.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Null 'f' argument.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(2, 533, (-1), 366, 517, 1249);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Null 'f' argument.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1896.031353, 1.5);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1896.031353, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 0.0, 1328.43, 2, fixedMillisecond0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1896.031353, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Null 'f' argument.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      assertNotNull(styledEditorKit_UnderlineAction0);
      
      boolean boolean0 = defaultBoxAndWhiskerXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M+>.7yy", "%>`", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray1.length);
      
      System.setCurrentTimeMillis(1L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, doubleArray1.length);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 1572.5018884784);
      assertNotNull(lineFunction2D0);
      assertEquals(1572.5018884784, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2950.6893291), 1L, 865, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1572.5018884784, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-4639964.542322813), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(865, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-2950.6893291), xYSeries0.getMinX(), 0.01);
      assertEquals(1572.5018884784, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("Rt9t)%E5");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1168.9256106814498, (Comparable) "Rt9t)%E5", (Comparable) "Rt9t)%E5");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 0.0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(695.8309844809014, range1.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range1.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range0, range0);
      assertNotNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range2.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range2.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 2044.8837824);
      assertNotNull(xYBarDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2044.8837824, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotNull(range3);
      assertEquals(695.8309844809014, range3.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range3.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range3, true);
      assertNull(range4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(695.8309844809014, range3.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range3.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains("Rt9t)%E5"));
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number[][] numberArray0 = new Number[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-929), (-929));
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-929), seriesChangeInfo0.getIndex1());
      assertEquals((-929), seriesChangeInfo0.getIndex2());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(categoryTableXYDataset0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-929), seriesChangeInfo0.getIndex1());
      assertEquals((-929), seriesChangeInfo0.getIndex2());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-929), seriesChangeInfo0.getIndex1());
      assertEquals((-929), seriesChangeInfo0.getIndex2());
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(35);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(35, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      SerialDate serialDate0 = SerialDate.addYears(7, spreadsheetDate0);
      assertNotNull(serialDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(35, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(3, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(2591, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(1907, serialDate0.getYYYY());
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      
      SerialDate serialDate1 = SerialDate.getNearestDayOfWeek(1, serialDate0);
      assertNotNull(serialDate1);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(35, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(3, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(2591, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(1907, serialDate0.getYYYY());
      assertEquals(2591, serialDate1.toSerial());
      assertNull(serialDate1.getDescription());
      assertEquals(1907, serialDate1.getYYYY());
      assertEquals(2, serialDate1.getMonth());
      assertEquals(3, serialDate1.getDayOfMonth());
      assertEquals(1, serialDate1.getDayOfWeek());
      assertNotSame(spreadsheetDate0, serialDate1);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, spreadsheetDate0);
      assertNotSame(serialDate1, serialDate0);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertFalse(serialDate1.equals((Object)spreadsheetDate0));
      assertTrue(serialDate1.equals((Object)serialDate0));
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) spreadsheetDate0, 1.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1168.9256106814498, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3069.0505105);
      assertNotNull(range1);
      assertEquals(4460.712479461803, range1.getUpperBound(), 0.01);
      assertEquals(3764.8814949809016, range1.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(3069.0505105, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range0, range0);
      assertNotNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertEquals(222.736358280353, range2.getLowerBound(), 0.01);
      assertEquals(2337.8512213629, range2.getLength(), 0.01);
      assertEquals(1391.6619689618028, range2.getCentralValue(), 0.01);
      assertEquals(2560.587579643253, range2.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (-1.7976931348623157E308));
      assertNotNull(xYBarDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range1, true);
      assertNull(range3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4460.712479461803, range1.getUpperBound(), 0.01);
      assertEquals(3764.8814949809016, range1.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(3069.0505105, range1.getLowerBound(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(356L);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1168.9256106814498, (double) 1, (Comparable) "java.lang.String", (Comparable) "java.lang.String");
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(1168.9256106814498));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-1630.5061));
      assertNotNull(range1);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      
      Range range2 = Range.combine(range1, (Range) null);
      assertNotNull(range2);
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals(1168.9256106814498, range2.getLength(), 0.01);
      assertEquals((-461.58048931855024), range2.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range2.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range2.getCentralValue(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 1.0);
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) vector0, range2, true);
      assertNull(range3);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1168.9256106814498, range1.getLength(), 0.01);
      assertEquals((-1046.043294659275), range1.getCentralValue(), 0.01);
      assertEquals((-461.58048931855024), range1.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range1.getLowerBound(), 0.01);
      assertEquals(1168.9256106814498, range2.getLength(), 0.01);
      assertEquals((-461.58048931855024), range2.getUpperBound(), 0.01);
      assertEquals((-1630.5061), range2.getLowerBound(), 0.01);
      assertEquals((-1046.043294659275), range2.getCentralValue(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(vector0.contains((-1630.5061)));
      assertSame(range1, range2);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(379, 379, (-2762), (-159), (-951), (-2148));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Tue Dec 30 16:33:12 GMT 2302", mockDate0.toString());
      assertEquals(10508286792000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getSerialIndex());
      
      Integer integer0 = new Integer((-1478));
      assertNotNull(integer0);
      assertEquals((-1478), (int)integer0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      assertNull(timeSeriesDataItem0);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1478.0), timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1478.0), timeSeries0.getMaxY(), 0.01);
      assertEquals("Tue Dec 30 16:33:12 GMT 2302", mockDate0.toString());
      assertEquals(10508286792000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(10508286792000L, fixedMillisecond0.getSerialIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1478.0), timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1478.0), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1478.0), range0.getCentralValue(), 0.01);
      assertEquals((-1478.0), range0.getUpperBound(), 0.01);
      assertEquals((-1478.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection1);
      assertEquals(0, xIntervalSeriesCollection1.getSeriesCount());
      assertTrue(xIntervalSeriesCollection1.equals((Object)xIntervalSeriesCollection0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotSame(xIntervalSeriesCollection0, xIntervalSeriesCollection1);
      assertTrue(xIntervalSeriesCollection0.equals((Object)xIntervalSeriesCollection1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-1478.0), range4.getCentralValue(), 0.01);
      assertEquals((-1478.0), range4.getUpperBound(), 0.01);
      assertEquals((-1478.0), range4.getLowerBound(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1478.0), timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-1478.0), timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(3232, 683, 151, 3468, 528, 531);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Thu Sep 21 20:56:51 GMT 5189", mockDate0.toString());
      assertEquals(101604661011000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Thu Sep 21 20:56:51 GMT 5189", mockDate0.toString());
      assertEquals(101604661011000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getSerialIndex());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(517, 531, fixedMillisecond0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Thu Sep 21 20:56:51 GMT 5189", mockDate0.toString());
      assertEquals(101604661011000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(530, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("Thu Sep 21 20:56:51 GMT 5189", mockDate0.toString());
      assertEquals(101604661011000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(101604661011000L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(530, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean1 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      numberArray3[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = null;
      numberArray3[5] = (Number) integer0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, numberArray0.length);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNull(range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean2);
      assertEquals(3, numberArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Mon Sep 02 04:56:52 GMT 2458", mockDate0.toString());
      assertEquals(15420949012000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15420949012000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15420949012000L, fixedMillisecond0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1, 542, 542, "java.lang.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(542.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(271.5, range0.getCentralValue(), 0.01);
      assertEquals(542.5, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 132.568501479799;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 132.568501479799;
      doubleArray2[2] = (-3281.6);
      doubleArray2[3] = 132.568501479799;
      doubleArray2[4] = 132.568501479799;
      doubleArray2[5] = 132.568501479799;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-3281.6);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 132.568501479799;
      doubleArray5[1] = 132.568501479799;
      doubleArray5[2] = (-3281.6);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 132.568501479799;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 132.568501479799;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1.7976931348623157E308);
      doubleArray6[1] = 132.568501479799;
      doubleArray6[2] = 871.662;
      doubleArray6[3] = 132.568501479799;
      doubleArray6[4] = (-3281.6);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-3281.6);
      doubleArray7[2] = 871.662;
      doubleArray7[3] = (-3281.6);
      doubleArray7[4] = 132.568501479799;
      doubleArray7[5] = 871.662;
      doubleArray7[6] = 871.662;
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-1.7976931348623157E308);
      doubleArray8[1] = (-1.7976931348623157E308);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 132.568501479799;
      doubleArray8[4] = (-3281.6);
      doubleArray8[5] = 0.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, (-1124), 517, 212, 533, 366);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(307.0, Double.POSITIVE_INFINITY);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(307.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 212, 517, 895, fixedMillisecond0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(307.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray1.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-231.835799), 212, 250, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 687.7798632, Double.NEGATIVE_INFINITY, (-1), fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1350L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1350L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1350L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1350L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1350L, fixedMillisecond0.getSerialIndex());
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(fixedMillisecond0);
      assertEquals(1350L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1350L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1350L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1350L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1), int0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XYDataset xYDataset0 = null;
      LinkedList<JDBCXYDataset> linkedList0 = new LinkedList<JDBCXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(356L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.xy.AbstractIntervalXYDataset", "org.jfree.data.xy.AbstractIntervalXYDataset", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(602.41113F);
      assertNotNull(float0);
      assertEquals(602.41113F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[602.41113]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(602.41113F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) float0;
      numberArray1[3] = (Number) float0;
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) float0;
      numberArray1[6] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(602.41113F);
      assertNotNull(float0);
      assertEquals(602.41113F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[602.41113]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) float0;
      numberArray1[3] = (Number) float0;
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) float0;
      numberArray1[6] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, (Comparable) minute0, (Comparable) minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      String string0 = "Null 'xRange' argument";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(356L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-175));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-175), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) (-175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1168.9256106814498, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (KeyToGroupMap) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      int int0 = categoryTableXYDataset1.getItemCount(2219);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset1));
      
      CategoryTableXYDataset categoryTableXYDataset2 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset2);
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset2);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset2));
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      
      boolean boolean1 = linkedList0.add((CategoryTableXYDataset) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(categoryTableXYDataset2));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) 0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.698F));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(581.698F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNull(range2);
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(stack0.contains(581.698F));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range3);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      System.setCurrentTimeMillis(2925L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      TimeSeries timeSeries0 = new TimeSeries("Rt9t)%E5", "Requires 'samples' > 1", "OXV");
      assertNotNull(timeSeries0);
      assertEquals("OXV", timeSeries0.getRangeDescription());
      assertEquals("Requires 'samples' > 1", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("OXV", timeSeries0.getRangeDescription());
      assertEquals("Requires 'samples' > 1", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(1073741824, 504, 1073741824, (-537), 517, (-537));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Tue Jul 14 18:36:19 GMT 92422631", mockDate0.toString());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
      assertNull(timeSeriesDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals("OXV", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Requires 'samples' > 1", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Tue Jul 14 18:36:19 GMT 92422631", mockDate0.toString());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2916698539008220232L), fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("OXV", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Requires 'samples' > 1", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals("OXV", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Requires 'samples' > 1", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.9166985390082202E18), range1.getCentralValue(), 0.01);
      assertEquals((-2.9166985390082202E18), range1.getUpperBound(), 0.01);
      assertEquals((-2.9166985390082202E18), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 96.0;
      doubleArray1[2] = (-993.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 96.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1350.69006977;
      doubleArray2[3] = 96.0;
      doubleArray2[4] = 96.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 96.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1350.69006977;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 96.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-33.0);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (-993.0);
      doubleArray4[4] = (-3089.23);
      doubleArray4[5] = 1350.69006977;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-993.0);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-33.0);
      doubleArray5[3] = (-993.0);
      doubleArray5[4] = (-33.0);
      doubleArray5[5] = (-993.0);
      doubleArray5[6] = (-3089.23);
      doubleArray5[7] = 1350.69006977;
      doubleArray5[8] = (-2392.867241);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-33.0);
      doubleArray6[1] = (-2392.867241);
      doubleArray6[2] = 1.0;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1350.69006977;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-1728.02954089431);
      doubleArray7[1] = (-244.9602161917652);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("cSlA", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(""));
      
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray0[2] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray0[3] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray0[4] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2901.0;
      doubleArray1[1] = 672.229852304;
      doubleArray1[2] = (-2077.01);
      doubleArray1[3] = 744.4013098473866;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2901.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 744.4013098473866;
      doubleArray3[1] = 672.229852304;
      doubleArray3[2] = 744.4013098473866;
      doubleArray3[3] = (-2077.01);
      doubleArray3[4] = (-2077.01);
      doubleArray3[5] = 2901.0;
      doubleArray3[6] = 744.4013098473866;
      doubleArray3[7] = 2116.25361413;
      doubleArray3[8] = (-2077.01);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2901.0;
      doubleArray4[1] = 452.616076168;
      doubleArray4[2] = 744.4013098473866;
      doubleArray4[3] = 672.229852304;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2077.01);
      doubleArray5[1] = 744.4013098473866;
      doubleArray5[2] = 452.616076168;
      doubleArray5[3] = 2116.25361413;
      doubleArray5[4] = 2901.0;
      doubleArray5[5] = 452.616076168;
      doubleArray5[6] = 672.229852304;
      doubleArray5[7] = 2116.25361413;
      doubleArray5[8] = 744.4013098473866;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 744.4013098473866;
      doubleArray6[1] = 2116.25361413;
      doubleArray6[2] = 1624.977;
      doubleArray6[3] = 452.616076168;
      doubleArray6[4] = 2855.36;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 2116.25361413;
      doubleArray7[1] = 2901.0;
      doubleArray7[2] = 452.616076168;
      doubleArray7[3] = 2855.36;
      doubleArray7[4] = (-2077.01);
      doubleArray7[5] = (-2077.01);
      doubleArray7[6] = 0.0;
      doubleArray7[7] = (-2077.01);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 2901.0;
      doubleArray8[1] = 452.616076168;
      doubleArray8[2] = 2901.0;
      doubleArray8[3] = (-986.1432);
      doubleArray8[4] = 452.616076168;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount(1423);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, int0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean1 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockDate mockDate0 = new MockDate(507, 507, (-1458), (-1458), 507);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 507;
      doubleArray1[1] = (double) (-1458);
      doubleArray1[2] = (double) 507;
      doubleArray1[3] = (double) (-1458);
      doubleArray1[4] = (double) 507;
      doubleArray1[5] = (double) 507;
      doubleArray1[6] = (double) (-1458);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1458);
      doubleArray2[1] = (double) 507;
      doubleArray2[2] = (double) 507;
      doubleArray2[3] = (double) 507;
      doubleArray2[4] = (double) 507;
      doubleArray2[5] = (double) (-1458);
      doubleArray2[6] = (double) (-1458);
      doubleArray2[7] = (double) (-1458);
      doubleArray2[8] = (double) (-1458);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 507;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.2", ";Kp&I2~dZ2$pvTW4&", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1458.0), (-1458.0), 0);
      assertNotNull(pieDataset1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 497);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(496, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(496, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, number0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("DomainOrder.DESCENDING", ".pec\"OeW", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(1L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      System.setCurrentTimeMillis(0L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList1, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'xRange' argument");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertNotNull(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.698]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.698F));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[581.698]", stack0.toString());
      assertTrue(stack0.contains(581.698F));
      
      System.setCurrentTimeMillis((-9223372036854775808L));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.validateObject();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Stream<DefaultMultiValueCategoryDataset> stream0 = vector0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-243.98369870962995), 544, 544, "java.lang.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(544.5, range0.getUpperBound(), 0.01);
      assertEquals((-244.48369870962995), range0.getLowerBound(), 0.01);
      assertEquals(150.00815064518503, range0.getCentralValue(), 0.01);
      assertEquals(788.98369870963, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertNull(range1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = defaultTableXYDataset0.getDomainUpperBound(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      assertNotNull(simpleHistogramBin0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue(Double.NaN, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "%>`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(3, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("%>`"));
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset1, (Comparable) "%>`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      assertNotNull(synthSpinnerUI0);
      
      boolean boolean0 = defaultMultiValueCategoryDataset0.hasListener(synthSpinnerUI0);
      assertFalse(boolean0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.5, 1179.910737);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      int int0 = 992;
      simpleHistogramBin0.setItemCount(992);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(992, simpleHistogramBin0.getItemCount());
      
      simpleHistogramBin0.setItemCount(992);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(992, simpleHistogramBin0.getItemCount());
      
      simpleHistogramBin0.setItemCount(992);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(992, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      assertNotNull(simpleHistogramBin1);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(992, simpleHistogramBin0.getItemCount());
      assertEquals(992, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0.5, simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(1179.910737, simpleHistogramBin1.getUpperBound(), 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertTrue(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      defaultMultiValueCategoryDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      int int1 = defaultMultiValueCategoryDataset0.getColumnIndex(simpleHistogramBin0);
      assertEquals(1179.910737, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.5, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(992, simpleHistogramBin0.getItemCount());
      assertEquals((-1), int1);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 856);
      assertNotNull(defaultPieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1.7976931348623157E308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate(2, 2, 2);
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Sun Mar 02 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(792, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      Day day0 = new Day(serialDate0);
      assertNotNull(day0);
      assertEquals("Sun Mar 02 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(792, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(day0);
      assertEquals("Sun Mar 02 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(3, serialDate0.getMonth());
      assertEquals(792, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals((-1), int0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.equals(defaultMultiValueCategoryDataset0);
      assertFalse(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      assertNotNull(pieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 9999;
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 7;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) 6;
      doubleArray6[1] = (double) 152;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 2;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = 573.65072280972;
      doubleArray8[1] = Double.NaN;
      doubleArray8[2] = (double) 4;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(defaultIntervalXYDataset0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultIntervalXYDataset0));
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xIntervalSeriesCollection0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, linkedList0, true);
      assertNull(range2);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      timeSeries0.setDomainDescription("d`aCp?b%|veB~>p`C");
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("d`aCp?b%|veB~>p`C", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("d`aCp?b%|veB~>p`C", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("d`aCp?b%|veB~>p`C", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 152);
      assertNotNull(pieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.hasListener(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = (-0.31665295795813936);
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y", "y", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(2695L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((double)double0, (double)number0, 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1950.230105518812), Double.NEGATIVE_INFINITY);
      assertNotNull(powerFunction2D0);
      assertEquals((-1950.230105518812), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.7976931348623157E308), 0.904350115835337, 29, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2369.552581588236, 2369.552581588236);
      assertNotNull(powerFunction2D0);
      assertEquals(2369.552581588236, powerFunction2D0.getB(), 0.01);
      assertEquals(2369.552581588236, powerFunction2D0.getA(), 0.01);
      
      int int0 = 828;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 2369.552581588236, (-1.7976931348623157E308), 828, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-243.98369870962995), (-1.0), 544, "Rt9t)%E5");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(242.98369870962995, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-243.98369870962995), range0.getLowerBound(), 0.01);
      assertEquals((-122.49184935481497), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, false);
      assertNull(range1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range2);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.removeChangeListener(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(float0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", (double) 0.0F, 535);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2384.1178922435975), 1838.2);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1838.2, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2384.1178922435975), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramBin simpleHistogramBin1 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      assertNotNull(simpleHistogramBin1);
      assertEquals(1838.2, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2384.1178922435975), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals((-2384.1178922435975), simpleHistogramBin1.getLowerBound(), 0.01);
      assertEquals(1838.2, simpleHistogramBin1.getUpperBound(), 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertTrue(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      SimpleHistogramBin simpleHistogramBin2 = (SimpleHistogramBin)simpleHistogramBin0.clone();
      assertNotNull(simpleHistogramBin2);
      assertEquals(1838.2, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2384.1178922435975), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2384.1178922435975), simpleHistogramBin2.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin2.isSelected());
      assertEquals(1838.2, simpleHistogramBin2.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin2.getItemCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin2);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin2, simpleHistogramBin0);
      assertNotSame(simpleHistogramBin2, simpleHistogramBin1);
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertTrue(simpleHistogramBin2.equals((Object)simpleHistogramBin0));
      assertTrue(simpleHistogramBin2.equals((Object)simpleHistogramBin1));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) simpleHistogramBin0);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1838.2, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2384.1178922435975), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin2);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin2));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1838.2, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2384.1178922435975), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin2);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertTrue(simpleHistogramBin0.equals((Object)simpleHistogramBin2));
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2384.1178922435975);
      doubleArray1[1] = 1838.2;
      doubleArray1[2] = (-2384.1178922435975);
      doubleArray1[3] = 1838.2;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2384.1178922435975);
      doubleArray1[6] = (-2384.1178922435975);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3589.031);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3589.031);
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double1);
      assertEquals((-9562.179892243597), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Object[][][] objectArray0 = new Object[5][4][2];
      Object[][] objectArray1 = new Object[9][5];
      objectArray1[0] = (Object[]) doubleArray0;
      objectArray1[1] = (Object[]) doubleArray0;
      Object[] objectArray2 = new Object[0];
      objectArray1[2] = objectArray2;
      objectArray1[3] = (Object[]) doubleArray0;
      objectArray1[4] = (Object[]) doubleArray0;
      objectArray1[5] = (Object[]) doubleArray0;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray1[7] = (Object[]) doubleArray0;
      objectArray1[8] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray3 = new Object[1][5];
      assertFalse(objectArray3.equals((Object)objectArray1));
      
      objectArray3[0] = (Object[]) doubleArray0;
      objectArray0[1] = objectArray3;
      Object[][] objectArray4 = new Object[2][7];
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray1));
      
      objectArray4[0] = (Object[]) doubleArray0;
      objectArray4[1] = objectArray2;
      objectArray0[2] = objectArray4;
      Object[][] objectArray5 = new Object[5][0];
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray1));
      assertFalse(objectArray5.equals((Object)objectArray4));
      
      objectArray5[0] = objectArray2;
      Object[] objectArray6 = new Object[5];
      assertFalse(objectArray6.equals((Object)objectArray2));
      
      objectArray6[0] = (Object) (-2384.1178922435975);
      objectArray6[1] = (Object) (-2384.1178922435975);
      objectArray6[2] = (Object) null;
      objectArray6[3] = (Object) list0;
      objectArray6[4] = (Object) connection0;
      objectArray5[1] = objectArray6;
      objectArray5[2] = (Object[]) doubleArray0;
      objectArray5[3] = objectArray2;
      objectArray5[4] = objectArray2;
      objectArray0[3] = objectArray5;
      Object[][] objectArray7 = new Object[8][3];
      assertFalse(objectArray7.equals((Object)objectArray5));
      assertFalse(objectArray7.equals((Object)objectArray1));
      assertFalse(objectArray7.equals((Object)objectArray3));
      assertFalse(objectArray7.equals((Object)objectArray4));
      
      objectArray7[0] = objectArray2;
      objectArray7[1] = objectArray6;
      objectArray7[2] = objectArray2;
      objectArray7[3] = objectArray2;
      objectArray7[4] = (Object[]) doubleArray0;
      objectArray7[5] = (Object[]) doubleArray0;
      objectArray7[6] = (Object[]) doubleArray0;
      objectArray7[7] = objectArray2;
      objectArray0[4] = objectArray7;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(list0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "Null 'xRange' argument";
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2178.0;
      doubleArray1[1] = (-175.1879671169216);
      doubleArray1[2] = 1423.0;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (-3491.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "%>`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-3491.7), range0.getLowerBound(), 0.01);
      assertEquals(2178.0, range0.getUpperBound(), 0.01);
      assertEquals((-656.8499999999999), range0.getCentralValue(), 0.01);
      assertEquals(5669.7, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      System.setCurrentTimeMillis(305L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals((-3491.7), (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-175));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-175), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 2178.0, 247.326931956937);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-900L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-900L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-900L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-900L), fixedMillisecond0.getSerialIndex());
      assertEquals((-900L), fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals((-900L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-900L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-900L), fixedMillisecond0.getSerialIndex());
      assertEquals((-900L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-899L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-899L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-899L), regularTimePeriod0.getSerialIndex());
      assertEquals((-899L), regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(regularTimePeriod0);
      assertEquals((-900L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-900L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-900L), fixedMillisecond0.getSerialIndex());
      assertEquals((-900L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-899L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-899L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-899L), regularTimePeriod0.getSerialIndex());
      assertEquals((-899L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      defaultMultiValueCategoryDataset0.add(linkedList0, regularTimePeriod0, regularTimePeriod0);
      assertEquals(0, linkedList0.size());
      assertEquals((-900L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-900L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-900L), fixedMillisecond0.getSerialIndex());
      assertEquals((-900L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-899L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-899L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-899L), regularTimePeriod0.getSerialIndex());
      assertEquals((-899L), regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((String) null, (String) null, "dtLK<2s", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2.147483648E9), 544, 544, "java.lang.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(544.5, range0.getUpperBound(), 0.01);
      assertEquals((-1.073741552E9), range0.getCentralValue(), 0.01);
      assertEquals(2.147484193E9, range0.getLength(), 0.01);
      assertEquals((-2.1474836485E9), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertNull(range1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range2);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "NOID", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = new MockDate(500, 500, 0, 0, 500);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-31);
      doubleArray0[2] = (double) (-1458);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sat Aug 31 08:20:00 GMT 2441", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(9, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-31.0), 0.0, (-1458.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, numberArray0.length);
      assertArrayEquals(new double[] {(-31.0), 0.0, (-1458.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-2385.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1172.8);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Comparable<TimeSeriesCollection> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = (-0.31665295795813936);
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y", "y", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(2684L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection1 = (YIntervalSeriesCollection)yIntervalSeriesCollection0.clone();
      assertNotNull(yIntervalSeriesCollection1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, yIntervalSeriesCollection1.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertNotSame(yIntervalSeriesCollection1, yIntervalSeriesCollection0);
      assertTrue(yIntervalSeriesCollection1.equals((Object)yIntervalSeriesCollection0));
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((double)double0, (double)number0, 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range2);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotSame(yIntervalSeriesCollection0, yIntervalSeriesCollection1);
      assertTrue(yIntervalSeriesCollection0.equals((Object)yIntervalSeriesCollection1));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      int int0 = categoryTableXYDataset0.getItemCount(1423);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, int0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean1 = linkedList0.add(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      Float float0 = new Float((float) 1423);
      assertNotNull(float0);
      assertEquals(1423.0F, (float)float0, 0.01F);
      
      ArrayList<Short> arrayList1 = new ArrayList<Short>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Short short0 = new Short((short)1630);
      assertNotNull(short0);
      assertEquals((short)1630, (short)short0);
      
      boolean boolean2 = arrayList1.add(short0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean2);
      assertTrue(arrayList1.contains(short0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList1, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(arrayList1.contains(short0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) (-1.0F));
      assertNull(range2);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      assertNotNull(pieDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-6903.587316563));
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-6903.587316563), range0.getCentralValue(), 0.01);
      assertEquals((-6903.587316563), range0.getUpperBound(), 0.01);
      assertEquals((-6903.587316563), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1, 520, 520, "java.lan-g.String");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-232.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = (-2292.233680922);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-2292.233680922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeries timeSeries1 = new TimeSeries("");
      assertNotNull(timeSeries1);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1955, 1955, 9, (-39), (-39), 1955);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1955,MONTH=1955,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=9,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-39,HOUR_OF_DAY=-39,MINUTE=-39,SECOND=1955,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      assertNotNull(fixedMillisecond0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1955,MONTH=1955,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=9,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-39,HOUR_OF_DAY=-39,MINUTE=-39,SECOND=1955,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219292800000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-12219292800000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-12219292800000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-12219292800000L), fixedMillisecond0.getMiddleMillisecond());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      assertNull(timeSeriesDataItem0);
      assertTrue(timeSeries0.getNotify());
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1955,MONTH=1955,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=9,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-39,HOUR_OF_DAY=-39,MINUTE=-39,SECOND=1955,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219292800000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-12219292800000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-12219292800000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-12219292800000L), fixedMillisecond0.getMiddleMillisecond());
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.22192928E13), range1.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range1.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range1.getCentralValue(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals((-30000.0), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-30000.0), timeSeries0.getMaxY(), 0.01);
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 152);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(152.0, range0.getLowerBound(), 0.01);
      assertEquals(152.0, range0.getCentralValue(), 0.01);
      assertEquals(152.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-2385.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "%>`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals((-1192.5), range0.getCentralValue(), 0.01);
      assertEquals(2385.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(2385.0, range1.getLength(), 0.01);
      assertEquals((-1192.5), range1.getCentralValue(), 0.01);
      assertEquals((-2385.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      assertNotNull(pieDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(152, 87);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(86, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(86, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(86, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1238.3;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "Missing Q.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Missing Q.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Missing Q.", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      boolean boolean0 = false;
      TimeZone timeZone0 = TimeZone.getTimeZone("Missing Q.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-22.51179070489858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-9999), (-9999));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-9999), slidingCategoryDataset0.getFirstCategoryIndex());
      
      MockDate mockDate0 = new MockDate((-9999), (-537), (-772), (-537), (-1662), (-2150));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Wed Jan 25 10:42:10 GMT 8147", mockDate0.toString());
      assertEquals((-319233446270000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "n9aUhG I\"Ln", "n9aUhG I\"Ln");
      assertNotNull(timeSeries0);
      assertEquals("Wed Jan 25 10:42:10 GMT 8147", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("n9aUhG I\"Ln", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("n9aUhG I\"Ln", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Long long0 = Long.getLong("n9aUhG I\"Ln");
      assertNull(long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertNull(timeSeriesDataItem0);
      assertEquals("Wed Jan 25 10:42:10 GMT 8147", mockDate0.toString());
      assertEquals((-319233446270000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-319233446270000L), fixedMillisecond0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("n9aUhG I\"Ln", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("n9aUhG I\"Ln", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<String> stack1 = new Stack<String>();
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      
      boolean boolean0 = stack1.add((String) null);
      assertFalse(stack1.isEmpty());
      assertEquals("[null]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(categoryTableXYDataset0));
      
      boolean boolean1 = vector0.add(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1);
      assertTrue(vector0.contains(categoryTableXYDataset0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Float float0 = new Float(570.19055F);
      assertNotNull(float0);
      assertEquals(570.19055F, (float)float0, 0.01F);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17, (-30));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(17, 2914);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2913, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(""));
      
      defaultStatisticalCategoryDataset0.add(1391.6619689618028, 1168.9256106814498, (Comparable) "", (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 3069.0505105);
      assertNotNull(range1);
      assertEquals(3069.0505105, range1.getLowerBound(), 0.01);
      assertEquals(3764.8814949809016, range1.getCentralValue(), 0.01);
      assertEquals(1391.6619689618028, range1.getLength(), 0.01);
      assertEquals(4460.712479461803, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range0, range0);
      assertNotNull(range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertEquals(1391.6619689618028, range2.getCentralValue(), 0.01);
      assertEquals(2337.8512213629, range2.getLength(), 0.01);
      assertEquals(222.736358280353, range2.getLowerBound(), 0.01);
      assertEquals(2560.587579643253, range2.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (-1.7976931348623157E308));
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertNull(range3);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2560.587579643253, range0.getUpperBound(), 0.01);
      assertEquals(1391.6619689618028, range0.getCentralValue(), 0.01);
      assertEquals(2337.8512213629, range0.getLength(), 0.01);
      assertEquals(222.736358280353, range0.getLowerBound(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.7976931348623157E308), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(arrayList0.contains(""));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[5] = 3833.2238557;
      doubleArray0[6] = 3833.2238557;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.7976931348623157E308), 0.0, 3833.2238557, 3833.2238557, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-243.98369870962995), (-1.0), 544, "Rt9t)%E5");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-244.98369870962995), range0.getUpperBound(), 0.01);
      assertEquals(242.98369870962995, range0.getLength(), 0.01);
      assertEquals((-487.9673974192599), range0.getLowerBound(), 0.01);
      assertEquals((-366.4755480644449), range0.getCentralValue(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-244.48369870962995), (double)double0, 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-244.98369870962995), range1.getUpperBound(), 0.01);
      assertEquals(242.98369870962995, range1.getLength(), 0.01);
      assertEquals((-366.4755480644449), range1.getCentralValue(), 0.01);
      assertEquals((-487.9673974192599), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(false);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableCellUpdated((-12), 708);
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month(9, 9);
      assertNotNull(month0);
      assertEquals(9, month0.getYearValue());
      assertEquals(117L, month0.getSerialIndex());
      assertEquals(9, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) float0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      taskSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 708);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = new Range((-2385.0), 1238.3);
      assertNotNull(range0);
      assertEquals(3623.3, range0.getLength(), 0.01);
      assertEquals((-573.35), range0.getCentralValue(), 0.01);
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals(1238.3, range0.getUpperBound(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
      
      Number[][] numberArray0 = new Number[8][2];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, linkedList0, false);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertNull(range2);
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertTrue(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-243.98369870962995), (-1.0), 544, "Rt9t)%E5");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = defaultTableXYDataset0.getDomainUpperBound(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NaN, (-4471.0), 544, "java.lang.String");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<JDBCXYDataset> arrayList1 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList1, range0, true);
      assertNull(range1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-9999), (-9999));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-9999), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      slidingCategoryDataset0.setGroup(datasetGroup0);
      assertEquals((-9999), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertNotNull(slidingCategoryDataset1);
      assertEquals((-9999), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-9999), slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals((-9999), slidingCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, (-1124), 517, 212, 533, 366);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection1);
      assertEquals(0, xIntervalSeriesCollection1.getSeriesCount());
      assertTrue(xIntervalSeriesCollection1.equals((Object)xIntervalSeriesCollection0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(2L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1238.3;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "Missing Q.");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Missing Q.", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Missing Q.", timeSeries0.getRangeDescription());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Missing Q.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2385.0);
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      int int0 = 517;
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("y:<T/");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertNotNull(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeries timeSeries0 = new TimeSeries("y:<T/");
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection2 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection2);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection2.getSeriesCount());
      assertFalse(timeSeriesCollection2.equals((Object)timeSeriesCollection1));
      assertFalse(timeSeriesCollection2.equals((Object)timeSeriesCollection0));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "y:<T/");
      assertNotNull(defaultPieDataset0);
      
      defaultKeyedValues2DDataset0.clear();
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(float0));
      assertTrue(stack1.equals((Object)stack0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack1, true);
      assertNull(range1);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(float0));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(double0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1238.3;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount(1423);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, int0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      LinkedList<CategoryTableXYDataset> linkedList1 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(categoryTableXYDataset0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean0 = linkedList1.add(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(categoryTableXYDataset0));
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      CategoryTableXYDataset categoryTableXYDataset1 = linkedList1.poll();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(0, linkedList1.size());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertFalse(linkedList1.contains(categoryTableXYDataset1));
      assertNotSame(linkedList1, linkedList0);
      assertSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean1 = linkedList1.add(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(categoryTableXYDataset1));
      assertSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList1.add(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean2);
      assertTrue(linkedList1.contains(categoryTableXYDataset1));
      assertSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(2L);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2385.0);
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add((Float) null);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertFalse(stack0.contains(float0));
      
      boolean boolean1 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset2);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertTrue(categoryDataset2.equals((Object)categoryDataset1));
      assertTrue(categoryDataset2.equals((Object)categoryDataset0));
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset2, false);
      assertNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertTrue(categoryDataset2.equals((Object)categoryDataset1));
      assertTrue(categoryDataset2.equals((Object)categoryDataset0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableCellUpdated(1, 708);
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) float0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      taskSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 708);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-243.98369870962995), 1);
      assertNotNull(lineFunction2D0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-243.98369870962995), (-1.0), 544, "Rt9t)%E5");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-244.98369870962995), range0.getUpperBound(), 0.01);
      assertEquals((-366.4755480644449), range0.getCentralValue(), 0.01);
      assertEquals((-487.9673974192599), range0.getLowerBound(), 0.01);
      assertEquals(242.98369870962995, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-244.48369870962995), (double)double0, 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals((-243.98369870962995), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-122.49184935481497), range1.getCentralValue(), 0.01);
      assertEquals(242.98369870962995, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-243.98369870962995), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertNull(range2);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range3);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset1 = (SlidingCategoryDataset)slidingCategoryDataset0.clone();
      assertNotNull(slidingCategoryDataset1);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset1.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset1.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertNotSame(slidingCategoryDataset1, slidingCategoryDataset0);
      assertTrue(slidingCategoryDataset1.equals((Object)slidingCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(slidingCategoryDataset0, slidingCategoryDataset1);
      assertTrue(slidingCategoryDataset0.equals((Object)slidingCategoryDataset1));
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 1);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Rt9t)%E5", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, (-1124), 517, 212, 533, 366);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("%>`", "Null 'dataset' argument.", "", "%>`");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-2385.0);
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2385.0, range0.getLength(), 0.01);
      assertEquals((-1192.5), range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals((-2385.0), number1);
      assertEquals(3, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[5] = 3833.2238557;
      doubleArray0[6] = 3833.2238557;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.7976931348623157E308), 0.0, 3833.2238557, 3833.2238557, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-244.9602161917652), 559, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(559, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.7976931348623157E308), 0.0, 3833.2238557, 3833.2238557, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(581.698F));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(581.698F));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNull(range2);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack0.contains(581.698F));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(boolean1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1238.3;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2385.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
      
      Number[][] numberArray0 = new Number[8][2];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1238.3;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) Double.POSITIVE_INFINITY;
      numberArray3[1] = (Number) 0.0;
      numberArray3[2] = (Number) 0.0;
      numberArray3[3] = (Number) 0.0;
      numberArray3[4] = (Number) Double.POSITIVE_INFINITY;
      numberArray3[5] = (Number) Double.POSITIVE_INFINITY;
      numberArray3[6] = (Number) (-2385.0);
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 1238.3;
      numberArray4[1] = (Number) 0.0;
      numberArray4[2] = number1;
      numberArray4[3] = (Number) 1238.3;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray4[4] = (Number) integer0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) Double.POSITIVE_INFINITY;
      numberArray5[1] = (Number) 0.0;
      numberArray5[2] = (Number) Double.POSITIVE_INFINITY;
      numberArray5[3] = (Number) 0.0;
      numberArray5[4] = (Number) 0.0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[5];
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      
      numberArray6[0] = (Number) 1238.3;
      numberArray6[1] = (Number) 1238.3;
      numberArray6[2] = (Number) 0.0;
      numberArray6[3] = (Number) 1238.3;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      numberArray6[4] = (Number) bigInteger0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[7];
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray3));
      
      numberArray7[0] = (Number) bigInteger0;
      numberArray7[1] = (Number) 0.0;
      numberArray7[2] = (Number) Double.POSITIVE_INFINITY;
      numberArray7[3] = (Number) integer0;
      numberArray7[4] = (Number) Double.POSITIVE_INFINITY;
      numberArray7[5] = (Number) 0.0;
      numberArray7[6] = (Number) Double.POSITIVE_INFINITY;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[3];
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray3));
      
      numberArray8[0] = number0;
      numberArray8[1] = (Number) 1238.3;
      numberArray8[2] = (Number) bigInteger0;
      numberArray0[7] = numberArray8;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(8, numberArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TimePeriodAnchor timePeriodAnchor0 = timePeriodValuesCollection0.getXPosition();
      assertNotNull(timePeriodAnchor0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("TimePeriodAnchor.MIDDLE", timePeriodAnchor0.toString());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(float0));
      
      System.setCurrentTimeMillis((-9223372036854775808L));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "%>`", (double) 581.698F);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 11);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((double) 1, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range2);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableCellUpdated(1, 708);
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeries timeSeries1 = new TimeSeries("");
      assertNotNull(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection1);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Float float0 = new Float((float) 9);
      assertNotNull(float0);
      assertEquals(9.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(float0));
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(float1));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) (-1.0F));
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1088.793836);
      doubleArray2[1] = 3232.0;
      doubleArray2[2] = (-993.0);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-3014.772008);
      doubleArray2[5] = 1976.06538934;
      doubleArray2[6] = (-91.296545901);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 4278.09832661;
      doubleArray4[1] = 3232.0;
      doubleArray4[2] = (-993.0);
      doubleArray4[3] = (-91.296545901);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-91.296545901);
      doubleArray5[1] = (-993.0);
      doubleArray5[2] = (-1088.793836);
      doubleArray5[3] = (-91.296545901);
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 4278.09832661;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-993.0);
      doubleArray6[1] = (-1088.793836);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1976.06538934;
      doubleArray7[1] = (-993.0);
      doubleArray7[2] = (-993.0);
      doubleArray7[3] = (-1088.793836);
      doubleArray7[4] = (-3014.772008);
      doubleArray7[5] = 3232.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (-534.3548617480388);
      doubleArray8[1] = (-4808.9870345);
      doubleArray8[2] = (-91.296545901);
      doubleArray8[3] = 1976.06538934;
      doubleArray8[4] = 1976.06538934;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("p", "p", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(9087.08536111, range0.getLength(), 0.01);
      assertEquals(4278.09832661, range0.getUpperBound(), 0.01);
      assertEquals((-265.4443539449999), range0.getCentralValue(), 0.01);
      assertEquals((-4808.9870345), range0.getLowerBound(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range3);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertNotNull(timeSeries0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.removeChangeListener(taskSeriesCollection0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection1);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) month0);
      assertNotNull(pieDataset0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection1, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 11);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 152);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(152, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(152, slidingCategoryDataset0.getMaximumCategoryCount());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 152;
      doubleArray2[2] = (double) 152;
      doubleArray2[3] = (double) 152;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 152;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultKeyedValues2DDataset0.addValue((-938.160026500649), (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(938.160026500649, range1.getLength(), 0.01);
      assertEquals((-469.0800132503245), range1.getCentralValue(), 0.01);
      assertEquals((-938.160026500649), range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range2);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(938.160026500649, range2.getLength(), 0.01);
      assertEquals((-469.0800132503245), range2.getCentralValue(), 0.01);
      assertEquals((-938.160026500649), range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2385.0);
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, 517, (-537), 517, (-537), 3232);
      assertNotNull(mockDate0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, 2448.0279156397633);
      assertNotNull(range1);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Vector<TimePeriodValuesCollection> vector0 = new Vector<TimePeriodValuesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = timeSeries0.isEmpty();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range1, true);
      assertNull(range2);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "[mean=", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.removeAllSeries();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range2);
      
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      numberArray1[1] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = number0;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = number0;
      numberArray3[3] = number0;
      numberArray3[4] = null;
      numberArray3[5] = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals((short) (-26815), bigInteger0.shortValue());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte) (-105), (byte)65}, byteArray0);
      
      numberArray3[6] = (Number) bigInteger0;
      numberArray3[7] = number0;
      numberArray3[8] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) (byte)65;
      numberArray5[1] = (Number) (byte) (-105);
      numberArray5[2] = null;
      numberArray5[3] = number0;
      numberArray5[4] = (Number) (byte)0;
      numberArray5[5] = number0;
      numberArray5[6] = (Number) bigInteger0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[3];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      
      numberArray6[0] = number0;
      numberArray6[1] = (Number) (byte)65;
      numberArray6[2] = (Number) bigInteger0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      
      numberArray7[0] = (Number) bigInteger0;
      numberArray7[1] = (Number) bigInteger0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[6];
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray2));
      
      numberArray8[0] = (Number) (byte)0;
      numberArray8[1] = (Number) (byte)65;
      numberArray8[2] = (Number) bigInteger0;
      numberArray8[3] = (Number) bigInteger0;
      numberArray8[4] = (Number) bigInteger0;
      numberArray8[5] = (Number) (byte) (-105);
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((byte) (-105));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertNull(range2);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNull(range4);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.removeAllSeries();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MockDate mockDate0 = new MockDate(572, 530, 559, 530, 536, 334);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Sat Oct 02 11:01:34 GMT 2517", mockDate0.toString());
      assertEquals(17285396494000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals("Sat Oct 02 11:01:34 GMT 2517", mockDate0.toString());
      assertEquals(17285396494000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getSerialIndex());
      assertEquals(17285396494001L, regularTimePeriod0.getSerialIndex());
      assertEquals(17285396494001L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(17285396494001L, regularTimePeriod0.getLastMillisecond());
      assertEquals(17285396494001L, regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-993), 492.0);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals((-993.0), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(492.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-993), 572, 536, fixedMillisecond0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Sat Oct 02 11:01:34 GMT 2517", mockDate0.toString());
      assertEquals(17285396494000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(17285396494000L, fixedMillisecond0.getSerialIndex());
      assertEquals((-993.0), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(492.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2385.0);
      double[][] doubleArray1 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries("%>`", "%>`", "%>`");
      assertNotNull(timeSeries0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(517, (-1124), 517, 212, 533, 366);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Tue Oct 07 04:59:06 GMT 2324", mockDate0.toString());
      assertEquals(11195297946000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11195297946000L, fixedMillisecond0.getSerialIndex());
      assertEquals(11195297946000L, fixedMillisecond0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("%>`", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("%>`", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[4] = (-2385.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-2385.0);
      doubleArray2[2] = (-2385.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 3520.0;
      doubleArray1[4] = (-991.25);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-991.25);
      doubleArray2[1] = 3520.0;
      doubleArray2[2] = (-991.25);
      doubleArray2[3] = (-1075.0);
      doubleArray2[4] = 3520.0;
      doubleArray2[5] = 3520.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      LinkedList<TimeSeriesTableModel> linkedList0 = new LinkedList<TimeSeriesTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-1075.0), range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, number0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      assertNull(range3);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range4);
      assertEquals(Double.POSITIVE_INFINITY, range4.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range4.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range4.getUpperBound(), 0.01);
      assertEquals((-1075.0), range4.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range4, range1);
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNull(range5);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range6 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range6);
      assertEquals(Double.POSITIVE_INFINITY, range6.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range6.getUpperBound(), 0.01);
      assertEquals((-1075.0), range6.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range6.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range6, range4);
      assertNotSame(range6, range1);
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      timeSeriesCollection0.removeChangeListener(xYTaskDataset0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = new TimeSeries(month0);
      assertNotNull(timeSeries1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.removeChangeListener(taskSeriesCollection1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries1);
      assertNotNull(timeSeriesCollection1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) month0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1);
      assertNull(range1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = defaultTableXYDataset0.getDomainUpperBound(true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number0);
      assertTrue(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = timeSeriesCollection0.equals("");
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=9,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeries timeSeries1 = new TimeSeries("");
      assertNotNull(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("r^#IAW'Q]V-g", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Float float0 = new Float((float) 9);
      assertNotNull(float0);
      assertEquals(9.0F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(float0));
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float1);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1);
      assertTrue(stack0.contains((-1.0F)));
      assertFalse(stack0.contains(float0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, true);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      Vector<JDBCXYDataset> vector0 = new Vector<JDBCXYDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(double0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "nwdv+@", "(o");
      assertNotNull(timeSeries0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals("nwdv+@", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(o", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(525, "(o");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(525, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(o,offset=525,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(o", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals("nwdv+@", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(o", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(525, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(o,offset=525,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(o", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals("nwdv+@", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("(o", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(525, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=(o,offset=525,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("(o", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      double double0 = timeSeriesCollection0.getDomainUpperBound(true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TimeSeries timeSeries0 = new TimeSeries(month0);
      assertNotNull(timeSeries0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.removeChangeListener(taskSeriesCollection0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) month0);
      assertNotNull(defaultPieDataset0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      defaultPieDataset0.setValue((Comparable) month0, (Number) null);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1);
      assertNull(range1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1, false);
      assertNull(range2);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = (TimeSeriesCollection)timeSeriesCollection0.clone();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[581.698]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[581.698]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 5);
      MockDate mockDate0 = new MockDate(54, 63, 54, 2445, 3, 63);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(54, "%>`");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(54, simpleTimeZone0.getRawOffset());
      assertEquals("%>`", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%>`,offset=54,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Hour hour0 = new Hour(mockDate0, simpleTimeZone0);
      assertNotNull(hour0);
      assertEquals("Wed Sep 02 21:04:03 GMT 1959", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(54, simpleTimeZone0.getRawOffset());
      assertEquals("%>`", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%>`,offset=54,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(21, hour0.getHour());
      assertEquals((-325997757000L), hour0.getLastMillisecond());
      assertEquals((-325997757000L), hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.previous();
      assertNotNull(hour1);
      assertEquals("Wed Sep 02 21:04:03 GMT 1959", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(54, simpleTimeZone0.getRawOffset());
      assertEquals("%>`", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%>`,offset=54,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(21, hour0.getHour());
      assertEquals((-325997757000L), hour0.getLastMillisecond());
      assertEquals((-325997757000L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(20, hour1.getHour());
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) hour1;
      Minute minute0 = Minute.parseMinute("xcch:7R]_z");
      assertNull(minute0);
      
      comparableArray0[1] = (Comparable<DefaultOHLCDataset>) null;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      comparableArray0[2] = (Comparable<DefaultOHLCDataset>) fixedMillisecond0;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(63);
      assertNotNull(spreadsheetDate0);
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(63, spreadsheetDate0.toSerial());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      
      comparableArray0[3] = (Comparable<DefaultOHLCDataset>) spreadsheetDate0;
      TimeSeries timeSeries0 = new TimeSeries(hour1);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Wed Sep 02 21:04:03 GMT 1959", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(54, simpleTimeZone0.getRawOffset());
      assertEquals("%>`", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%>`,offset=54,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(21, hour0.getHour());
      assertEquals((-325997757000L), hour0.getLastMillisecond());
      assertEquals((-325997757000L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(20, hour1.getHour());
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour1, (Number) null);
      assertNull(timeSeriesDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Wed Sep 02 21:04:03 GMT 1959", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(54, simpleTimeZone0.getRawOffset());
      assertEquals("%>`", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=%>`,offset=54,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(21, hour0.getHour());
      assertEquals((-325997757000L), hour0.getLastMillisecond());
      assertEquals((-325997757000L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(20, hour1.getHour());
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      comparableArray0[4] = (Comparable<DefaultOHLCDataset>) null;
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 54;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 9999;
      doubleArray1[4] = (double) 23;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (double) 2958465;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 581.698F;
      doubleArray2[6] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      assertNull(number1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      MockDate mockDate0 = new MockDate(1, 530, 536, 334, 2121, (-993));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Mon Sep 02 09:04:27 GMT 1946", mockDate0.toString());
      assertEquals((-736268133000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getSerialIndex());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals("Mon Sep 02 09:04:27 GMT 1946", mockDate0.toString());
      assertEquals((-736268133000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-736268133000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-736268132999L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-736268132999L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-736268132999L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-736268132999L), regularTimePeriod0.getSerialIndex());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 334);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(334.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1.0, 1.0, 334, "Rt9t)%E5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = (-2385.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-2385.0);
      doubleArray2[2] = (-2385.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 198.0249335;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "%>`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2385.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals((-2385.0), number1);
      assertEquals(3, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-2385.0), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      stack0.ensureCapacity((-36));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(581.698F);
      assertNotNull(float0);
      assertEquals(581.698F, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[581.698]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1);
      assertTrue(stack0.contains(float0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[15][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "PieDatasetChangeType.ADD_AND_REMOVE", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 526, 526);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(526, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(526, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1340);
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = (double) 526;
      doubleArray0[3] = (double) (-1340);
      doubleArray0[4] = (double) (-1340);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 526;
      doubleArray1[1] = (double) 526;
      doubleArray1[2] = (double) 526;
      doubleArray1[3] = (double) 526;
      doubleArray1[4] = (double) 526;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("PieDatasetChangeType.ADD_AND_REMOVE", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 526.0, 526.0, (-1340.0), (-1340.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0, 526.0}, doubleArray1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 526.0, 526.0, (-1340.0), (-1340.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0, 526.0}, doubleArray1, 0.01);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 526.0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNull(number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1340.0), 526.0, 526.0, (-1340.0), (-1340.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {526.0, 526.0, 526.0, 526.0, 526.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getDomainOrder();
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      Locale locale0 = new Locale("", "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeZone timeZone0 = TimeZone.getDefault();
      Year year0 = new Year(date0, timeZone0);
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) year0;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(9999, 516, 553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockDate mockDate0 = new MockDate((-3333), (-3333), (-3333), (-3333), (-3333), (-3333));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = true;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      MockDate mockDate0 = new MockDate(534, 534, 534, 3253, 702, 3253);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      fixedMillisecond0.next();
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.next();
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "r^#IAW'Q]V-g";
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      boolean boolean0 = true;
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeSeries timeSeries1 = new TimeSeries("");
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      String string1 = "Requires 'xSamples' > 0";
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getEndValue((Comparable) fixedMillisecond0, (Comparable) "r^#IAW'Q]V-g");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(529, 0, 529);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clone();
      defaultBoxAndWhiskerXYDataset0.setSelectionState(timeSeriesCollection0);
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(581.698F);
      stack0.add(float0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-10), (-10));
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-10), Double.POSITIVE_INFINITY);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 152, 630);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 152);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MockDate mockDate0 = new MockDate(534, 534, 2, 537, 537, (-2595));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.resources.DataPackageResources", "E8D|Q)B[6,[WB?7[_");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (-2595));
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) arrayList0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      linkedList0.add(categoryTableXYDataset0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.resources.DataPackageResources", (KeyedValues) defaultPieDataset0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList1, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      DatasetUtilities.findRangeBounds(categoryDataset1, (List) linkedList0, true);
      MockDate mockDate0 = new MockDate(0, 1, 0, 6, 6, 6);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 152);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, linkedList0, true);
      Vector<JDBCXYDataset> vector0 = new Vector<JDBCXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      int int0 = 250;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockDate mockDate0 = new MockDate((-3333), (-3333), (-3333), (-3333), (-3333), (-3333));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      fixedMillisecond0.next();
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      MockDate mockDate0 = new MockDate(526, 526, 526, 1002, 974);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      MockDate mockDate1 = new MockDate(3253, 526, 526, 526, 526, 526);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1002);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("qjbOaZ", "rBXYLge.*< +{SFNJJ", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.removeAllSeries();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, false);
      Vector<JDBCXYDataset> vector0 = new Vector<JDBCXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) month0);
      DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1509.2469;
      doubleArray0[1] = (-91.296545901);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 1976.06538934;
      doubleArray0[5] = 3833.2238557;
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1976.06538934;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-91.296545901);
      doubleArray2[3] = 3833.2238557;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 3833.2238557;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities", doubleArray1);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(false);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      MockDate mockDate0 = new MockDate((-537), 1556, (-537), 3253, (-69), 517);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockDate mockDate0 = new MockDate((-3333), (-3333), (-3333), (-3333), (-3333), (-3333));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), (-1.0), (-3333), regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, (-2226));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-475), (-1), 1685, 0, 0);
      month0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) month0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.removeAllSeries();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      Range.combine((Range) null, (Range) null);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      Range.combine((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 6);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      try { 
        mockSimpleDateFormat0.parse("RF-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"RF-\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Function2D function2D0 = null;
      double double0 = 3482.4625107657;
      double double1 = 1.0;
      int int0 = 250;
      MockDate mockDate0 = new MockDate(250, 250, 181, 969, 974);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(250, "", 1007, (-552), 250, 969, (-1), (-1), (-1324), (-1324), 0, (-2912), 181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1007
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      jDBCCategoryDataset0.equals(defaultIntervalCategoryDataset0);
      Second second0 = new Second();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) second0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getItemCount(1423);
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      linkedList0.add(categoryTableXYDataset0);
      linkedList0.add(categoryTableXYDataset0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("", "", "r^#IAW'Q]V-g");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      timeSeriesCollection0.equals("");
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      xYDatasetTableModel0.fireTableCellUpdated(1, 708);
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TimeSeries timeSeries1 = new TimeSeries("");
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "");
      Float float0 = new Float((float) 9);
      Stack<Float> stack0 = new Stack<Float>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      XYDataset xYDataset0 = null;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      DatasetUtilities.findRangeBounds(categoryDataset1, (List) linkedList0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1238.3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2385.0);
      doubleArray0[3] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0, "", "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      MockDate mockDate0 = new MockDate(517, 517, (-537), 2, (-1233), 3253);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) (-2385.0));
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1509.2469;
      doubleArray0[1] = (-91.296545901);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 1976.06538934;
      doubleArray0[5] = 3833.2238557;
      doubleArray0[6] = 316.247;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-244.9602161917652), 559, Double.NEGATIVE_INFINITY);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(559, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 807.96;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, (-1.0), (-3338), 807.96);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, "Rt9t)%E5", "java.lang.String");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3500.366;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3639.26595934832, 0.0, 0, 3500.366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-552.825525218);
      doubleArray0[1] = (-2786.85774344137);
      doubleArray0[2] = 2890.330843445072;
      doubleArray0[3] = (-482.3787139907586);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.5;
      doubleArray0[7] = (-828.91703);
      doubleArray0[8] = (-2318.8780623223);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 0.5, 1304, (-828.91703));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.removeAllSeries();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Collection<DefaultIntervalXYDataset> collection0 = null;
      int int0 = (-1829);
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getYValue((-1829), (-1829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = (-1778);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-1778));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      List<TimeSeriesCollection> list0 = null;
      double double0 = 690.784844749;
      Range range0 = new Range(690.784844749, 690.784844749);
      Range.expand(range0, 690.784844749, 690.784844749);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 1900;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%>`", "%>`", doubleArray0);
      int int0 = (-799);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-799), (-799));
      slidingCategoryDataset0.getColumnKeys();
      boolean boolean0 = true;
      DatasetUtilities.iterateCategoryRangeBounds(slidingCategoryDataset0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("%>`");
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXValue((-799), 2795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2795, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 888.13115119892;
      doubleArray1[1] = (double) 152;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aPM,_oK", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 152);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 152, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, Double.POSITIVE_INFINITY);
      String string0 = "Rt9t)%E5";
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Rt9t)%E5", "java.lang.String", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String string1 = "gd'6[0Yg)L";
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset("s}Pzxm{Y_SO", "gd'6[0Yg)L", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset2, (Comparable) simpleHistogramBin0);
      CategoryDataset categoryDataset3 = DatasetUtilities.createCategoryDataset((Comparable) simpleHistogramBin0, (KeyedValues) pieDataset0);
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries("gd'6[0Yg)L", false);
      xYSeries0.addOrUpdate((double) 1, (double) 334);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset3, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1.0);
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1.0);
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = (-1.0);
      doubleArray0[6] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = (-1.0);
      doubleArray0[7] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray0[8] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 37);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainUpperBound(true);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      timeSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Month month0 = new Month();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, (-2226));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-475), (-1), 1685, 0, 0);
      month0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) month0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0);
      Function2D function2D0 = null;
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = 305;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(305, "", 0, 305, 305, 0, 0, 305, (-685), 305, (-685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 305
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      jDBCCategoryDataset0.equals(defaultIntervalCategoryDataset0);
      Second second0 = new Second();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) second0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, (-136), 0);
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      VectorSeries vectorSeries0 = new VectorSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        vectorSeries0.remove(4538);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4538, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 0.0;
      doubleArray9[5] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }
}
