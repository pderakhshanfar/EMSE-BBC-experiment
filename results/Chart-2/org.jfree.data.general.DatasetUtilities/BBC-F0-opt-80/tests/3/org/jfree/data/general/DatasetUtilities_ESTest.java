/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 14:40:56 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.stream.Stream;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import javax.swing.plaf.synth.SynthButtonUI;
import javax.swing.plaf.synth.SynthTableHeaderUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null >datased' Argu7wnt", "Null >datased' Argu7wnt", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(8, doubleArray0.length);
      
      defaultCategoryDataset0.addValue(6.283185307179586, (Comparable) "Null >datased' Argu7wnt", (Comparable) "Null >datased' Argu7wnt");
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getLength(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-404));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-404), categoryToPieDataset0.getExtractIndex());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Null >datased' Argu7wnt", (double) (-404), (-3789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3484.8917), 0.0, 0.0, (-3484.8917), (-3484.8917));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3362.6652838, (-1776.0614977384), (-3484.8917), Double.NaN, 0.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1776.0614977384), 0.0, Double.NaN, (-1776.0614977384), 0.0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, Double.NaN, (-3484.8917), 3362.6652838, Double.POSITIVE_INFINITY, 0.0);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3484.8917, range0.getLength(), 0.01);
      assertEquals((-3484.8917), range0.getLowerBound(), 0.01);
      assertEquals((-1742.44585), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(29);
      assertNotNull(long0);
      assertEquals(29L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long1 = new Long(29);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(29L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NaN, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN, 29);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3362.6652838;
      doubleArray1[1] = 3371.3919072375;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3362.6652838;
      doubleArray3[1] = 3371.3919072375;
      doubleArray3[2] = 3371.3919072375;
      doubleArray3[3] = 3371.3919072375;
      doubleArray3[4] = 3371.3919072375;
      doubleArray3[5] = 468.428;
      doubleArray3[6] = 3371.3919072375;
      doubleArray3[7] = 3371.3919072375;
      doubleArray3[8] = 3371.3919072375;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 3362.6652838;
      doubleArray4[1] = 3362.6652838;
      doubleArray4[2] = 468.428;
      doubleArray4[3] = 3362.6652838;
      doubleArray4[4] = 3362.6652838;
      doubleArray4[5] = 468.428;
      doubleArray4[6] = 468.428;
      doubleArray4[7] = 3362.6652838;
      doubleArray4[8] = 3371.3919072375;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Null >datased' Argu7wnt");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Null >datased' Argu7wnt";
      stringArray0[1] = "M?5rW";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, stringArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 589);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(589, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Null >datased' Argu7wnt", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate1 = new MockDate((-350), (-350), 6, (-350), 6);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 6, (-350), (-3766.0), Double.POSITIVE_INFINITY, (-1755.1197014));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Oct 22 10:06:00 GMT 1520", mockDate1.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1755.1197014), (-350), Double.NEGATIVE_INFINITY, 43.908460130540476, Double.NEGATIVE_INFINITY);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultOHLCDataset0.validateObject();
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(0L));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = defaultOHLCDataset0.indexOf(long0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertEquals((-1), int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertTrue(arrayList0.contains(0L));
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1.417431564E13), range0.getLowerBound(), 0.01);
      assertEquals(1.556672492132E13, range0.getLength(), 0.01);
      assertEquals((-6.39095317934E12), range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<Minute> arrayList0 = new ArrayList<Minute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("AT`&5320N5u^", 92, 92);
      assertNotNull(matrixSeries0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(92, matrixSeries0.getRowCount());
      assertEquals(92, matrixSeries0.getColumnsCount());
      assertEquals(8464, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(91.0, range1.getUpperBound(), 0.01);
      assertEquals(45.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(91.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3175.05542112372), Double.NaN, (-3175.05542112372), 593.6945121578937, (-3175.05542112372));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-3175.05542112372) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null >datased' Argu7wnt", "Null >datased' Argu7wnt", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(8, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 530);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(530, categoryToPieDataset0.getExtractIndex());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 530, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 0, minute0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      boolean boolean0 = true;
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2782.0212553), 593.6945121578937, (-2260.045404348909), Double.NaN, (-223.3381777));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.xy.DefaultHigLowaaset", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(oHLCDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>(44, 131);
      assertNotNull(vector0);
      assertEquals(44, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(44, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[13][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2460.0), (-53.353912176), (-1772.8), 0, 0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      MockDate mockDate1 = (MockDate)defaultOHLCDataset0.getXDate(0, 0);
      assertNotNull(mockDate1);
      assertSame(mockDate0, mockDate1);
      assertSame(mockDate1, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = mockDate1.before(mockDate0);
      assertSame(mockDate0, mockDate1);
      assertSame(mockDate1, mockDate0);
      assertFalse(boolean0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean1 = mockDate0.after(mockDate1);
      assertTrue(boolean1 == boolean0);
      assertSame(mockDate0, mockDate1);
      assertSame(mockDate1, mockDate0);
      assertFalse(boolean1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(0L, day0.getLastMillisecond());
      
      defaultPieDataset0.insertValue(0, (Comparable) day0, (double) 0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertSame(mockDate0, mockDate1);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(0L, day0.getLastMillisecond());
      assertEquals(13, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) oHLCDataItem0, (-478.870138));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(67);
      assertNotNull(long0);
      assertEquals(67L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, long0, long0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(67.0, range0.getUpperBound(), 0.01);
      assertEquals(67.0, range0.getLowerBound(), 0.01);
      assertEquals(67.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(67.0, range1.getCentralValue(), 0.01);
      assertEquals(67.0, range1.getLowerBound(), 0.01);
      assertEquals(67.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3172.127247448909), Double.NaN, (-3172.127247448909), 593.6945121578937, (-3172.127247448909));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(784L);
      assertNotNull(long0);
      assertEquals(784L, (long)long0);
      
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(long0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.add(long0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.contains(long0));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2308000.0), (-5296.713392122657), Double.NaN, (-159.743296), (-5296.713392122657));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      assertNotNull(spreadsheetDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(12, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(12, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1), 3, 2, 3126.5332205, 784L);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(12, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(6, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList2 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList2);
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLength(), 0.01);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Stack<SimpleTimePeriod> stack0 = new Stack<SimpleTimePeriod>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLength(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.8);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[13][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-1L)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains((-1L)));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3172.127247448909), Double.NaN, (-3172.127247448909), 593.6945121578937, (-3172.127247448909));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNull(number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3172.127247448909), Double.NaN, (-3172.127247448909), 593.6945121578937, (-3172.127247448909));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-3172.127247448909) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-1L)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains((-1L)));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3172.127247448909), Double.NaN, (-3172.127247448909), 593.6945121578937, (-3172.127247448909));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains((-1L)));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(593.6945121578937, range1.getUpperBound(), 0.01);
      assertEquals(593.6945121578937, range1.getLowerBound(), 0.01);
      assertEquals(593.6945121578937, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-3172.127247448909) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2.147483648247092E9), (-2.147483648247092E9), "E:I+j");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals((-2.147483648247092E9), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2.147483648247092E9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 5, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      assertTrue(matrixSeriesCollection1.equals((Object)matrixSeriesCollection0));
      assertNotNull(matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(matrixSeriesCollection1, matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, matrixSeriesCollection1.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotNull(range0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(range1, range0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertNotNull(double0);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeriesCollection0.equals((Object)matrixSeriesCollection1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(matrixSeriesCollection0, matrixSeriesCollection1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(295, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(58.0, range2.getUpperBound(), 0.01);
      assertEquals(29.0, range2.getCentralValue(), 0.01);
      
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) double1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double1;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double1;
      numberArray2[4] = (Number) double1;
      numberArray2[5] = (Number) double1;
      numberArray2[6] = (Number) double1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) double0;
      numberArray3[3] = (Number) double1;
      numberArray3[4] = (Number) double0;
      numberArray3[5] = (Number) double1;
      numberArray3[6] = (Number) double0;
      numberArray3[7] = (Number) double1;
      numberArray3[8] = (Number) double1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) double0;
      numberArray4[1] = (Number) double0;
      numberArray4[2] = (Number) double1;
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries("Null 'visibleSeriesKeys' argument.", false, false);
      assertNotNull(xIntervalSeries0);
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertNull(xIntervalSeries0.getDescription());
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xIntervalSeries0.getNotify());
      assertFalse(xIntervalSeries0.getAutoSort());
      assertEquals(0, xIntervalSeries0.getItemCount());
      
      // Undeclared exception!
      try { 
        xIntervalSeries0.getX(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[13][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2460.0), (-53.353912176), (-1772.8), 0, 0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      MockDate mockDate1 = (MockDate)defaultOHLCDataset0.getXDate(0, 0);
      assertNotNull(mockDate1);
      assertSame(mockDate0, mockDate1);
      assertSame(mockDate1, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = mockDate0.after(mockDate1);
      assertSame(mockDate0, mockDate1);
      assertSame(mockDate1, mockDate0);
      assertFalse(boolean0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(0L, day0.getLastMillisecond());
      
      defaultPieDataset0.insertValue(0, (Comparable) day0, (double) 0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertSame(mockDate0, mockDate1);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(0L, day0.getLastMillisecond());
      assertEquals(13, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("org.jfree.data.xy.DefaultHigLowaaset");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.xy.DefaultHigLowaaset", 182, 35);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(35, matrixSeries0.getColumnsCount());
      assertEquals(182, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6370, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(35, matrixSeries0.getColumnsCount());
      assertEquals(182, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6370, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(35, matrixSeries0.getColumnsCount());
      assertEquals(182, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(6370, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 1768.6;
      doubleArray1[2] = (-1716.89489);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1716.89489);
      doubleArray2[1] = (-1716.89489);
      doubleArray2[2] = 1768.6;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = (-265.98888);
      doubleArray2[7] = 1768.6;
      doubleArray2[8] = 3316.730736929;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 1768.6;
      doubleArray3[3] = (-1594.68982352384);
      doubleArray3[4] = (-1716.89489);
      doubleArray3[5] = 3316.730736929;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-390.444);
      doubleArray1[1] = (-401.6337838);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2453.225449885452;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2453.225449885452;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.5;
      doubleArray5[1] = 2453.225449885452;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.5;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-390.444);
      doubleArray7[3] = (-390.444);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = 2453.225449885452;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int0 = categoryTableXYDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-6788.456213022), (-6788.456213022), "-");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      categoryTableXYDataset0.add(1418.725103697465, 1418.725103697465, "org.jfree.data.gantt.lidingGanttCategoyDataset");
      assertEquals(8207.181316719465, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-6788.456213022), double0, 0.01);
      assertEquals(8207.181316719465, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 5419);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(5419, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(5419, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X;Drf+a['C";
      stringArray0[1] = "S7W$sr&9XG]V]L";
      stringArray0[2] = "";
      stringArray0[3] = "ftu2";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "org.jfree.data.xy.DefaultHigLowaaset";
      double[][] doubleArray0 = new double[8][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultHigLowaaset", "org.jfree.data.xy.DefaultHigLowaaset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(8, doubleArray0.length);
      
      LinkedList<MockDate> linkedList0 = new LinkedList<MockDate>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
      assertNotNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1746.35174998), Double.POSITIVE_INFINITY, "!'y");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-2.147483648E9), (-2.147483648E9), "Default Group");
      assertEquals(2.14748190164825E9, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2.147483648E9));
      assertNotNull(range0);
      assertEquals(2.14748190164825E9, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-4.294967296E9), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(2.14748190164825E9, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 4329.61413141364, Double.POSITIVE_INFINITY, (-1), (-2.147483648E9), (-1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 522.5734269, Double.POSITIVE_INFINITY, (-1), 4329.61413141364, Double.POSITIVE_INFINITY);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      oHLCDataItemArray0[4] = oHLCDataItem2;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(arrayList0.contains(xYDatasetTableModel0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long((-23L));
      assertNotNull(long0);
      assertEquals((-23L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((double) (-23L), (Comparable) long0, (Comparable) long0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((-23L)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-23.0), range0.getCentralValue(), 0.01);
      assertEquals((-23.0), range0.getLowerBound(), 0.01);
      assertEquals((-23.0), range0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals((-23.0), range1.getCentralValue(), 0.01);
      assertEquals((-23.0), range1.getUpperBound(), 0.01);
      assertEquals((-23.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(long1));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(34, 2, 524);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1304.06955802), 2, (-1L), (-1304.06955802), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Aug 06 00:00:00 GMT 1935", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2546.61209, 1059.282, (-1304.06955802), 9.0, 2);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Aug 06 00:00:00 GMT 1935", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long1, oHLCDataItemArray0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.validateObject();
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertTrue(long1.equals((Object)long0));
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals((-1085788800000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1085788800000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals("Tue Aug 06 00:00:00 GMT 1935", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-646), 1299);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals((-646), seriesChangeInfo0.getIndex1());
      assertEquals(1299, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(minute0, seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals((-1085788800000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1085788800000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals((-646), seriesChangeInfo0.getIndex1());
      assertEquals(1299, seriesChangeInfo0.getIndex2());
      assertEquals("Tue Aug 06 00:00:00 GMT 1935", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      
      defaultOHLCDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals((-1085788800000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1085788800000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals("SeriesChangeType.ADD", seriesChangeType0.toString());
      assertEquals((-646), seriesChangeInfo0.getIndex1());
      assertEquals(1299, seriesChangeInfo0.getIndex2());
      assertEquals("Tue Aug 06 00:00:00 GMT 1935", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(range0);
      assertEquals((-1.0857888E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.0857888E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0857888E12), range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertTrue(long1.equals((Object)long0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1.0857888E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.0857888E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0857888E12), range0.getLowerBound(), 0.01);
      assertEquals((-1304.06955802), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1304.06955802), range1.getUpperBound(), 0.01);
      assertEquals((-1304.06955802), range1.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(long1));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(34, 40, 524);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1304.06955802), 40, (-1L), (-1304.06955802), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Oct 06 00:00:00 GMT 1938", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2546.61209, 1059.282, (-1304.06955802), 9.0, 40);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Oct 06 00:00:00 GMT 1938", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long1, oHLCDataItemArray0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertTrue(long1.equals((Object)long0));
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9.85824E11), range0.getUpperBound(), 0.01);
      assertEquals((-9.85824E11), range0.getCentralValue(), 0.01);
      assertEquals((-9.85824E11), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertTrue(long1.equals((Object)long0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9.85824E11), range0.getUpperBound(), 0.01);
      assertEquals((-9.85824E11), range0.getCentralValue(), 0.01);
      assertEquals((-9.85824E11), range0.getLowerBound(), 0.01);
      assertEquals(1313.06955802, range1.getLength(), 0.01);
      assertEquals((-647.53477901), range1.getCentralValue(), 0.01);
      assertEquals((-1304.06955802), range1.getLowerBound(), 0.01);
      assertEquals(9.0, range1.getUpperBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      MockDate mockDate0 = new MockDate(1, 1087, (-2146920041));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1087, 104.47819998224, (-649.0), (-649.0), 709.3696444363);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 08 00:00:00 GMT 5875957", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 08 00:00:00 GMT 5875957", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-2146920041));
      assertNotNull(long0);
      assertEquals((-2146920041L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(0L));
      assertFalse(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(0L));
      assertFalse(arrayList0.contains(long0));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.854932095008E17), range0.getUpperBound(), 0.01);
      assertEquals((-1.854932095008E17), range0.getCentralValue(), 0.01);
      assertEquals((-1.854932095008E17), range0.getLowerBound(), 0.01);
      assertEquals("Tue Nov 08 00:00:00 GMT 5875957", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(0L));
      assertFalse(arrayList0.contains(long0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.854932095008E17), range0.getUpperBound(), 0.01);
      assertEquals((-1.854932095008E17), range0.getCentralValue(), 0.01);
      assertEquals((-1.854932095008E17), range0.getLowerBound(), 0.01);
      assertEquals((-649.0), range1.getUpperBound(), 0.01);
      assertEquals((-649.0), range1.getLowerBound(), 0.01);
      assertEquals((-649.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Tue Nov 08 00:00:00 GMT 5875957", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(7, oHLCDataItemArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 709.3696444363);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(709.3696444363, range2.getUpperBound(), 0.01);
      assertEquals(709.3696444363, range2.getCentralValue(), 0.01);
      assertEquals(709.3696444363, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-698.19947758), 4066.0, "k:Ix2");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 4066.0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6099.0, range0.getCentralValue(), 0.01);
      assertEquals(4066.0, range0.getLength(), 0.01);
      assertEquals(8132.0, range0.getUpperBound(), 0.01);
      assertEquals(4066.0, range0.getLowerBound(), 0.01);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(28, 28, 28);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 28, 2522.0, 2522.0, (-2766.82495388), (-2766.82495388));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed May 28 00:00:00 GMT 1930", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed May 28 00:00:00 GMT 1930", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNull(number0);
      assertEquals("Wed May 28 00:00:00 GMT 1930", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2766.82495388);
      doubleArray1[1] = (double) 28;
      doubleArray1[2] = 2522.0;
      doubleArray1[3] = 2522.0;
      doubleArray1[4] = 2522.0;
      doubleArray1[5] = 1574.7769222632282;
      doubleArray1[6] = 3177.897454;
      doubleArray1[7] = 2522.0;
      doubleArray1[8] = (-2766.82495388);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1574.7769222632282;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2766.82495388);
      doubleArray3[1] = 2522.0;
      doubleArray3[2] = (-2766.82495388);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2522.0;
      doubleArray4[1] = 1574.7769222632282;
      doubleArray4[2] = 2522.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 2522.0;
      doubleArray5[1] = 4066.0;
      doubleArray5[2] = 2522.0;
      doubleArray5[3] = (-2766.82495388);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) 28;
      doubleArray6[1] = 3177.897454;
      doubleArray6[2] = (-2766.82495388);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 2914.1824946416;
      doubleArray7[1] = 3177.897454;
      doubleArray7[2] = 1574.7769222632282;
      doubleArray7[3] = 1574.7769222632282;
      doubleArray7[4] = 0.8;
      doubleArray7[5] = 3177.897454;
      doubleArray7[6] = 3177.897454;
      doubleArray7[7] = (-2766.82495388);
      doubleArray7[8] = 3177.897454;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 1574.7769222632282;
      doubleArray8[1] = 3177.897454;
      doubleArray8[2] = 1574.7769222632282;
      doubleArray8[3] = 580.90227760933;
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = 3177.897454;
      doubleArray9[1] = 2914.1824946416;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-52), (-52), (-52));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-52), (-52), (-52), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jul 10 00:00:00 GMT 1843", mockDate0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = categoryTableXYDataset0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals("Mon Jul 10 00:00:00 GMT 1843", mockDate0.toString());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1429.0, 1429.0, "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1429.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-52), 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-52), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Nov 28 22:58:59 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(421.3986902871, (-1860.3996190762089), ")xc;y");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1860.3996190762089), double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1781.728);
      doubleArray0[2] = (-398.04);
      doubleArray0[4] = (-2394.6614308673);
      doubleArray0[5] = (-1220.8165);
      doubleArray0[6] = (-1449.0570768620198);
      doubleArray0[7] = Double.NaN;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1781.728), (-398.04), 0.0, (-2394.6614308673), (-1220.8165), (-1449.0570768620198), Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-5296.713392122657), (-398.04), 174, (-2394.6614308673));
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1781.728), (-398.04), 0.0, (-2394.6614308673), (-1220.8165), (-1449.0570768620198), Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(174, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals((-5296.713392122657), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-398.03999999999996), xYSeries0.getMaxX(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-24), (-24), (-24));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-24), (-24), (-24), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Dec 07 00:00:00 GMT 1873", mockDate0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = categoryTableXYDataset0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals("Sun Dec 07 00:00:00 GMT 1873", mockDate0.toString());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1429.0, 1429.0, "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1429.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-198.2671), 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, (-1579.026839006013));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 522.5734269, (-198.2671), 31.5, (-2.147483648E9), 1.7976931348623157E308);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("k5", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Long long0 = new Long(1231L);
      assertNotNull(long0);
      assertEquals(1231L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.7976931348623157E308, range1.getUpperBound(), 0.01);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1073);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1073, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.previous();
      assertFalse(second1.equals((Object)second0));
      assertNotNull(second1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(second1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {59.0, 0.0, 0.0, 59.0, 59.0, 59.0, 59.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(9, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-2092L));
      assertNotNull(long0);
      assertEquals((-2092L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "Can't evaluate the year.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3609.0305;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 548.75571;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-669.712704);
      doubleArray1[5] = (-2343.032104719881);
      doubleArray1[6] = (-2493.8038154);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(1, doubleArray0.length);
      
      System.setCurrentTimeMillis(501L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1084, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1084,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1084, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = locale0.getDisplayScript((Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1084,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1084, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1084,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1084, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1084,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1084, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-198.2671), 1.7976931348623157E308, 1.7976931348623157E308, (-1.0), (-1579.026839006013));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 522.5734269, (-1.0), 31.5, (-2.147483648E9), 1.7976931348623157E308);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("k5", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Long long0 = new Long(1231L);
      assertNotNull(long0);
      assertEquals(1231L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableDataChanged();
      boolean boolean1 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-198.2671), 1.7976931348623157E308, 1.7976931348623157E308, (-1.0), (-1579.026839006013));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 522.5734269, (-1.0), 31.5, (-2.147483648E9), 1.7976931348623157E308);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("ftu3", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Long long0 = new Long(1231L);
      assertNotNull(long0);
      assertEquals(1231L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableDataChanged();
      boolean boolean1 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = Range.expandToInclude(range0, (-198.2671));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(1.7976931348623157E308, range1.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range1.getCentralValue(), 0.01);
      assertEquals((-198.2671), range1.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Random.setNextRandom((-1771));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) long0, (Number) long0, (Comparable) mockDate0, (Comparable) long0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double0 = (-198.2671);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-198.2671), 1.7976931348623157E308, 1.7976931348623157E308, (-1.0), (-1579.026839006013));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      double double1 = 31.5;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 522.5734269, (-1.0), 31.5, (-2.147483648E9), 1.7976931348623157E308);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("k5", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(31.5, range0.getLowerBound(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Long long0 = new Long(1231L);
      assertNotNull(long0);
      assertEquals(1231L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      xYDatasetTableModel0.fireTableDataChanged();
      boolean boolean1 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 31, (double) 31, "&D[Z");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(31.0, range1.getUpperBound(), 0.01);
      assertEquals(31.0, range1.getLowerBound(), 0.01);
      assertEquals(31.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 0.8);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 366);
      assertNotNull(pieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      String string0 = "(";
      String string1 = "ftu1";
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[8];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)9;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)64, (byte)9}, byteArray0);
      assertEquals((byte)9, bigInteger0.byteValue());
      assertEquals((short)16393, bigInteger0.shortValue());
      assertEquals(3, byteArray0.length);
      
      numberArray1[0] = (Number) bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      numberArray1[1] = (Number) bigInteger1;
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      numberArray1[2] = (Number) byte0;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[3] = (Number) integer0;
      MockRandom mockRandom0 = new MockRandom((byte)9);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger2 = new BigInteger(9, (byte) (-70), mockRandom0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertEquals((short)257, bigInteger2.shortValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      
      numberArray1[4] = (Number) bigInteger2;
      Float float0 = new Float((float) (byte)9);
      assertNotNull(float0);
      assertEquals(9.0F, (float)float0, 0.01F);
      
      numberArray1[5] = (Number) float0;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        yIntervalSeriesCollection0.getStartY(207, 207);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 207, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(millisecond0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.5526950683111155, Double.NaN, "Su-");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(millisecond0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2775.4845, 9);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(9.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2775.4845, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.0, 9, 212, millisecond0);
      assertNotNull(xYSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2775.4845, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(212, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(9.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2146552086));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2146552086);
      doubleArray0[1] = (double) (-2146552086);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2.146552086E9), (-2.146552086E9)}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2146552086), 0.0, 17, (-2.146552086E9));
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {(-2.146552086E9), (-2.146552086E9)}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals((-2.146552086E9), xYSeries0.getMinX(), 0.01);
      assertEquals((-2.146552086E9), xYSeries0.getMinY(), 0.01);
      assertEquals(4.6076858557643991E18, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(17, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[9];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(8, numberArray0.length);
      
      Range range1 = Range.shift(range0, (-2755.6382697775), true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2655.6382697775), range1.getUpperBound(), 0.01);
      assertEquals((-2655.6382697775), range1.getCentralValue(), 0.01);
      assertEquals((-2655.6382697775), range1.getLowerBound(), 0.01);
      assertEquals(8, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2146548670);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2146548670, categoryToPieDataset0.getExtractIndex());
      assertEquals(8, numberArray0.length);
      
      defaultBoxAndWhiskerXYDataset0.addChangeListener(categoryToPieDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2146548670, categoryToPieDataset0.getExtractIndex());
      assertEquals(8, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(8, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) integer0, (-2755.6382697775), 2146548670);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146548670, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertNotNull(defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-1373.891961), (-1));
      assertNotNull(range0);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1373.891961), range0.getLowerBound(), 0.01);
      assertEquals(1372.891961, range0.getLength(), 0.01);
      assertEquals((-687.4459805), range0.getCentralValue(), 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1373.891961), range0.getLowerBound(), 0.01);
      assertEquals(1372.891961, range0.getLength(), 0.01);
      assertEquals((-687.4459805), range0.getCentralValue(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, oHLCDataItemArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 0.0, "Mns ?7");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[6];
      Long long0 = new Long(60L);
      assertNotNull(long0);
      assertEquals(60L, (long)long0);
      
      numberArray1[0] = (Number) long0;
      short short0 = (short)42;
      Short short1 = new Short((short)42);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)42, (short)short1);
      
      numberArray1[1] = (Number) short1;
      Short short2 = new Short((short)42);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)42, (short)short2);
      
      numberArray1[2] = (Number) short2;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray1[3] = (Number) integer0;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getEndY(32, (-3751));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertNull(range2);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "Can't evaluate the year.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(366, 366, (-3051.31), 366, (-197.0390225), (-3051.31));
      assertNotNull(defaultHeatMapDataset0);
      assertEquals((-3051.31), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(366.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-3051.31), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-197.0390225), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getXSampleCount());
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals((-3051.31), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(366.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-3051.31), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-197.0390225), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getXSampleCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryTableXYDataset0.setGroup(datasetGroup0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-3051.31), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(366.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-3051.31), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-197.0390225), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(366, defaultHeatMapDataset0.getXSampleCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, long0, long0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add((Long) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      long long0 = 671L;
      Long long1 = new Long(671L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(671L, (long)long1);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, long1, long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(671.0, range0.getUpperBound(), 0.01);
      assertEquals(671.0, range0.getCentralValue(), 0.01);
      assertEquals(671.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = null;
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Long long0 = new Long(671L);
      assertNotNull(long0);
      assertEquals(671L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, long0, long0);
      assertFalse(arrayList0.contains(long0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Long long0 = new Long(671L);
      assertNotNull(long0);
      assertEquals(671L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(671L));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, long0, long0);
      assertFalse(arrayList0.contains(671L));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long1 = new Long(663L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(663L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(663L));
      assertFalse(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      defaultKeyedValues2DDataset0.addValue((-254.955), (Comparable) second0, (Comparable) second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      assertNotNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-254.955), range0.getLowerBound(), 0.01);
      assertEquals((-254.955), range0.getUpperBound(), 0.01);
      assertEquals((-254.955), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Long long0 = new Long((-2115L));
      assertNotNull(long0);
      assertEquals((-2115L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      DatasetGroup datasetGroup1 = new DatasetGroup();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup1);
      assertEquals("NOID", datasetGroup1.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup1);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotSame(datasetGroup1, datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup1.getID());
      assertEquals(0, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) (-2115L));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2115.0), range0.getCentralValue(), 0.01);
      assertEquals((-2115.0), range0.getUpperBound(), 0.01);
      assertEquals((-2115.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertTrue(arrayList0.contains((-2115L)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2115.0), range0.getCentralValue(), 0.01);
      assertEquals((-2115.0), range0.getUpperBound(), 0.01);
      assertEquals((-2115.0), range0.getLowerBound(), 0.01);
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (-1.0));
      assertNotNull(pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(matrixSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      categoryDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      Range range0 = new Range((-1.0), (-1.0));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-7328.0), (-1316.45745), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-7328.0), range0.getCentralValue(), 0.01);
      assertEquals((-7328.0), range0.getUpperBound(), 0.01);
      assertEquals((-7328.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Number[][] numberArray0 = new Number[5][6];
      Number[] numberArray1 = new Number[9];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(5, numberArray0.length);
      
      Range range1 = Range.shift(range0, 4.0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(104.0, range1.getLowerBound(), 0.01);
      assertEquals(104.0, range1.getUpperBound(), 0.01);
      assertEquals(104.0, range1.getCentralValue(), 0.01);
      assertEquals(5, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(5, numberArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(100.0, range3.getUpperBound(), 0.01);
      assertEquals(100.0, range3.getLowerBound(), 0.01);
      assertEquals(100.0, range3.getCentralValue(), 0.01);
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = Range.shift(range0, (-669.919559));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-670.919559), range1.getLowerBound(), 0.01);
      assertEquals((-670.919559), range1.getUpperBound(), 0.01);
      assertEquals((-670.919559), range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertFalse(arrayList0.contains(xYDatasetTableModel0));
      assertNotSame(range0, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(arrayList0.contains(xYDatasetTableModel0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range3));
      assertNotNull(range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range4.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range5 = Range.combine(range3, (Range) null);
      assertTrue(range3.equals((Object)range4));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertFalse(range5.equals((Object)range0));
      assertNotNull(range5);
      assertFalse(arrayList0.contains(xYDatasetTableModel0));
      assertSame(range3, range5);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertSame(range5, range3);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(1.39240928132E12, range5.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range5.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range5.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) (-1);
      doubleArray1[8] = (-1854.85363787);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1854.85363787);
      doubleArray3[1] = (double) (-1);
      doubleArray3[2] = (-1854.85363787);
      doubleArray3[3] = (-1854.85363787);
      doubleArray3[4] = (double) (-1);
      doubleArray3[5] = (-728.8001593935339);
      doubleArray3[6] = (double) (-1);
      doubleArray3[7] = (double) (-1);
      doubleArray3[8] = (-1854.85363787);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-728.8001593935339);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x#a@gXV@", "k:Ix2", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-1854.85363787), range0.getLowerBound(), 0.01);
      assertEquals((-927.926818935), range0.getCentralValue(), 0.01);
      assertEquals(1853.85363787, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2340);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2340, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "k5", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2340, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1917, 1951, 3852);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1223.70055407606, (-1.0), 1223.70055407606, 3852, (-4128.499872295851));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Feb 15 00:00:00 GMT 3990", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Feb 15 00:00:00 GMT 3990", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1.0);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Feb 15 00:00:00 GMT 3990", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYBarDataset0);
      assertFalse(boolean0);
      assertEquals("Thu Feb 15 00:00:00 GMT 3990", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertEquals(6.37489440000005E13, number0);
      assertEquals("Thu Feb 15 00:00:00 GMT 3990", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<Float>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<Float>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<Float>) oHLCDataItem0;
      comparableArray0[3] = (Comparable<Float>) oHLCDataItem0;
      comparableArray0[4] = (Comparable<Float>) oHLCDataItem0;
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      comparableArray0[5] = (Comparable<Float>) millisecond1;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 999);
      assertNotNull(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      
      comparableArray0[6] = (Comparable<Float>) xYDataItem0;
      comparableArray0[7] = (Comparable<Float>) oHLCDataItem0;
      comparableArray0[8] = (Comparable<Float>) oHLCDataItem0;
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = 607.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) (-1);
      doubleArray3[6] = (double) 999;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (-1.0));
      assertNotNull(pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "M}d8IQ4ZHJhvg", (-1.0));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "M}d8IQ4ZHJhvg", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "M}d8IQ4ZHJhvg");
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "M}d8IQ4ZHJhvg", Double.NEGATIVE_INFINITY);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals((-2.243376E12), number0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.243376E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.243376E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.243376E12), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Random.setNextRandom(243);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-4065.772145);
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-225.7);
      doubleArray1[4] = 706.51572967222;
      doubleArray1[5] = (-418.2718728);
      doubleArray1[6] = 341.771822;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (-4065.772145);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-225.7);
      doubleArray3[1] = (-4065.772145);
      doubleArray3[2] = (-418.2718728);
      doubleArray3[3] = (-4065.772145);
      doubleArray3[4] = 706.51572967222;
      doubleArray3[5] = (-4065.772145);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      int int0 = timeSeriesCollection0.indexOf(timeSeries0);
      assertEquals(0, int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5", "5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "5", 2580.244748626783, 171);
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "5", (KeyedValues) pieDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 171, 59);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(171, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) "5");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 170, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-476.349874692664), (-1373.891961), 0.8, 512.9, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-755.7333173), 0.8, (-1), (-495.38), (-1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(instant0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-0.09999999999999998), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(1.8, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean1 = arrayList1.add((XYDatasetTableModel) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList1, range0, false);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNull(range1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertNotSame(arrayList1, arrayList0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-0.09999999999999998), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(1.8, range0.getLength(), 0.01);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList1, false);
      assertFalse(range2.equals((Object)range0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(range2);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertNotSame(range2, range0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals((-2.243376E12), range2.getUpperBound(), 0.01);
      assertEquals((-2.243376E12), range2.getLowerBound(), 0.01);
      assertEquals((-2.243376E12), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(range1, range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-2.243376E12), range1.getUpperBound(), 0.01);
      assertEquals((-2.243376E12), range1.getLowerBound(), 0.01);
      assertEquals((-2.243376E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[19][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultHi}hLowDataset", "org.jfree.data.xy.DefaultHi}hLowDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(19, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(19, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
      assertNotNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(19, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries((-1.0));
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertNull(xYIntervalSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean1 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((Long) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean1 = arrayList0.add(long0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), 30);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(30, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries("org.jfree.data.xy.DeaultHighLowDataset");
      assertNotNull(xYIntervalSeries0);
      assertTrue(xYIntervalSeries0.getNotify());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.5;
      doubleArray4[1] = 0.5;
      doubleArray4[2] = 0.5;
      doubleArray4[3] = (-298.259);
      doubleArray4[4] = 0.5;
      doubleArray4[5] = 0.5;
      doubleArray4[6] = 0.5;
      doubleArray4[7] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.0), Double.NEGATIVE_INFINITY, "org.jfree.data.pie.AbstractPieDataset");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-37.2154);
      doubleArray1[1] = (-692.39744);
      doubleArray1[2] = (-2370.33812005556);
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-692.39744);
      doubleArray2[1] = (-692.39744);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-692.39744);
      doubleArray2[4] = (-2370.33812005556);
      doubleArray2[5] = (-1.7976931348623157E308);
      doubleArray2[6] = (-1.7976931348623157E308);
      doubleArray2[7] = (-37.2154);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2370.33812005556);
      doubleArray4[1] = (-1.7976931348623157E308);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-692.39744);
      doubleArray5[1] = (-2370.33812005556);
      doubleArray5[2] = (-692.39744);
      doubleArray5[3] = (-1.7976931348623157E308);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-692.39744);
      doubleArray6[2] = (-37.2154);
      doubleArray6[3] = (-1.7976931348623157E308);
      doubleArray6[4] = (-2328.096138510311);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-692.39744);
      doubleArray7[1] = (-2328.096138510311);
      doubleArray7[2] = (-37.2154);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-692.39744);
      doubleArray7[5] = (-692.39744);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = (-1.7976931348623157E308);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-2370.33812005556);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-1.7976931348623157E308);
      doubleArray8[5] = (-1593.3509);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("B@", "ftu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(8, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-37.2154), (-692.39744), 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), 1.0, 0.8);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = defaultOHLCDataset0.indexOf(mockDate0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(2193.7005151249846, 2193.7005151249846, "Qs");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2193.2005151249846, range0.getLowerBound(), 0.01);
      assertEquals(2194.2005151249846, range0.getUpperBound(), 0.01);
      assertEquals(2193.7005151249846, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-481));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-481), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, 1223.70055407606, Double.NEGATIVE_INFINITY, (-617.77), 3314.051);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-617.77), range2.getUpperBound(), 0.01);
      assertEquals((-617.77), range2.getCentralValue(), 0.01);
      assertEquals((-617.77), range2.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset1.add(0.0, 0.0, "Qs");
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1, true);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotNull(range0);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNull(range1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset1, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(2193.7005151249846, 1.0, "Qs");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2194.2005151249846, range0.getUpperBound(), 0.01);
      assertEquals(2193.7005151249846, range0.getCentralValue(), 0.01);
      assertEquals(2193.2005151249846, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "k5";
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-7328.0), 884.0, (Comparable) "k5", (Comparable) "k5");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(550.906395443, 0.0, "Rq");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(551.406395443, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "k5", "k5");
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(550.406395443, range0.getLowerBound(), 0.01);
      assertEquals(550.906395443, range0.getCentralValue(), 0.01);
      assertEquals(551.406395443, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4245.9056379294);
      doubleArray1[1] = 1.5;
      doubleArray1[2] = 4450.8479;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4450.8479;
      doubleArray2[1] = 1.5;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 1.5;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (-1373.891961);
      doubleArray1[7] = 0.33333333333333337;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(125.9997288630029, (-939.296), "k5");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotNull(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      double double0 = categoryTableXYDataset1.getDomainUpperBound(true);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      defaultMultiValueCategoryDataset1.add(stack0, "k5", "k5");
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1, false);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNull(range0);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1, false);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNull(range1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset1, 873);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-939.296));
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotNull(range2);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(939.296, range2.getLength(), 0.01);
      assertEquals((-1878.592), range2.getLowerBound(), 0.01);
      assertEquals((-1408.944), range2.getCentralValue(), 0.01);
      assertEquals((-939.296), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.0, 1.0, "Qs");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(1.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1651.1);
      assertNotNull(range3);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1651.1, range3.getLowerBound(), 0.01);
      assertEquals(1651.6, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getLength(), 0.01);
      assertEquals(1652.1, range3.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(907.3296329);
      assertNotNull(double0);
      assertEquals(907.3296329, (double)double0, 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 907.3296329;
      doubleArray1[1] = 907.3296329;
      doubleArray1[2] = 907.3296329;
      doubleArray1[3] = 907.3296329;
      doubleArray1[4] = 907.3296329;
      doubleArray1[5] = 907.3296329;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(907.3296329, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(907.3296329, range0.getLowerBound(), 0.01);
      assertEquals(907.3296329, range0.getUpperBound(), 0.01);
      assertEquals(907.3296329, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), 907.3296329);
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(907.3296329, lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-883.0), Double.NEGATIVE_INFINITY, 852, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertNull(range1);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertNull(range2);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      int int0 = xYDatasetTableModel0.getColumnCount();
      assertEquals(1, int0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      jDBCXYDataset0.setTimeSeries(false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-928.4346296);
      doubleArray1[1] = (-3664.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 94.17678;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalXYDataset0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      doubleArray1[4] = (-3579.30013);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3579.30013);
      doubleArray2[1] = (-3664.0);
      doubleArray2[2] = (-3579.30013);
      doubleArray2[3] = 94.17678;
      doubleArray2[4] = 94.17678;
      doubleArray2[5] = (-928.4346296);
      doubleArray2[6] = 94.17678;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k:Ix", "k:Ix", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "k:Ix", 2113.3606);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNotNull(range1);
      assertEquals((-7328.0), range1.getLowerBound(), 0.01);
      assertEquals(188.35356, range1.getUpperBound(), 0.01);
      assertEquals((-3569.82322), range1.getCentralValue(), 0.01);
      assertEquals(7516.35356, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      Range range0 = new Range((-870.45053), 6.283185307179586);
      assertNotNull(range0);
      assertEquals(876.7337153071795, range0.getLength(), 0.01);
      assertEquals((-870.45053), range0.getLowerBound(), 0.01);
      assertEquals((-432.0836723464102), range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2469.97736690494);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 6.283185307179586;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 999.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2469.97736690494), (-1.0), 6.283185307179586, 6.283185307179586, 0.0, 999.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, Double.NaN, 2, (-1.0));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {(-2469.97736690494), (-1.0), 6.283185307179586, 6.283185307179586, 0.0, 999.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(6, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = 1.0;
      doubleArray1[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", (String) null, doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "Duplicate items in 'rowKeys'.", 999.0);
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultMultiValueCategoryDataset0.validateObject();
      categoryTableXYDataset0.add(2193.7005151249846, 1.0, "Qs");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2193.2005151249846, range0.getLowerBound(), 0.01);
      assertEquals(2193.7005151249846, range0.getCentralValue(), 0.01);
      assertEquals(2194.2005151249846, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 1);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.8, 2194.2005151249846, 4, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(0.8, xYSeries0.getMinY(), 0.01);
      assertEquals(2194.2005151249846, xYSeries0.getMaxY(), 0.01);
      assertEquals(2194.2005151249846, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.8, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = number0;
      numberArray1[1] = (Number) 4;
      numberArray1[2] = (Number) 4;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 1;
      numberArray1[5] = (Number) 4;
      numberArray1[6] = (Number) 4;
      numberArray1[7] = (Number) 4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = (Number) 4;
      numberArray2[2] = number0;
      numberArray2[3] = (Number) 4;
      numberArray2[4] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) 4;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) 1;
      numberArray3[4] = (Number) 1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
      assertEquals(4, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(5, 5);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(4, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 5);
      assertNotNull(xYBarDataset0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(4, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(5.0, xYBarDataset0.getBarWidth(), 0.01);
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 42.908460130540476;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 42.908460130540476;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = (double) 5;
      doubleArray4[6] = (-1686.815088714396);
      doubleArray4[7] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("C,\"r10pww57\"BW", "org.jfree.data.xy.DefaultHigLowaaset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(42.908460130540476, range0.getUpperBound(), 0.01);
      assertEquals((-1686.815088714396), range0.getLowerBound(), 0.01);
      assertEquals((-821.9533142919278), range0.getCentralValue(), 0.01);
      assertEquals(1729.7235488449367, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Vector<Minute> vector0 = new Vector<Minute>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Millisecond millisecond0 = new Millisecond(2, second0);
      assertNotNull(millisecond0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(2L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      boolean boolean0 = vector0.removeElement(millisecond0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertFalse(boolean0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(2L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(4, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(42.908460130540476, range0.getUpperBound(), 0.01);
      assertEquals((-1686.815088714396), range0.getLowerBound(), 0.01);
      assertEquals((-821.9533142919278), range0.getCentralValue(), 0.01);
      assertEquals(1729.7235488449367, range0.getLength(), 0.01);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-16.80114926583417), (-1100.9855885), "Qs");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotNull(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      double double0 = categoryTableXYDataset1.getDomainUpperBound(false);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, mockDate0, mockDate0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotNull(range0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-16.80114926583417), range0.getUpperBound(), 0.01);
      assertEquals((-16.80114926583417), range0.getLowerBound(), 0.01);
      assertEquals((-16.80114926583417), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range1, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1100.9855885), range1.getUpperBound(), 0.01);
      assertEquals((-1100.9855885), range1.getLowerBound(), 0.01);
      assertEquals((-1100.9855885), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset1, 874);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNull(range2);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-231));
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultMultiValueCategoryDataset0.validateObject();
      categoryTableXYDataset0.add(2193.7005151249846, 1.0, "Qs");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2194.2005151249846, range0.getUpperBound(), 0.01);
      assertEquals(2193.2005151249846, range0.getLowerBound(), 0.01);
      assertEquals(2193.7005151249846, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), Double.NEGATIVE_INFINITY, "org.jfree.data.pie.AbstractPieDataset");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      assertNotNull(spreadsheetDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(152, spreadsheetDate0.toSerial());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(152, spreadsheetDate0.toSerial());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      double double0 = 0.0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 0.0, 9999, 0, 0);
      assertNotNull(oHLCDataItem0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(152, spreadsheetDate0.toSerial());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(spreadsheetDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(152, spreadsheetDate0.toSerial());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (9999.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYDatasetTableModel) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean1 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Number[][] numberArray0 = new Number[5][6];
      Number[] numberArray1 = new Number[18];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(18, list0.size());
      assertEquals(5, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3624.1007524);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3624.1007524);
      doubleArray2[1] = (-3624.1007524);
      doubleArray2[2] = (-3624.1007524);
      doubleArray2[3] = (-3624.1007524);
      doubleArray2[4] = (-3624.1007524);
      doubleArray2[5] = (-3624.1007524);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3624.1007524);
      doubleArray3[1] = (-3624.1007524);
      doubleArray3[2] = (-3624.1007524);
      doubleArray3[3] = (-3624.1007524);
      doubleArray3[4] = (-3624.1007524);
      doubleArray3[5] = (-3624.1007524);
      doubleArray3[6] = (-3624.1007524);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Negative 'periods' argument.", "u5 SP<%", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-12684.352633400002), range0.getCentralValue(), 0.01);
      assertEquals((-25368.705266800003), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(25368.705266800003, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(list0.contains("Negative 'periods' argument."));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) list0, range0, true);
      assertNull(range1);
      assertFalse(list0.contains("Negative 'periods' argument."));
      assertEquals((-12684.352633400002), range0.getCentralValue(), 0.01);
      assertEquals((-25368.705266800003), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(25368.705266800003, range0.getLength(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xIntervalSeriesCollection0);
      assertNull(range2);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(2193.7005151249846, 1.0, "Qs");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007, 3253.13007, 3253.13007, 3253.13007, 3253.13007);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = new Range(3253.13007, 3253.13007);
      assertNotNull(range0);
      assertEquals(3253.13007, range0.getLowerBound(), 0.01);
      assertEquals(3253.13007, range0.getUpperBound(), 0.01);
      assertEquals(3253.13007, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 960);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(960, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 960, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "k5";
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertFalse(vector1.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      boolean boolean0 = vector1.add(defaultMultiValueCategoryDataset0);
      assertFalse(vector1.equals((Object)vector0));
      assertTrue(vector1.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector1, vector0);
      assertTrue(boolean0);
      assertEquals(1, vector1.size());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<JSpinner.ListEditor> arrayList0 = new ArrayList<JSpinner.ListEditor>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, (-1.0));
      assertNotNull(pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(0L));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      MockDate mockDate0 = new MockDate(1, 212, 1, 883, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(1, hour0);
      assertNotNull(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, minute1, timeZone0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean1 = arrayList1.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList1.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 3253.13007136384, 3253.13007136384, Double.POSITIVE_INFINITY, 3253.13007136384);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, (-9999));
      assertNotNull(categoryToPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      
      defaultOHLCDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3253.13007136384, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3253.13007136384, range0.getCentralValue(), 0.01);
      assertEquals(3253.13007136384, range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(3253.13007136384, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(3253.13007136384, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3253.13007136384, range1.getUpperBound(), 0.01);
      assertEquals(3253.13007136384, range1.getLowerBound(), 0.01);
      assertEquals(3253.13007136384, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1223.70055407606, 1223.70055407606, (-1), (-1), 1223.70055407606);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1224.70055407606, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range2.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range3.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range3.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range3.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, 387.13);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNull(number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-953L));
      assertNotNull(long0);
      assertEquals((-953L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(175, (-1073741824));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1073741825), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1073741825), dynamicTimeSeriesCollection0.getNewestIndex());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(normalDistributionFunction2D0);
      assertFalse(boolean0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      List list1 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Long long0 = new Long((-2112L));
      assertNotNull(long0);
      assertEquals((-2112L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>(196);
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-2112L)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains((-2112L)));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1223.70055407606, 1223.70055407606, (-1), (-1), 1223.70055407606);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1003.0, 1003.0, 1003.0, 1003.0, 1003.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1003.0, range0.getUpperBound(), 0.01);
      assertEquals(1003.0, range0.getCentralValue(), 0.01);
      assertEquals(1003.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(7, oHLCDataItemArray0.length);
      
      mockDate0.setTime(5333L);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5333.0, range1.getUpperBound(), 0.01);
      assertEquals(5333.0, range1.getLowerBound(), 0.01);
      assertEquals(5333.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1003.0, range2.getUpperBound(), 0.01);
      assertEquals(1003.0, range2.getLowerBound(), 0.01);
      assertEquals(1003.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(7, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries("");
      assertNotNull(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getAutoSort());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      xYIntervalSeriesCollection0.addSeries(xYIntervalSeries0);
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertEquals(1, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(1, xYIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = (-1.0);
      defaultKeyedValuesDataset0.setValue((Comparable) bigInteger0, (-1.0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) bigInteger0);
      assertNotNull(pieDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) bigInteger0, 93.42470409189086);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(bigInteger0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Double double1 = new Double(93.42470409189086);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(93.42470409189086, (double)double1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = 1;
      MockDate mockDate0 = new MockDate(1, 212, 1, 883, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      
      Minute minute0 = new Minute(1, hour0);
      assertNotNull(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, minute1, timeZone0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      long long1 = minute0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(minute0, minute1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, long1);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1918,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=19,MINUTE=1,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Comparable<JSpinner.ListEditor>[] comparableArray0 = (Comparable<JSpinner.ListEditor>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      comparableArray0[0] = (Comparable<JSpinner.ListEditor>) hour0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range2.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range2.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-544.4187974), 1223.70055407606, Double.NaN, 687.7374663913, 980.6499449937571);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 980.6499449937571, 687.7374663913, (-544.4187974), 1223.70055407606, 100.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(339.64087833802995, range0.getCentralValue(), 0.01);
      assertEquals((-544.4187974), range0.getLowerBound(), 0.01);
      assertEquals(1768.1193514760598, range0.getLength(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-186L));
      assertNotNull(long0);
      assertEquals((-186L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean0 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double0 = (-1373.891961);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-2138781358));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2138781358), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", (double) (-2138781358));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X[Fa_b=X_!j";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean0 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = true;
      Range range1 = Range.expand(range0, (-1377.0002442), (-2995.0811330070587));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-990220.9302539061), range1.getUpperBound(), 0.01);
      assertEquals((-990220.9302539061), range1.getCentralValue(), 0.01);
      assertEquals((-990220.9302539061), range1.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MatrixSeries matrixSeries0 = new MatrixSeries("", 91, 91);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8281, matrixSeries0.getItemCount());
      assertEquals(91, matrixSeries0.getRowCount());
      assertEquals(91, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      List<XYDatasetTableModel> list0 = null;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5125), "lTM:e,EjnsPmK[,~!");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-5125), simpleTimeZone0.getRawOffset());
      assertEquals("lTM:e,EjnsPmK[,~!", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=lTM:e,EjnsPmK[,~!,offset=-5125,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, simpleTimeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-5125), simpleTimeZone0.getRawOffset());
      assertEquals("lTM:e,EjnsPmK[,~!", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=lTM:e,EjnsPmK[,~!,offset=-5125,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, (-1.0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) 1.0, 2159.4850228141813, 4);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2506.4504));
      assertNull(range0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range1);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(number0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertNull(range2);
      assertFalse(vector0.contains(number0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = 1;
      MockDate mockDate0 = new MockDate(1, 212, 1, 883, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      
      Minute minute0 = new Minute(1, hour0);
      assertNotNull(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, minute1, timeZone0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      minute0.peg(mockGregorianCalendar0);
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(minute0, minute1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1918,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=19,MINUTE=1,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      long long1 = minute0.getMiddleMillisecond((Calendar) mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(minute0.equals((Object)minute1));
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(minute0, minute1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, long1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1918,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=7,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=19,MINUTE=1,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(double0);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean0 = arrayList0.add(xYDatasetTableModel0);
      assertTrue(arrayList0.contains(xYDatasetTableModel0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-413.59219419), 1111.5686543908773, (-413.59219419), (-2076.593934459), (-413.59219419));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1525.1608485808774, range0.getLength(), 0.01);
      assertEquals((-413.59219419), range0.getLowerBound(), 0.01);
      assertEquals(1111.5686543908773, range0.getUpperBound(), 0.01);
      assertEquals(348.98823010043867, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0L));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(0L));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(0L));
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = Range.shift(range0, 4.0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(404.0, range1.getLowerBound(), 0.01);
      assertEquals(404.0, range1.getUpperBound(), 0.01);
      assertEquals(404.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean1 = arrayList1.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList1.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList1, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2524), (-556), 874);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1223.70055407606, 2109.854910259, 1868.44, (-556), 2109.854910259);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Jan 22 00:00:00 GMT 669", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1910.0), 2455.0, (-1255.3079), (-1255.3079), 1223.70055407606);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Jan 22 00:00:00 GMT 669", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Jan 22 00:00:00 GMT 669", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Tue Jan 22 00:00:00 GMT 669", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1255.3079), range0.getLowerBound(), 0.01);
      assertEquals(2455.0, range0.getUpperBound(), 0.01);
      assertEquals(3710.3079, range0.getLength(), 0.01);
      assertEquals(599.84605, range0.getCentralValue(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(874);
      assertNotNull(long0);
      assertEquals(874L, (long)long0);
      
      Long long1 = new Long((-2524));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2524L), (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long1));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long1));
      assertNotSame(range1, range0);
      assertEquals("Tue Jan 22 00:00:00 GMT 669", mockDate0.toString());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-8.32460544E13), range1.getUpperBound(), 0.01);
      assertEquals((-8.32460544E13), range1.getLowerBound(), 0.01);
      assertEquals((-8.32460544E13), range1.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 3253.13007136384, 3253.13007136384, Double.POSITIVE_INFINITY, 3253.13007136384);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3253.13007136384, range0.getUpperBound(), 0.01);
      assertEquals(3253.13007136384, range0.getLowerBound(), 0.01);
      assertEquals(3253.13007136384, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = new Range((-272.84), 1.0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-272.84), range0.getLowerBound(), 0.01);
      assertEquals((-135.92), range0.getCentralValue(), 0.01);
      assertEquals(273.84, range0.getLength(), 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-664L));
      assertNotNull(long0);
      assertEquals((-664L), (long)long0);
      
      Long long1 = new Long(1177L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1177L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(arrayList0.contains(1177L));
      assertFalse(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, (OHLCDataItem[]) null);
      assertFalse(long0.equals((Object)long1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertFalse(long0.equals((Object)long1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertNotSame(datasetGroup0, datasetGroup1);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList1, range0, false);
      assertFalse(long0.equals((Object)long1));
      assertNull(range1);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-272.84), range0.getLowerBound(), 0.01);
      assertEquals((-135.92), range0.getCentralValue(), 0.01);
      assertEquals(273.84, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(152, 152, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(151, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) list0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = null;
      MockDate mockDate0 = new MockDate((-520), (-520), (-520), (-520), (-135), 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1223.70055407606, 0.0, (-520), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Mar 08 05:45:01 GMT 1335", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-269.69), 584.9719684102196, 835.7981248773272, 1, (-135));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Mar 08 05:45:01 GMT 1335", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Mar 08 05:45:01 GMT 1335", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 3253.13007136384, 3253.13007136384, Double.POSITIVE_INFINITY, 3253.13007136384);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3253.13007136384, range0.getUpperBound(), 0.01);
      assertEquals(3253.13007136384, range0.getLowerBound(), 0.01);
      assertEquals(3253.13007136384, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(3253.13007136384, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(3253.13007136384, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 2369.0;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultHeatMapDataset", "org.jfree.data.general.DefaultHeatMapDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(Double.NEGATIVE_INFINITY);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap1);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(range0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(2369.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(2369.0, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 2369.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = Range.shift(range0, 4.0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(404.0, range1.getLowerBound(), 0.01);
      assertEquals(404.0, range1.getCentralValue(), 0.01);
      assertEquals(404.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, true);
      assertNull(range3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, true);
      assertNull(range4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (-795.96);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 384.90833369173;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-795.96);
      doubleArray4[1] = 384.90833369173;
      doubleArray4[2] = (-795.96);
      doubleArray4[3] = (-795.96);
      doubleArray4[4] = 384.90833369173;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double0 = (-1373.891961);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range2, true);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNull(range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertNotNull(range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range4.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1.39240928132E12, range4.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[9];
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getVolume((-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0L));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add((Long) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(0L));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 2158;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-995.78), 2800.1455, 1223.70055407606, 1223.70055407606, (-2116.8086822));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1223.70055407606, range0.getLowerBound(), 0.01);
      assertEquals(2011.9230270380299, range0.getCentralValue(), 0.01);
      assertEquals(2800.1455, range0.getUpperBound(), 0.01);
      assertEquals(1576.4449459239402, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1223.70055407606, range2.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range2.getUpperBound(), 0.01);
      assertEquals(1223.70055407606, range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range2, true);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNull(range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1223.70055407606, range2.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range2.getUpperBound(), 0.01);
      assertEquals(1223.70055407606, range2.getCentralValue(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) oHLCDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.addValue((Number) null, (Comparable) bigInteger0, (Comparable) "");
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 0, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-1));
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[7];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray1[0] = (Number) bigInteger0;
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      numberArray1[1] = (Number) long0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[2] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      
      numberArray1[3] = (Number) integer1;
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      numberArray1[4] = (Number) bigInteger1;
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[5] = (Number) float0;
      BigInteger bigInteger2 = BigInteger.TEN;
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      
      numberArray1[6] = (Number) bigInteger2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger1;
      numberArray2[1] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      assertEquals(4, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(865, 865);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(864, dynamicTimeSeriesCollection0.getNewestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 1, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range2, true);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNull(range3);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, (-4615.717321758674));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2045, 2045);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2045, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2045, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 2045, 2045);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2045, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2045, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2045, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(2045, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 0.0, 0.0, 1223.70055407606, (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries(day0);
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range1, false);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertNull(range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Long long1 = new Long(2367L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2367L, (long)long1);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(2367L));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(2367L));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("hjxsD]~3dTKN}qI");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, false);
      assertNull(range0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(2367L));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-953L));
      assertNotNull(long0);
      assertEquals((-953L), (long)long0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-404.25));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertEquals((-204.25), range2.getCentralValue(), 0.01);
      assertEquals((-404.25), range2.getLowerBound(), 0.01);
      assertEquals(400.0, range2.getLength(), 0.01);
      assertEquals((-4.25), range2.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 3253.13007136384, 3253.13007136384, Double.POSITIVE_INFINITY, 3253.13007136384);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, 2335.41973206647);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, 2335.41973206647);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(10.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(10.0, double0, 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1638.0), Double.POSITIVE_INFINITY, (-831.4110567014), 3211.113333527847, (-831.4110567014));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1033.3025195739951, 938.4267, Double.NEGATIVE_INFINITY, 1223.70055407606, 0.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertNotNull(defaultOHLCDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset1.indexOf(oHLCDataItem0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), 1218.164052566659, (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[18];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(18, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1392409281320L;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 1392409281320L;
      doubleArray1[3] = (double) 1392409281320L;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (double) 1392409281320L;
      doubleArray1[8] = (double) 1392409281320L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1392409281320L;
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (double) 1392409281320L;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 1392409281320L;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (double) 1392409281320L;
      doubleArray5[4] = (double) 1392409281320L;
      doubleArray5[5] = 750.53194981;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = (double) 1392409281320L;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 750.53194981;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-3570.31984583663);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray6[6] = (-1.0);
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray6[8] = 750.53194981;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 750.53194981;
      doubleArray7[1] = 750.53194981;
      doubleArray7[2] = (-3570.31984583663);
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = Double.NEGATIVE_INFINITY;
      doubleArray7[5] = (double) 1392409281320L;
      doubleArray7[6] = (double) 1392409281320L;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (-3570.31984583663);
      doubleArray8[1] = 750.53194981;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = (-3570.31984583663);
      doubleArray9[1] = 750.53194981;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 750.53194981;
      doubleArray9[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "$}XEm<", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Year year0 = new Year(866);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(866L, year0.getSerialIndex());
      assertEquals("866", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(866, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(849, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 18, 18);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(18, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(18, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, 18, 18, (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(620.85027703803, range0.getCentralValue(), 0.01);
      assertEquals(18.0, range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(1205.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(620.85027703803, range0.getCentralValue(), 0.01);
      assertEquals(18.0, range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(1205.70055407606, range0.getLength(), 0.01);
      assertEquals(1223.70055407606, range1.getUpperBound(), 0.01);
      assertEquals(18.0, range1.getLowerBound(), 0.01);
      assertEquals(1205.70055407606, range1.getLength(), 0.01);
      assertEquals(620.85027703803, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(18.0, range2.getUpperBound(), 0.01);
      assertEquals(18.0, range2.getCentralValue(), 0.01);
      assertEquals(18.0, range2.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-6), (-6));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-6), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-6), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-6), (-6), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-6), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-6), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = Range.shift(range1, 4.0, false);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(404.0, range2.getCentralValue(), 0.01);
      assertEquals(404.0, range2.getUpperBound(), 0.01);
      assertEquals(404.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range3 = Range.expandToInclude(range1, 3131.1672608925874);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(3131.1672608925874, range3.getUpperBound(), 0.01);
      assertEquals(400.0, range3.getLowerBound(), 0.01);
      assertEquals(2731.1672608925874, range3.getLength(), 0.01);
      assertEquals(1765.5836304462937, range3.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, true);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertNull(range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range5 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range5);
      
      Range range6 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, false);
      assertNull(range6);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, (-1.0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) 3602.988, 2159.4850228141813, 4);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3616.65838818127);
      assertNotNull(range0);
      assertEquals(4164.927188181269, range0.getCentralValue(), 0.01);
      assertEquals(6109.4384, range0.getLength(), 0.01);
      assertEquals(1110.2079881812697, range0.getLowerBound(), 0.01);
      assertEquals(7219.64638818127, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-1875));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, Double.POSITIVE_INFINITY);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(5078.128055633094, 5078.128055633094);
      assertNotNull(powerFunction2D0);
      assertEquals(5078.128055633094, powerFunction2D0.getA(), 0.01);
      assertEquals(5078.128055633094, powerFunction2D0.getB(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 5078.128055633094, 1828.743366, 1139.0, 5053.6236996976);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.39240928132E12, (-237.604955080266), 1139.0, (-1385.17476), 2066.50099928765);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1035.4046359, 1035.4046359);
      assertNotNull(powerFunction2D0);
      assertEquals(1035.4046359, powerFunction2D0.getB(), 0.01);
      assertEquals(1035.4046359, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 2.0, 798.2618120032, 8, "");
      assertNotNull(xYSeriesCollection0);
      assertEquals(1035.4046359, powerFunction2D0.getB(), 0.01);
      assertEquals(1035.4046359, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertEquals(1035.4046359, powerFunction2D0.getB(), 0.01);
      assertEquals(1035.4046359, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 3253.13007136384);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(3253.13007136384, powerFunction2D0.getB(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1139.0, 1.39240928132E12, (-5288.917873611), Double.POSITIVE_INFINITY, 1139.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals((-5288.917873611), number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      int int0 = oHLCDataItem0.compareTo(oHLCDataItem0);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range0.getUpperBound(), 0.01);
      assertEquals(611.35027703803, range0.getCentralValue(), 0.01);
      assertEquals(1224.70055407606, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = 1223.70055407606;
      doubleArray2[2] = (-1373.891961);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 1223.70055407606;
      doubleArray2[7] = 1223.70055407606;
      doubleArray2[8] = (-1373.891961);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(2597.59251507606, range1.getLength(), 0.01);
      assertEquals((-75.09570346197006), range1.getCentralValue(), 0.01);
      assertEquals((-1373.891961), range1.getLowerBound(), 0.01);
      assertEquals(1223.70055407606, range1.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      defaultCategoryDataset0.addValue(6.283185307179586, (Comparable) 2580.244748626783, (Comparable) 884.0);
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 2);
      assertNotNull(defaultPieDataset0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3602.988, range0.getUpperBound(), 0.01);
      assertEquals((-2506.4504), range0.getLowerBound(), 0.01);
      assertEquals(6109.4384, range0.getLength(), 0.01);
      assertEquals(548.2687999999998, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 1.0, (-1.0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      XYDataset xYDataset0 = null;
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      Number[][] numberArray0 = new Number[1][6];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNull(range1);
      assertEquals(1, numberArray0.length);
      
      double double0 = 3131.1672608925874;
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 4.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleTimePeriod0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, simpleTimePeriod0.getEndMillis());
      assertEquals(1392409281320L, simpleTimePeriod0.getStartMillis());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2268.735261;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2268.735261;
      doubleArray2[1] = 1434.595037;
      doubleArray2[2] = 2268.735261;
      doubleArray2[3] = 2268.735261;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2268.735261;
      doubleArray3[1] = 1434.595037;
      doubleArray3[2] = 1434.595037;
      doubleArray3[3] = 1434.595037;
      doubleArray3[4] = 1434.595037;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1373.787;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 1434.595037;
      doubleArray5[1] = 1434.595037;
      doubleArray5[2] = 2268.735261;
      doubleArray5[3] = 1373.787;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 1434.595037;
      doubleArray6[1] = 2268.735261;
      doubleArray6[2] = 2268.735261;
      doubleArray6[3] = 1373.787;
      doubleArray6[4] = 399.94;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-0.1064700705647715), 3253.1300713638);
      assertNotNull(powerFunction2D0);
      assertEquals(3253.1300713638, powerFunction2D0.getB(), 0.01);
      assertEquals((-0.1064700705647715), powerFunction2D0.getA(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) fixedMillisecond0);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<Integer>) fixedMillisecond0;
      comparableArray0[1] = (Comparable<Integer>) fixedMillisecond0;
      comparableArray0[2] = (Comparable<Integer>) fixedMillisecond0;
      SerialDate serialDate0 = SerialDate.createInstance(864);
      assertNotNull(serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(864, serialDate0.toSerial());
      assertEquals(13, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      
      SerialDate serialDate1 = SerialDate.addMonths(82, serialDate0);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(serialDate1);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(864, serialDate0.toSerial());
      assertEquals(13, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(13, serialDate1.getDayOfMonth());
      assertEquals(1909, serialDate1.getYYYY());
      assertEquals(3360, serialDate1.toSerial());
      assertEquals(7, serialDate1.getDayOfWeek());
      
      SerialDate serialDate2 = SerialDate.addDays(82, serialDate1);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertFalse(serialDate2.equals((Object)serialDate1));
      assertFalse(serialDate2.equals((Object)serialDate0));
      assertNotNull(serialDate2);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertNotSame(serialDate1, serialDate2);
      assertNotSame(serialDate1, serialDate0);
      assertNotSame(serialDate2, serialDate1);
      assertNotSame(serialDate2, serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(5, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(864, serialDate0.toSerial());
      assertEquals(13, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(13, serialDate1.getDayOfMonth());
      assertEquals(1909, serialDate1.getYYYY());
      assertEquals(3360, serialDate1.toSerial());
      assertEquals(7, serialDate1.getDayOfWeek());
      assertEquals(3442, serialDate2.toSerial());
      assertEquals(3, serialDate2.getDayOfMonth());
      assertEquals(6, serialDate2.getMonth());
      assertEquals(1909, serialDate2.getYYYY());
      assertEquals(5, serialDate2.getDayOfWeek());
      assertNull(serialDate2.getDescription());
      
      comparableArray0[3] = (Comparable<Integer>) serialDate2;
      comparableArray0[4] = (Comparable<Integer>) fixedMillisecond0;
      comparableArray0[5] = (Comparable<Integer>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 82;
      doubleArray1[3] = (double) 6;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (-5432.60815);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2958465;
      doubleArray2[5] = (double) 2;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1438;
      doubleArray1[1] = (double) 1438;
      doubleArray1[2] = (double) 1438;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1438;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1438;
      doubleArray2[3] = (double) 1438;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1438;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 1438;
      doubleArray3[5] = (double) 1438;
      doubleArray3[6] = (double) 1438;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 1438.0, (-2098.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(5625L);
      assertNotNull(long0);
      assertEquals(5625L, (long)long0);
      
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(5625L));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((DefaultMultiValueCategoryDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Long long1 = new Long(1633L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1633L, (long)long1);
      
      Long long2 = new Long(2072L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(2072L, (long)long2);
      
      boolean boolean1 = arrayList0.add(long2);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(long1));
      assertTrue(arrayList0.contains(long2));
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Long long3 = new Long(1633L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1633L, (long)long3);
      
      boolean boolean2 = arrayList1.add(long1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(arrayList1.contains(long1));
      assertFalse(arrayList1.contains(long2));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean2);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      Long long4 = new Long((-1L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      boolean boolean3 = arrayList0.add(long1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(long1.equals((Object)long3));
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertFalse(long1.equals((Object)long4));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(arrayList0.contains((-1L)));
      assertTrue(arrayList0.contains(long2));
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'columnKeys' argument.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList1, false);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNull(range0);
      assertTrue(arrayList1.contains(long1));
      assertFalse(arrayList1.contains(long2));
      assertNotSame(arrayList1, arrayList0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Gz!>:p$^G:yM&e)j", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1533, 1533, 53, 3752, 862);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1533,MONTH=1533,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3752,HOUR_OF_DAY=3752,MINUTE=862,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1313.340301664, Double.NaN, 862, (-2461.32923), 3752);
      assertNotNull(oHLCDataItem0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1533,MONTH=1533,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=53,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3752,HOUR_OF_DAY=3752,MINUTE=862,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "", "%zV1VC H^c7");
      assertNotNull(timePeriodValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("%zV1VC H^c7", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("%zV1VC H^c7", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertTrue(vector2.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = null;
      Long long0 = new Long(1438);
      assertNotNull(long0);
      assertEquals(1438L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long1 = new Long(1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long1));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-609.065387);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-609.065387);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 980.6499449937571;
      doubleArray4[2] = (-609.065387);
      doubleArray4[3] = (-609.065387);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      double double0 = 629.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(629.0, (-3276.4379082));
      assertNotNull(powerFunction2D0);
      assertEquals((-3276.4379082), powerFunction2D0.getB(), 0.01);
      assertEquals(629.0, powerFunction2D0.getA(), 0.01);
      
      int int0 = 884;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-429.4), 1, 2, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals((-3276.4379082), powerFunction2D0.getB(), 0.01);
      assertEquals(629.0, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-429.4), xYSeries0.getMinX(), 0.01);
      assertEquals(629.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(629.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      
      String string0 = "Last";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Last", "Last", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) (-1));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = stack0.add(xYIntervalSeriesCollection0);
      assertTrue(stack0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), 1, (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1223.70055407606, 1, 1, 2207.269643164, 0.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-193.556464871978), (-1.0), 0.0, (-1244.46128952), 2580.802278834046);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate1, oHLCDataItemArray0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(range0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals(3451.7309326840004, range2.getLength(), 0.01);
      assertEquals((-1244.46128952), range2.getLowerBound(), 0.01);
      assertEquals(2207.269643164, range2.getUpperBound(), 0.01);
      assertEquals(481.40417682200007, range2.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(number0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = new Double((-204.44535));
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotNull(double0);
      assertEquals((-204.44535), (double)double0, 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)double0));
      assertTrue(number2.equals((Object)number1));
      assertNotNull(number2);
      assertEquals(0.0, number2);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = defaultKeyedValuesDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) mockDate0, 3043.663417892);
      assertNotNull(pieDataset0);
      assertEquals("Sun Aug 17 07:12:55 GMT 292278994", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Number[][] numberArray0 = new Number[1][9];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      Short short0 = new Short((short)1091);
      assertNotNull(short0);
      assertEquals((short)1091, (short)short0);
      
      numberArray1[3] = (Number) short0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1090.0, range0.getLength(), 0.01);
      assertEquals(1091.0, range0.getUpperBound(), 0.01);
      assertEquals(546.0, range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(list0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1091.0, range1.getLength(), 0.01);
      assertEquals(1091.0, range1.getUpperBound(), 0.01);
      assertEquals(545.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(546.0, range2.getCentralValue(), 0.01);
      assertEquals(1091.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1090.0, range2.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), 1, (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      mockDate0.setTime((-1070L));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1223.70055407606, (-1.0), 1, (-204.44535), (-1244.46128952));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range1, range0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1070.0), range1.getUpperBound(), 0.01);
      assertEquals((-1070.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1070.0), range1.getLowerBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(205.44535, range2.getLength(), 0.01);
      assertEquals((-204.44535), range2.getLowerBound(), 0.01);
      assertEquals((-101.722675), range2.getCentralValue(), 0.01);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(number0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals((-1070.0), number0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 3602.988;
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-2506.4504), range0.getLowerBound(), 0.01);
      assertEquals(3602.988, range0.getUpperBound(), 0.01);
      assertEquals(6109.4384, range0.getLength(), 0.01);
      assertEquals(548.2687999999998, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, (-1.0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset1, 2);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 2);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "", 1.7976931348623157E308, 2);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertNotNull(pieDataset2);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 2);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = xYSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      PieDataset pieDataset3 = DatasetUtilities.createConsolidatedPieDataset(pieDataset2, (Comparable) "", 1.7976931348623157E308);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset1));
      assertTrue(pieDataset3.equals((Object)pieDataset2));
      assertNotNull(pieDataset3);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset2, pieDataset3);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset1);
      assertNotSame(pieDataset3, pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset3);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset3));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset3));
      assertTrue(pieDataset2.equals((Object)pieDataset3));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset1));
      assertTrue(pieDataset3.equals((Object)pieDataset2));
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertNotNull(categoryDataset2);
      assertNotSame(categoryDataset1, categoryDataset2);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset3);
      assertNotSame(pieDataset2, pieDataset3);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset1);
      assertNotSame(pieDataset3, pieDataset0);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), 1, (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1223.70055407606, (-1.0), 1, (-204.44535), (-1244.46128952));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals((-204.44535), range2.getLowerBound(), 0.01);
      assertEquals((-101.722675), range2.getCentralValue(), 0.01);
      assertEquals(205.44535, range2.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotNull(number0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4, 1, 1672.51634874138, 2580.802278834046, 2378.498085388);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(725);
      assertNotNull(spreadsheetDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(725, spreadsheetDate0.toSerial());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(725, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 7, 1970.63, 1, 2, (-309.52538));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(725, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1970.63, range0.getUpperBound(), 0.01);
      assertEquals(985.815, range0.getCentralValue(), 0.01);
      assertEquals(1969.63, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertEquals(2.0, range2.getCentralValue(), 0.01);
      assertEquals(2.0, range2.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(number0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(1.39240928132E12, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      SerialDate serialDate0 = SerialDate.addMonths((-1), spreadsheetDate0);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotNull(serialDate0);
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(725, spreadsheetDate0.toSerial());
      assertEquals(695, serialDate0.toSerial());
      assertEquals(25, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1901, serialDate0.getYYYY());
      assertEquals(11, serialDate0.getMonth());
      
      int int0 = spreadsheetDate0.compare(serialDate0);
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotSame(spreadsheetDate0, serialDate0);
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(30, int0);
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(725, spreadsheetDate0.toSerial());
      assertEquals(695, serialDate0.toSerial());
      assertEquals(25, serialDate0.getDayOfMonth());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1901, serialDate0.getYYYY());
      assertEquals(11, serialDate0.getMonth());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 725;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {2.0, 2.0, 4.0, 1.0, 3.0, 725.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1, 2.0, 3, 4.0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {2.0, 2.0, 4.0, 1.0, 3.0, 725.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC(1068, 1068, 1486, 2147022613, 1068, 1486);
      assertEquals(7763712217966000L, long0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-164.81), 1486, false, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1486.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-164.81), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1486.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-164.81), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals((-164.81), number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), (-1), (-1), (-1), (-1373.891961));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(arrayList0.contains(long0));
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1373.891961);
      doubleArray2[1] = (-1373.891961);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("l[sCH^^uX@sIW4", "l[sCH^^uX@sIW4", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(5625L);
      assertNotNull(long0);
      assertEquals(5625L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Long long1 = new Long((-953L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-953L), (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(5625L));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(5625L));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Long long0 = new Long(2259L);
      assertNotNull(long0);
      assertEquals(2259L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(2259L));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(2259L));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Long long1 = new Long(2259L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2259L, (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(2259L));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(1438);
      assertNotNull(long0);
      assertEquals(1438L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Long long1 = new Long((-2940L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2940L), (long)long1);
      
      Spliterator<DefaultMultiValueCategoryDataset> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = arrayList0.add(long0);
      assertFalse(long0.equals((Object)long1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(long1));
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(884, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-2506.4504), range0.getLowerBound(), 0.01);
      assertEquals(548.2687999999998, range0.getCentralValue(), 0.01);
      assertEquals(6109.4384, range0.getLength(), 0.01);
      assertEquals(3602.988, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, (-1.0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1438);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertEquals("[]", vector2.toString());
      
      boolean boolean0 = vector2.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(1, vector2.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector2, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(1, vector2.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) null);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (-232.8318));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-116.4159), range1.getCentralValue(), 0.01);
      assertEquals(232.8318, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-232.8318), range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, range0, true);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1964.408201851574), (-1964.408201851574));
      assertNotNull(powerFunction2D0);
      assertEquals((-1964.408201851574), powerFunction2D0.getB(), 0.01);
      assertEquals((-1964.408201851574), powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.802278834046, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1964.408201851574), powerFunction2D0.getB(), 0.01);
      assertEquals((-1964.408201851574), powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals(-0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertEquals(-0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2580.802278834046, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[6] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.802278834046;
      doubleArray1[8] = (-1964.408201851574);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 881);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 881, Size: 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(normalDistributionFunction2D0);
      assertFalse(boolean0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Vector<XYIntervalSeriesCollection> vector1 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector1.add(xYIntervalSeriesCollection0);
      assertTrue(vector1.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection1 = null;
      boolean boolean1 = vector1.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector1.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean1);
      assertFalse(vector1.isEmpty());
      assertEquals(2, vector1.size());
      assertEquals(10, vector1.capacity());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1767.856776902542, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(882.928388451271, range0.getCentralValue(), 0.01);
      assertEquals(1766.856776902542, range0.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1868.44, range2.getUpperBound(), 0.01);
      assertEquals(1868.44, range2.getLowerBound(), 0.01);
      assertEquals(1868.44, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(882.928388451271, range3.getCentralValue(), 0.01);
      assertEquals(1766.856776902542, range3.getUpperBound(), 0.01);
      assertEquals(1767.856776902542, range3.getLength(), 0.01);
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1970.63, 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-5.074519316157777E-4), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1970.63, xYSeries0.getMinX(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals((-3.8756013379436356E-4), xYSeries0.getMaxY(), 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (-232.8318));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(232.8318, range1.getLength(), 0.01);
      assertEquals((-116.4159), range1.getCentralValue(), 0.01);
      assertEquals((-232.8318), range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, range0, false);
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
      assertNotSame(range0, range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[3] = (Number) (-1.0);
      numberArray2[1] = (Number) (-1.0);
      numberArray2[2] = (Number) (-1.0);
      numberArray2[3] = (Number) (-1.0);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) (-1.0);
      numberArray3[2] = (Number) (-1.0);
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("u{6 3rltCZVbi#{gU");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals(30000.0, range1.getLength(), 0.01);
      assertEquals((-15000.0), range1.getCentralValue(), 0.01);
      assertEquals(3, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1766.856776902542, range0.getUpperBound(), 0.01);
      assertEquals(882.928388451271, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1767.856776902542, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1868.44, range2.getLowerBound(), 0.01);
      assertEquals(1868.44, range2.getUpperBound(), 0.01);
      assertEquals(1868.44, range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(jDBCCategoryDataset0, false);
      assertNull(range3);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset1, 876);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range4);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1.39240928132E12, range4.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-0.1064700705647715), 3253.1300713638);
      assertNotNull(powerFunction2D0);
      assertEquals((-0.1064700705647715), powerFunction2D0.getA(), 0.01);
      assertEquals(3253.1300713638, powerFunction2D0.getB(), 0.01);
      
      Year year0 = new Year(1);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("1", year0.toString());
      assertEquals(1, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1L, year0.getSerialIndex());
      
      MockDate mockDate0 = new MockDate(1, 9999, 9999, 1081, (-2325));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-9999), 3253.1300713638, (-0.1064700705647715), (-2325), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Sep 27 10:15:00 GMT 2761", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2.0, 0.0, 174.3962, (-2325), 174.3962);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Sep 27 10:15:00 GMT 2761", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("1", year0.toString());
      assertEquals(1, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("1", year0.toString());
      assertEquals(1, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3253.1300713638, range0.getUpperBound(), 0.01);
      assertEquals(3253.236541434365, range0.getLength(), 0.01);
      assertEquals(1626.5118006466178, range0.getCentralValue(), 0.01);
      assertEquals((-0.1064700705647715), range0.getLowerBound(), 0.01);
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.49848433E13, range1.getLowerBound(), 0.01);
      assertEquals(2.49848433E13, range1.getUpperBound(), 0.01);
      assertEquals(2.49848433E13, range1.getCentralValue(), 0.01);
      assertEquals("1", year0.toString());
      assertEquals(1, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-2325.0), range2.getUpperBound(), 0.01);
      assertEquals((-2325.0), range2.getLowerBound(), 0.01);
      assertEquals((-2325.0), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("1", year0.toString());
      assertEquals(1, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = 1090;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1090, 1090);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1090, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1090, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector1 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      boolean boolean0 = vector1.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals(10, vector1.capacity());
      assertEquals(1, vector1.size());
      assertEquals("[null]", vector1.toString());
      assertFalse(vector1.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-4);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      slidingCategoryDataset0.validateObject();
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 400.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 400.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3602.988;
      doubleArray3[1] = 3602.988;
      doubleArray3[2] = 3602.988;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "u{6 3rltCZVbi#{gU", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(10809.964, range0.getLength(), 0.01);
      assertEquals(10808.964, range0.getUpperBound(), 0.01);
      assertEquals(5403.982, range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "P;&m^Aj8t", "y1,S^Tl>eUe_#1~4.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      int int0 = 884;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3602.988;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-2506.4504);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List<Integer> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 552.30942328);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 552.30942328;
      doubleArray1[1] = 552.30942328;
      doubleArray1[2] = 552.30942328;
      doubleArray1[3] = 552.30942328;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 552.30942328;
      doubleArray2[1] = 552.30942328;
      doubleArray2[2] = 552.30942328;
      doubleArray2[3] = 552.30942328;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 552.30942328;
      doubleArray3[1] = 552.30942328;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("cOK;m':p~", "cOK;m':p~", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1767.856776902542, range0.getLength(), 0.01);
      assertEquals(882.928388451271, range0.getCentralValue(), 0.01);
      assertEquals(1766.856776902542, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1868.44, range2.getLowerBound(), 0.01);
      assertEquals(1868.44, range2.getUpperBound(), 0.01);
      assertEquals(1868.44, range2.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Description");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2588.8391619));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-2588.8391619), range3.getUpperBound(), 0.01);
      assertEquals((-2588.8391619), range3.getLowerBound(), 0.01);
      assertEquals((-2588.8391619), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3253.1300713638, 3253.1300713638);
      assertNotNull(powerFunction2D0);
      assertEquals(3253.1300713638, powerFunction2D0.getB(), 0.01);
      assertEquals(3253.1300713638, powerFunction2D0.getA(), 0.01);
      
      Year year0 = new Year(1);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, year0.getYear());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("1", year0.toString());
      
      Year year1 = (Year)year0.previous();
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, year0.getYear());
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("1", year0.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(0, year1.getYear());
      assertEquals(0L, year1.getSerialIndex());
      assertEquals("0", year1.toString());
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, 3253.1300713638, 9999, 9999, year1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 3253.13007136384);
      assertNotNull(powerFunction2D0);
      assertEquals(3253.13007136384, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2506.4504);
      doubleArray1[1] = 3253.13007136384;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-2506.4504);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2933.6834078;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3602.988;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("1e-q73h/!Fe()9Y", "d8BRH?CCbo+l", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 296.2925222063;
      doubleArray1[1] = (-1798.6257048696393);
      doubleArray1[4] = (-2.147483648E9);
      doubleArray1[5] = 148.1323863651;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2.147483648E9);
      doubleArray2[1] = (-2.147483648E9);
      doubleArray2[3] = (-1798.6257048696393);
      doubleArray2[4] = 148.1323863651;
      doubleArray2[5] = (-2.147483648E9);
      doubleArray2[6] = 148.1323863651;
      doubleArray2[7] = 148.1323863651;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.validateObject();
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), (-1), (-1), (-1), (-1));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals("Tue Nov 29 00:00:00 GMT 1898", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      Short short0 = new Short((short)189);
      assertNotNull(short0);
      assertEquals((short)189, (short)short0);
      
      numberArray1[4] = (Number) short0;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray1[7] = null;
      numberArray1[8] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = (Number) short0;
      numberArray3[3] = (Number) short0;
      numberArray3[4] = (Number) short0;
      numberArray3[5] = (Number) short0;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = null;
      Byte byte0 = new Byte((byte)12);
      assertNotNull(byte0);
      assertEquals((byte)12, (byte)byte0);
      
      numberArray4[1] = (Number) byte0;
      numberArray4[2] = (Number) short0;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray4[5] = null;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray0[1] = numberArray2;
      numberArray0[2] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "D#5fiVChc~u", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = timePeriodValuesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("D#5fiVChc~u");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 4;
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) quarter0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("Null item not allowed.");
      assertNotNull(datasetGroup0);
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      taskSeriesCollection0.setGroup(datasetGroup0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "Null item not allowed.");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Null item not allowed.", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1244.46128952);
      doubleArray0[1] = 1971.7997885143561;
      doubleArray0[2] = 1868.44;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2365.065490103732;
      doubleArray0[5] = (-1658.97);
      doubleArray0[6] = 1139.0;
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      doubleArray0[8] = (-1244.46128952);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1244.46128952), 1971.7997885143561, 1868.44, Double.NaN, 2365.065490103732, (-1658.97), 1139.0, Double.POSITIVE_INFINITY, (-1244.46128952)}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1244.46128952), 2.0, 46, 1139.0);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {(-1244.46128952), 1971.7997885143561, 1868.44, Double.NaN, 2365.065490103732, (-1658.97), 1139.0, Double.POSITIVE_INFINITY, (-1244.46128952)}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, 1766.856776902542, 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), 1766.856776902542, 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1766.856776902542, range0.getCentralValue(), 0.01);
      assertEquals(1766.856776902542, range0.getLowerBound(), 0.01);
      assertEquals(1766.856776902542, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(number0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals(1766.856776902542, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1428, 395.626, (-210.1), (-210.1), (-1583.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0, "Null 'visibleSeriesKeys' argument.", (String) null);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(timePeriodValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Null 'visibleSeriesKeys' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Null 'visibleSeriesKeys' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Null 'visibleSeriesKeys' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(884, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4565.782348626783, range0.getLength(), 0.01);
      assertEquals(4565.782348626783, range0.getUpperBound(), 0.01);
      assertEquals(2282.8911743133913, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("D2 I%(Kg>-", "y1,S^Tl>eUe_#1~4.", "P;&m^Aj8t", "Last");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertEquals(0, vector2.size());
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      
      boolean boolean0 = vector2.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      assertEquals(1, vector2.size());
      assertEquals(10, vector2.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      assertTrue(vector0.equals((Object)vector1));
      assertNull(range0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("Null item not allowed.");
      assertNotNull(datasetGroup0);
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      taskSeriesCollection0.setGroup(datasetGroup0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      int int0 = 853;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      comparableArray0[2] = (Comparable<Float>) fixedMillisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = (-1244.46128952);
      doubleArray1[2] = (-1244.46128952);
      doubleArray1[3] = (-1244.46128952);
      doubleArray1[6] = 1794.18722904;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-489.87948028), (-1.0), (-2048.0), 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 1139.0, 0.8, (-760.83558569), 1139.0, (-1229.0));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate1, 1752.530253, 0.8, (-760.83558569), 1139.0, 0.0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem2;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate1, oHLCDataItemArray0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(range0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals(2048.8, range0.getLength(), 0.01);
      assertEquals((-2048.0), range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals((-1023.6), range0.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Year year0 = new Year(mockDate0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Year year1 = (Year)year0.previous();
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertNotSame(year0, year1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1), (-1), year1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains(true));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2.0, 2.0);
      assertNotNull(lineFunction2D0);
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 16, 604.9, 16, bigInteger0);
      assertNotNull(xYSeries0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(34.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1211.8, xYSeries0.getMaxY(), 0.01);
      assertEquals(604.9, xYSeries0.getMaxX(), 0.01);
      assertEquals(16.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(16, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1438);
      assertNotNull(spreadsheetDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1438, spreadsheetDate0.toSerial());
      assertEquals(8, spreadsheetDate0.getDayOfMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1438, spreadsheetDate0.toSerial());
      assertEquals(8, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2958465, (-3063.7630865587), 4, 1438, 1530.2670607712967);
      assertNotNull(oHLCDataItem0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1903, spreadsheetDate0.getYYYY());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1438, spreadsheetDate0.toSerial());
      assertEquals(8, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-83.9085), (-1.0), Double.POSITIVE_INFINITY, (-1), 1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (4.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNotNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, true);
      assertNotNull(xYSeries0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, number0);
      assertNull(xYDataItem0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (double) 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double double0 = 1766.856776902542;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      String string0 = ">=g_lG!4@<)?0^2PL";
      Second second0 = Second.parseSecond("");
      assertNull(second0);
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Long>) null;
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 59);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(59, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1896);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 107);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[6][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getKeyCount(integer0);
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(200.0, range1.getUpperBound(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(200.0, range1.getLength(), 0.01);
      assertEquals(6, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-5585.992), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-5585.992), powerFunction2D0.getA(), 0.01);
      
      PowerFunction2D powerFunction2D1 = new PowerFunction2D(1364.331483478482, Double.NEGATIVE_INFINITY);
      assertFalse(powerFunction2D1.equals((Object)powerFunction2D0));
      assertNotNull(powerFunction2D1);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D1.getB(), 0.01);
      assertEquals(1364.331483478482, powerFunction2D1.getA(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 884);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 402.1394142804585);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Vector<XYIntervalSeriesCollection> vector1 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 871);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(871, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector1 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      boolean boolean0 = vector1.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SerialDate serialDate0 = SerialDate.createInstance(865);
      assertNotNull(serialDate0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, serialDate0.getMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(865, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      
      SerialDate serialDate1 = SerialDate.addMonths(865, serialDate0);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(serialDate1);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, serialDate0.getMonth());
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(865, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertEquals(6, serialDate1.getDayOfWeek());
      assertEquals(1974, serialDate1.getYYYY());
      assertNull(serialDate1.getDescription());
      assertEquals(27194, serialDate1.toSerial());
      assertEquals(14, serialDate1.getDayOfMonth());
      assertEquals(6, serialDate1.getMonth());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(xYIntervalSeriesCollection0);
      assertTrue(vector0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(oHLCDataItem0, "a5L@n&JPp~W~p4nsS", "Null 'visibleSeriesKeys' argument.");
      assertNotNull(timePeriodValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("a5L@n&JPp~W~p4nsS", timePeriodValues0.getDomainDescription());
      assertEquals("Null 'visibleSeriesKeys' argument.", timePeriodValues0.getRangeDescription());
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1868.44;
      doubleArray1[1] = 1868.44;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1766.856776902542;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      defaultKeyedValues2DDataset1.validateObject();
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (-1.0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, 1868.44, (-1745));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 2);
      assertNotNull(range0);
      assertEquals(1870.44, range0.getUpperBound(), 0.01);
      assertEquals(935.72, range0.getCentralValue(), 0.01);
      assertEquals(1869.44, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range1);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      PieDataset pieDataset3 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 2000);
      assertFalse(pieDataset3.equals((Object)pieDataset2));
      assertFalse(pieDataset3.equals((Object)pieDataset0));
      assertFalse(pieDataset3.equals((Object)pieDataset1));
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(pieDataset3);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset0);
      assertNotSame(pieDataset3, pieDataset1);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 3602.988;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-2506.4504);
      doubleArray1[6] = (double) 884;
      doubleArray1[7] = 2580.244748626783;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Last", "Last", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(548.2687999999998, range0.getCentralValue(), 0.01);
      assertEquals((-2506.4504), range0.getLowerBound(), 0.01);
      assertEquals(6109.4384, range0.getLength(), 0.01);
      assertEquals(3602.988, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(2, doubleArray0.length);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray2, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray2.length);
      
      int int0 = (-1504);
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, (-1504), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains(0));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 52, 0, 9, 0, 9);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 9, 604.9, 9, bigInteger0);
      assertNotNull(xYSeries0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-605.9), xYSeries0.getMinY(), 0.01);
      assertEquals((-10.0), xYSeries0.getMaxY(), 0.01);
      assertEquals(9.0, xYSeries0.getMinX(), 0.01);
      assertEquals(604.9, xYSeries0.getMaxX(), 0.01);
      assertEquals(9, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      Second second1 = Second.parseSecond(">=g_lG!4@<)?0^2PL");
      assertNull(second1);
      
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      Number[][] numberArray0 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) categoryToPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("JDBCPieDataset - unknown data type");
      assertNotNull(datasetGroup0);
      assertEquals("JDBCPieDataset - unknown data type", datasetGroup0.getID());
      
      categoryToPieDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("JDBCPieDataset - unknown data type", datasetGroup0.getID());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("v", 59, 0);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      SynthButtonUI synthButtonUI0 = new SynthButtonUI();
      assertNotNull(synthButtonUI0);
      
      matrixSeries0.removePropertyChangeListener(synthButtonUI0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) comparableArray0[1], 2008.2907523826584, 638);
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number1);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 983.8338989645, 3149, 7, 983.8338989645, (-148.9627646168166));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 983.8338989645, (-148.9627646168166), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-148.9627646168166));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      long long0 = MockDate.UTC(851, 851, 851, 7, 2, 7);
      assertEquals(26957343727000L, long0);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate1, (-1951.3978), (-3938.455883134589), 4851.90698, (-1951.3978), 1868.44);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3142.0, range0.getLength(), 0.01);
      assertEquals(1578.0, range0.getCentralValue(), 0.01);
      assertEquals(3149.0, range0.getUpperBound(), 0.01);
      assertEquals(7.0, range0.getLowerBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      
      int int0 = oHLCDataItem2.compareTo(oHLCDataItem1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertEquals(0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      
      boolean boolean0 = vector2.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals(10, vector2.capacity());
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      assertEquals(1, vector2.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector2, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, vector2.capacity());
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      assertEquals(1, vector2.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) null);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector1, true);
      assertTrue(vector1.equals((Object)vector0));
      assertNull(range2);
      assertFalse(vector1.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector1, vector0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range3);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = 9;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1260), 9);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1), 1868.44);
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1868.44, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1), 9.0, 5, mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(xYSeries0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1868.44, lineFunction2D0.getSlope(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(9.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(16814.96, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1869.44), xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(5, xYSeries0.getItemCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("", "", "org.jfree.data.function.NormalDistributionFunction2D", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-547.19342973255), 2580.244748626783, 884, quarter0);
      assertNotNull(xYSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-0.5584651710944825), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-547.19342973255), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2580.244748626783, xYSeries0.getMaxX(), 0.01);
      assertEquals(884, xYSeries0.getItemCount());
      assertEquals(0.5710335368746385, xYSeries0.getMaxY(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 4, quarter0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(3, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(3, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range1);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "$3>BO f7UX>");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = new Double(1.7976931348623157E308);
      assertNotNull(double0);
      assertEquals(1.7976931348623157E308, (double)double0, 0.01);
      
      boolean boolean1 = true;
      Stream<DefaultMultiValueCategoryDataset> stream0 = vector0.parallelStream();
      assertNotNull(stream0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = histogramDataset0.equals(defaultMultiValueCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      int int0 = 751;
      MockDate mockDate0 = new MockDate(1966, 1966, 1376, 751, 1966, 2);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1966, 1966, day0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(int0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range2 = Range.expandToInclude(range1, (-83.16));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals((-83.16), range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range3 = Range.combine(range0, range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertNotNull(range3);
      assertSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector1 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(1, 335);
      assertNotNull(vector1);
      assertEquals(1, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector1, range0, false);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertNull(range4);
      assertNotSame(range0, range3);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals("Thu Sep 08 15:46:02 GMT 4033", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(65123711162000L, minute0.getFirstMillisecond());
      assertEquals(15, minute0.getHourValue());
      assertEquals(65123711162000L, minute0.getLastMillisecond());
      assertEquals(46, minute0.getMinute());
      assertEquals(65123711162000L, day0.getFirstMillisecond());
      assertEquals(65123711162000L, day0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1965, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = null;
      try {
        polynomialFunction2D0 = new PolynomialFunction2D((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'coefficients' argument
         //
         verifyException("org.jfree.data.function.PolynomialFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("7iQ2\"Xm&*o%f", ">T", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotNull(timePeriodValuesCollection1);
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection1.getDomainBounds(false);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNull(range0);
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("7iQ2\"Xm&*o%f");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNotNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      String string0 = "Null 'rowKey' argument.";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.lookup(vector0, arrayList0);
      assertNull(locale0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale1 = new Locale("Null 'rowKey' argument.", "Null 'rowKey' argument.");
      assertNotNull(locale1);
      assertEquals("null 'rowkey' argument.", locale1.getLanguage());
      assertEquals("null 'rowkey' argument._NULL 'ROWKEY' ARGUMENT.", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("NULL 'ROWKEY' ARGUMENT.", locale1.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Null 'rowKey' argument.", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) bigInteger0, (-1.0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) bigInteger0);
      assertNotNull(pieDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) bigInteger0, 109.478);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(854, "org.jfree.data.time.TimeSeriesTableModel", (-199), 855, 854, 1397, 878, (-199), 0, 855);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -199
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = Range.shift(range1, 4.0, false);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(404.0, range2.getUpperBound(), 0.01);
      assertEquals(404.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(404.0, range2.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range3 = Range.expandToInclude(range1, 3131.1672608925874);
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3131.1672608925874, range3.getUpperBound(), 0.01);
      assertEquals(2731.1672608925874, range3.getLength(), 0.01);
      assertEquals(1765.5836304462937, range3.getCentralValue(), 0.01);
      assertEquals(400.0, range3.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, true);
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertNull(range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range5 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range5);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 884);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(884, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "The number of row keys does not match the number of rows in the data array.", (double) 884);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 884, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 5287.5007919);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = null;
      boolean boolean0 = vector2.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(1, vector2.size());
      assertFalse(vector2.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertTrue(vector0.equals((Object)vector1));
      assertNull(range1);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1438);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = histogramDataset0.equals(defaultMultiValueCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.0, 2557);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2557.0, lineFunction2D0.getSlope(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.0), 2557, 2557, quarter0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedHashSet<XYIntervalSeriesCollection> linkedHashSet0 = new LinkedHashSet<XYIntervalSeriesCollection>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = arrayList0.addAll((Collection<? extends XYIntervalSeriesCollection>) linkedHashSet0);
      assertFalse(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range2);
      assertEquals(0, histogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      int int0 = (-4);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "The number of row keys does not match the number of rows in the data array.", (KeyedValues) defaultPieDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<XYIntervalSeriesCollection> arrayList1 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList1.stream();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(stream0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList1.spliterator();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(spliterator0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList1, true);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNull(range0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1428, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1428);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(1, 1073741824, 1073741824, 1, 305, 16);
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertNotNull(timeSeries0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 1);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1, 1, 1, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 5287.5007919);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      
      boolean boolean0 = vector2.add((XYIntervalSeriesCollection) null);
      assertTrue(boolean0);
      assertEquals(1, vector2.size());
      assertEquals(10, vector2.capacity());
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector2, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, vector2.size());
      assertEquals(10, vector2.capacity());
      assertFalse(vector2.isEmpty());
      assertEquals("[null]", vector2.toString());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertTrue(vector0.equals((Object)vector1));
      assertNull(range2);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1438);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 5287.5007919, 1, 1438, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Vector<XYIntervalSeriesCollection> vector1 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector1, true);
      assertNull(range0);
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector1, true);
      assertNull(range1);
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (-2147483647));
      assertNotNull(pieDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-978));
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1), 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 1.0, 2557, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1387, 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1387, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 174.3962);
      assertNull(range0);
      assertEquals(1387, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertEquals(0, vector2.size());
      assertTrue(vector2.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector2.add(xYIntervalSeriesCollection0);
      assertTrue(vector2.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(1, vector2.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(60L, 1438);
      assertNotNull(simpleTimePeriod0);
      assertEquals(1438L, simpleTimePeriod0.getEndMillis());
      assertEquals(60L, simpleTimePeriod0.getStartMillis());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) simpleTimePeriod0, (-2592.276947278));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(1438L, simpleTimePeriod0.getEndMillis());
      assertEquals(60L, simpleTimePeriod0.getStartMillis());
      
      Date date0 = simpleTimePeriod0.getStart();
      assertNotNull(date0);
      assertEquals(1438L, simpleTimePeriod0.getEndMillis());
      assertEquals(60L, simpleTimePeriod0.getStartMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-491.905181247), 1387);
      assertNotNull(lineFunction2D0);
      assertEquals(1387.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-491.905181247), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0, 1438, 1387, simpleTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (List) vector0, true);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(pieDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 5829, 5829);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-1), (-1224.0751476941), 5829, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MockDate mockDate0 = new MockDate(16, (-1971), 1, (-250), (-2084022060), 0);
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu May 26 01:00:00 GMT 2212", mockDate0.toString());
      assertEquals((-131928649200000L), quarter0.getLastMillisecond());
      assertEquals((-131928649200000L), quarter0.getFirstMillisecond());
      assertEquals(2212, quarter0.getYearValue());
      assertEquals(8850L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertNotNull(timeSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu May 26 01:00:00 GMT 2212", mockDate0.toString());
      assertEquals((-131928649200000L), quarter0.getLastMillisecond());
      assertEquals((-131928649200000L), quarter0.getFirstMillisecond());
      assertEquals(2212, quarter0.getYearValue());
      assertEquals(8850L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu May 26 01:00:00 GMT 2212", mockDate0.toString());
      assertEquals((-131928649200000L), quarter0.getLastMillisecond());
      assertEquals((-131928649200000L), quarter0.getFirstMillisecond());
      assertEquals(2212, quarter0.getYearValue());
      assertEquals(8850L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1426.849), 174.3962);
      assertNotNull(lineFunction2D0);
      assertEquals(174.3962, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1426.849), lineFunction2D0.getIntercept(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0, 2.0, (-2084022060), minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(oHLCDataItem0, (String) null, "First");
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(timePeriodValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("First", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("First", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertTrue(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("First", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNull(timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 5287.5007919);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector2, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertTrue(vector0.equals((Object)vector1));
      assertNull(range2);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1438);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 5287.5007919, 1, 1438, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 9);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("FREQUENCY");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 9);
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9.0, range3.getCentralValue(), 0.01);
      assertEquals(9.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(9.0, range3.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("#", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = new Range((-132.51634922346224), (-132.51634922346224));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-132.51634922346224), range0.getUpperBound(), 0.01);
      assertEquals((-132.51634922346224), range0.getLowerBound(), 0.01);
      assertEquals((-132.51634922346224), range0.getCentralValue(), 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Long long0 = new Long(1852L);
      assertNotNull(long0);
      assertEquals(1852L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList1, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-132.51634922346224), range0.getUpperBound(), 0.01);
      assertEquals((-132.51634922346224), range0.getLowerBound(), 0.01);
      assertEquals((-132.51634922346224), range0.getCentralValue(), 0.01);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 88, 93, 1, 88);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'visibleSeriesKeys' argument.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(88));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = jDBCXYDataset0.getRangeBounds(true);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) arrayList0, range2, true);
      assertTrue(range2.equals((Object)range1));
      assertNull(range3);
      assertFalse(arrayList0.contains(88));
      assertNotSame(range2, range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 93;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1436.315366363242), 93.0, (-1452), mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1868.44, 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-11), (-11), 9);
      assertNotNull(mockGregorianCalendar0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, 1766.856776902542);
      assertNotNull(lineFunction2D0);
      assertEquals(1766.856776902542, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, (-1986.172143), 0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2193.7005151249846, 2177.97323292, 2113.3606, 551.406395443, (-939.296));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), (-1.7976931348623157E308), (-1650.66), 551.406395443, 1.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals((-1), int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals((-1650.66), number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(2177.97323292, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "Null 'seriesKey' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=Null 'seriesKey' argument.,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'seriesKey' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=Null 'seriesKey' argument.,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Null 'seriesKey' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1428, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1428);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(1, 1073741824, 1073741824, 1, 305, 16);
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(57727L, quarter0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertNotNull(timeSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertTrue(boolean0);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Gz!>:p$^G:yM&e)j", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(yIntervalSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      categoryDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1907.7915197659609, 1907.7915197659609, (-1.0), 1907.7915197659609, 1907.7915197659609);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      VectorSeriesCollection vectorSeriesCollection1 = (VectorSeriesCollection)vectorSeriesCollection0.clone();
      assertTrue(vectorSeriesCollection1.equals((Object)vectorSeriesCollection0));
      assertNotNull(vectorSeriesCollection1);
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      assertNotSame(vectorSeriesCollection1, vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, vectorSeriesCollection1.getSeriesCount());
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertTrue(vectorSeriesCollection0.equals((Object)vectorSeriesCollection1));
      assertNotSame(vectorSeriesCollection0, vectorSeriesCollection1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, false);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1907.7915197659609;
      doubleArray0[4] = 1907.7915197659609;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long((-953L));
      assertNotNull(long0);
      assertEquals((-953L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.contains(long0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Object[][][] objectArray0 = new Object[0][0][0];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Double double0 = new Double(907.3296329);
      assertNotNull(double0);
      assertEquals(907.3296329, (double)double0, 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, arrayList0, true);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1438, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 5287.5007919);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYIntervalSeriesCollection> vector2 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector2);
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector2, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, vector2.size());
      assertEquals(10, vector2.capacity());
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertTrue(vector0.equals((Object)vector1));
      assertNull(range2);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-1813));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1438, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range3);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range4);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(0, (-1), (-12), 1742, (-12), 1624, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (-1757));
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 7);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range3);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 681.571024652114;
      doubleArray1[1] = 681.571024652114;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.xy.DefaultWindDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2000));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(normalDistributionFunction2D0);
      assertFalse(boolean0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) fixedMillisecond0);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1907.7915197659609, 1907.7915197659609, (-1.0), 1907.7915197659609, 1907.7915197659609);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNotNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, false);
      assertNull(range2);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1907.7915197659609;
      doubleArray0[4] = 1907.7915197659609;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1907.7915197659609;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1907.7915197659609, 1907.7915197659609, (-1.0), (-1.0), 1907.7915197659609}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 4645.618308051859, (-1.0), 2549, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1428;
      doubleArray0[1] = (double) 1428;
      doubleArray0[2] = (double) 1428;
      doubleArray0[3] = (double) 167;
      doubleArray0[4] = (double) 87;
      doubleArray0[5] = (double) 87;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1428.0, 1428.0, 1428.0, 167.0, 87.0, 87.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 167.0, (-2588.8391619), 167, 167.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(2193.7005151249846, 1.0, "Qs");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(2194.2005151249846, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      defaultMultiValueCategoryDataset0.add(stack0, "Qs", "Qs");
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(2194.2005151249846, range0.getUpperBound(), 0.01);
      assertEquals(2193.7005151249846, range0.getCentralValue(), 0.01);
      assertEquals(2193.2005151249846, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      int int0 = jDBCCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)object0));
      assertNotNull(pieDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(boolean1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "[^o|4-'";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3936), "[^o|4-'");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("[^o|4-'", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=[^o|4-',offset=-3936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3936), simpleTimeZone0.getRawOffset());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("[^o|4-'", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=[^o|4-',offset=-3936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3936), simpleTimeZone0.getRawOffset());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("[^o|4-'", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=[^o|4-',offset=-3936,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3936), simpleTimeZone0.getRawOffset());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double double0 = 5515.24067527;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      
      int int0 = (-2364);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 5515.24067527, 5515.24067527, (-2364), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 9);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertNull(range2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1.7976931348623157E308), "Null 'seriesKey' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(6.283185307179586, 6.283185307179586, "VUC`d6");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.7976931348623157E308, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.7976931348623157E308, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1058.152), 3992.94, (-1.0), (-1.0), 1664.665721);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1794.18722904, (-1.0), 1868.44, 1794.18722904);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1794.18722904, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1984795492));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("EkHV&1;`)p~l_z");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(timePeriodValuesCollection0);
      assertFalse(boolean0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      String string0 = "";
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, 5703.68576035973);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset1));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(defaultMultiValueCategoryDataset2);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset2);
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(defaultMultiValueCategoryDataset2.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset1));
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset2, defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-783.98471827239), (-783.98471827239), (-2247.8), (-2043.0), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1244.0), 1869.44, (-2247.8), 1262.62572855982, (-2184.1494715129884));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1869.44, 1.0, (-2184.1494715129884), Double.NEGATIVE_INFINITY, 0.0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-2107.57355103363), 979.53823042, (-2043.0), (-1.0), (-783.98471827239));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-2043.0), 1869.44, Double.NEGATIVE_INFINITY);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      MockDate mockDate1 = new MockDate((-1496L));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate1, Double.NaN, Double.NaN, 2.0, 2.0, Double.NaN);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem5);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate1.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, (-783.98471827239), 0.0, (-2530.0627867447038), 0.0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem6);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate1, 0.0, 508.4504646199, 1319.9649033875307, 0.0, 509.675712882);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(oHLCDataItem7);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate1.toString());
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 23, (-2764));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2764), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 2, 23);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2764), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 918.775120291);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNull(range0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2764), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      boolean boolean1 = vector0.add(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset1));
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset1, (-866));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(boolean2);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) vector0, range0, false);
      assertNull(range1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("Null item not allowed.");
      assertNotNull(datasetGroup0);
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      taskSeriesCollection0.setGroup(datasetGroup0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Null item not allowed.", datasetGroup0.getID());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      comparableArray0[2] = (Comparable<Float>) fixedMillisecond0;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, false);
      assertNull(range1);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1794.18722904, (-1.0), 1868.44, 1794.18722904);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, false);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 125.468604888118);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate1 = new MockDate((-1363), 1054, 1428, 17, 5786, 697);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 1907.7915197659609, 125.468604888118, Double.POSITIVE_INFINITY, 283.716266741, 697);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Oct 02 17:37:37 GMT 628", mockDate1.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNull(range1);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      int int0 = jDBCCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1471.43522076;
      doubleArray1[3] = 768.482192347;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 768.482192347;
      doubleArray2[1] = 768.482192347;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1471.43522076;
      doubleArray3[1] = 768.482192347;
      doubleArray3[2] = 768.482192347;
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) vector0, false);
      assertNull(range2);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1766.856776902542, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1767.856776902542, range0.getLength(), 0.01);
      assertEquals(1766.856776902542, range0.getUpperBound(), 0.01);
      assertEquals(882.928388451271, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertNotNull(number0);
      assertNotSame(mockDate0, mockDate1);
      assertEquals((-1.0), number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(882.928388451271, range1.getCentralValue(), 0.01);
      assertEquals(1767.856776902542, range1.getLength(), 0.01);
      assertEquals(1766.856776902542, range1.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1766.856776902542;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-1658.97);
      doubleArray2[2] = 1766.856776902542;
      doubleArray2[3] = 174.3962;
      doubleArray2[4] = (-1658.97);
      doubleArray2[5] = (-1658.97);
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 174.3962;
      doubleArray4[1] = 174.3962;
      doubleArray4[2] = (-1244.46128952);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 174.3962;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 1868.44;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 1438.0;
      doubleArray6[5] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 1438.0;
      doubleArray7[1] = 1139.0;
      doubleArray7[2] = 1868.44;
      doubleArray7[3] = (-1658.97);
      doubleArray7[4] = (-886.6816485978);
      doubleArray7[5] = (-1.0);
      doubleArray7[6] = 174.3962;
      doubleArray7[7] = (-3621.509);
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2467.60050564;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      int int0 = jDBCCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray1[3] = 2467.60050564;
      doubleArray1[4] = 2467.60050564;
      doubleArray1[5] = (-2033.774);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2467.60050564;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "bin width", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(216.91325282000003, range0.getCentralValue(), 0.01);
      assertEquals((-2033.774), range0.getLowerBound(), 0.01);
      assertEquals(4501.37450564, range0.getLength(), 0.01);
      assertEquals(2467.60050564, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("EkHV&1;`)p~l_z", "7--=#e1{bfF!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      vectorSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = (-287);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-287));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(defaultPieDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertNotNull(double0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1794.18722904, (-1.0), 1868.44, 1794.18722904);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1794.18722904, (-1244.46128952), (-1658.97), 1139.0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertTrue(mockDate0.equals((Object)object0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      assertNotNull(range0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(1795.18722904, range0.getLength(), 0.01);
      assertEquals(1794.18722904, range0.getUpperBound(), 0.01);
      assertEquals(896.59361452, range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(mockDate0, object0);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2467.60050564;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "bin width", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(216.91325282000003, range0.getCentralValue(), 0.01);
      assertEquals((-2033.774), range0.getLowerBound(), 0.01);
      assertEquals(4501.37450564, range0.getLength(), 0.01);
      assertEquals(2467.60050564, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(2467.60050564, range1.getUpperBound(), 0.01);
      assertEquals(4501.37450564, range1.getLength(), 0.01);
      assertEquals(216.91325282000003, range1.getCentralValue(), 0.01);
      assertEquals((-2033.774), range1.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(453, 7, Integer.MAX_VALUE);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, 0.0, 2, 2941.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Feb 08 00:00:00 GMT 5881964", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-136.0), Integer.MAX_VALUE, (-112.108301396613), 2941.0, 0.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Sat Feb 08 00:00:00 GMT 5881964", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2617.128242385258), 7, (-2124.775), 0.5, 306.6600451579611);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Sat Feb 08 00:00:00 GMT 5881964", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, (OHLCDataItem[]) null);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sat Feb 08 00:00:00 GMT 5881964", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("EkHV&1;`)p~l_z", "7--=#e1{bfF!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 7);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2107208519));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(0L));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(1, 212, 1, 883, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      
      Minute minute0 = new Minute(1, hour0);
      assertNotNull(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(2, minute1.getMinute());
      assertEquals(19, minute1.getHourValue());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean1 = arrayList1.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList1.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, true);
      assertNull(range1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k5", "k5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("k5");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertTrue(arrayList0.contains(long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      MockDate mockDate0 = new MockDate(1, 212, 1, 883, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(1, hour0);
      assertNotNull(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1, minute1, timeZone0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals("Mon Oct 07 19:01:00 GMT 1918", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(19, hour0.getHour());
      assertEquals((-1616821140000L), hour0.getFirstMillisecond());
      assertEquals((-1616821140000L), hour0.getLastMillisecond());
      assertEquals(19, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(19, minute1.getHourValue());
      assertEquals(2, minute1.getMinute());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayList<XYDatasetTableModel> arrayList1 = new ArrayList<XYDatasetTableModel>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(xYDatasetTableModel0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean1 = arrayList1.add(xYDatasetTableModel0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList1.contains(xYDatasetTableModel0));
      assertTrue(boolean1);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2467.60050564;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList1, range1, true);
      assertNull(range2);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = Range.shift(range1, 4.0, false);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4.0, range2.getUpperBound(), 0.01);
      assertEquals(4.0, range2.getCentralValue(), 0.01);
      assertEquals(4.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range3 = Range.expandToInclude(range1, 3148.304);
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(3148.304, range3.getLength(), 0.01);
      assertEquals(3148.304, range3.getUpperBound(), 0.01);
      assertEquals(1574.152, range3.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, true);
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertNull(range4);
      assertNotSame(range1, range2);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range5 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range5);
      
      String string0 = "";
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1428, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1428);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-866));
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      int int0 = jDBCCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) vector0, true);
      assertNull(range2);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) vector0, range1, true);
      assertNull(range3);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object[][][] objectArray0 = new Object[0][5][4];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(linkedList0, objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      String string0 = "Column key (";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "Column key (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = new Double(1.7976931348623157E308);
      assertNotNull(double0);
      assertEquals(1.7976931348623157E308, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2033.774);
      doubleArray1[2] = 2467.60050564;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2033.774);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2467.60050564;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "bin width", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2467.60050564, range0.getUpperBound(), 0.01);
      assertEquals((-2033.774), range0.getLowerBound(), 0.01);
      assertEquals(4501.37450564, range0.getLength(), 0.01);
      assertEquals(216.91325282000003, range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("EkHV&1;`)p~l_z", "7--=#e1{bfF!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 7);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2107208519));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "7--=#e1{bfF!", Double.POSITIVE_INFINITY);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1428, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1428);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      MockDate mockDate0 = new MockDate(1, 1073741824, 1073741824, 1, 305, 16);
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      assertNotNull(timeSeries0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      assertEquals(14431, quarter0.getYearValue());
      assertEquals(57727L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2916437382655516000L, quarter0.getLastMillisecond());
      assertEquals(2916437382655516000L, quarter0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1428, 1428);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1428);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1428, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1428, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(1, 1073741824, 1073741824, 1, 305, 16);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1, 2538.19829, 1428, 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Aug 04 06:05:16 GMT 92420191", mockDate0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = new Double((-3742.0592957098));
      assertNotNull(double0);
      assertEquals((-3742.0592957098), (double)double0, 0.01);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNull(range1);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = (-16);
      int int1 = (-1984795492);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-16), (-1984795492));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1984795492), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-16), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getStartValue((-16), (-1984795492), 1600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-585.14073);
      doubleArray1[1] = (-1244.46128952);
      doubleArray1[2] = (-585.14073);
      doubleArray1[3] = (-1244.46128952);
      doubleArray1[4] = (-579.7413747004);
      doubleArray1[5] = (-1244.46128952);
      doubleArray1[6] = 1794.18722904;
      doubleArray1[7] = (-474.2242185142);
      doubleArray1[8] = 1868.44;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1868.44;
      doubleArray2[1] = (-585.14073);
      doubleArray2[2] = 235.8662477957;
      doubleArray1[4] = (-474.2242185142);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1868.44;
      doubleArray3[1] = 1868.44;
      doubleArray3[2] = 550.0;
      doubleArray3[3] = 235.8662477957;
      doubleArray0[0] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1868.44, 1766.856776902542, (-1.0), 1868.44, 1766.856776902542);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Iterator<XYIntervalSeriesCollection> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, stack0, false);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("permitted.  Try using the addOrUpdate() method.");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.remove(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 1382);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1382, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 1, 945);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(945, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1382, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 945;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1382;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 3602.988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-2009.5221277402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ListIterator<DefaultMultiValueCategoryDataset> listIterator0 = vector0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = 1.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 170;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, Double.NEGATIVE_INFINITY, 170);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-932.9206157944);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1597.3601;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(7986.8005, range1.getUpperBound(), 0.01);
      assertEquals((-4664.603078972), range1.getLowerBound(), 0.01);
      assertEquals(1661.0987105140002, range1.getCentralValue(), 0.01);
      assertEquals(12651.403578972, range1.getLength(), 0.01);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2145931997), (-2452));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2145931997), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2452), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) (-2452));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2145931997), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2452), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 7, 453);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.656192954849588, 7, 2, 0.0, 453);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 7, 1868.44, 1794.18722904, 1.656192954849588, (-136.0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-783.98471827239), 866.2860242, 125.468604888118, 866.2860242, (-1244.46128952));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNull(range0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNull(range1);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertEquals("Tue Oct 27 00:00:00 GMT 1903", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-932.9206157944);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1597.3601;
      doubleArray1[3] = 5515.24067527;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1736.50672624);
      doubleArray1[7] = (-1833.0);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-932.9206157944);
      doubleArray2[1] = (-2802.3013);
      doubleArray2[2] = 1597.3601;
      doubleArray2[3] = (-1833.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1597.3601;
      doubleArray2[6] = (-932.9206157944);
      doubleArray2[7] = 117.0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1597.3601;
      doubleArray3[1] = 1597.3601;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 432.61481;
      doubleArray3[4] = (-1736.50672624);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1736.50672624);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-932.9206157944);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2642.0;
      doubleArray4[4] = 117.0;
      doubleArray4[5] = (-932.9206157944);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-2802.3013);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1597.3601;
      doubleArray5[4] = 2642.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      doubleArray0[6] = doubleArray4;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-1833.0);
      doubleArray7[1] = (-2447.5451959413977);
      doubleArray7[2] = 1597.3601;
      doubleArray7[3] = 2642.0;
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = 1597.3601;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = (-2802.3013);
      doubleArray0[7] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 2642.0;
      doubleArray8[1] = 2642.0;
      doubleArray8[2] = (-932.9206157944);
      doubleArray0[8] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, true);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(range0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(5515.24067527, 5515.24067527);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(normalDistributionFunction2D0);
      assertFalse(boolean0);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(5515.24067527, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2009.5221277402));
      assertNull(range0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2145931997), (-2452));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2452), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2145931997), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[10];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertEquals(10, doubleArray0.length);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3637);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 563.918618835;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 563.918618835;
      doubleArray2[1] = 563.918618835;
      doubleArray2[2] = 563.918618835;
      doubleArray2[3] = 563.918618835;
      doubleArray2[4] = 563.918618835;
      doubleArray2[5] = 563.918618835;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 563.918618835;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 563.918618835;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      jDBCCategoryDataset0.setSelectionState(defaultCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 563.918618835;
      doubleArray3[6] = 563.918618835;
      doubleArray3[7] = 563.918618835;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 1539.7082277871;
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range1);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Minute minute0 = Minute.parseMinute("Duplicate items in 'columnKeys'.");
      assertNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2145931997), (-2452));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2452), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2145931997), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) (-2452));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2452), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2145931997), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-2452), (-4050));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertNotNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Gz!>:p$^G:yM&e)j", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset1, 3004, 3004);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3004, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3004, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range2);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(3004, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3004, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(range3);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNull(number0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = true;
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-783.98471827239), (-783.98471827239), (-2247.8), (-2043.0), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1244.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1869.44;
      doubleArray1[3] = (-1244.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2043.0);
      doubleArray1[6] = (-12.2);
      doubleArray1[7] = (-783.98471827239);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1869.44;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.util.ResourceBundleWrapper", "[F}*W_ }O$J'X", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-86.77999999999997), range0.getCentralValue(), 0.01);
      assertEquals(3912.44, range0.getLength(), 0.01);
      assertEquals((-2043.0), range0.getLowerBound(), 0.01);
      assertEquals(1869.44, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1.0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertEquals((-2044.0), range1.getLowerBound(), 0.01);
      assertEquals(3912.44, range1.getLength(), 0.01);
      assertEquals(1868.44, range1.getUpperBound(), 0.01);
      assertEquals((-87.77999999999997), range1.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<XYIntervalSeriesCollection> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      
      Spliterator<XYIntervalSeriesCollection> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5703.68576035973;
      doubleArray0[1] = 5703.68576035973;
      doubleArray0[2] = 5703.68576035973;
      doubleArray0[3] = 5703.68576035973;
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5703.68576035973;
      doubleArray2[1] = 5703.68576035973;
      doubleArray2[2] = 5703.68576035973;
      doubleArray2[3] = 5703.68576035973;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'key' argument.", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(5703.68576035973, range0.getLength(), 0.01);
      assertEquals(5703.68576035973, range0.getUpperBound(), 0.01);
      assertEquals(2851.842880179865, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 34.44405396;
      doubleArray1[1] = (-32.83911);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-4330.3876);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[21];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-4330.3876);
      doubleArray2[1] = (-32.83911);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-4330.3876);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-4330.3876);
      doubleArray2[6] = (-32.83911);
      doubleArray2[7] = (-4330.3876);
      doubleArray2[8] = (-4330.3876);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3H]$", "3H]$", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(34.44405396, number0);
      assertEquals(5, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      int int0 = 188;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 188);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 188, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-3187.2), Double.NaN, "Can't evaluate the year.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      vector0.add(defaultMultiValueCategoryDataset0);
      vector0.add(defaultMultiValueCategoryDataset0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      range0.toString();
      boolean boolean0 = false;
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3253.13007136384, 3253.13007136384, 3253.13007136384, Double.POSITIVE_INFINITY, 3253.13007136384);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 3253.13007136384, 1.7976931348623157E308, 3253.13007136384, 3253.13007136384);
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-164.655122608586));
      DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3253.13007136384;
      doubleArray1[1] = 3253.13007136384;
      doubleArray1[2] = 3253.13007136384;
      doubleArray1[3] = (-164.655122608586);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 3253.13007136384;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (-164.655122608586);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-164.655122608586);
      doubleArray5[1] = (-183.77838);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-164.655122608586);
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1.7976931348623157E308;
      doubleArray6[3] = 3253.13007136384;
      doubleArray6[4] = (-183.77838);
      doubleArray6[5] = 3253.13007136384;
      doubleArray6[6] = (-164.655122608586);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-164.655122608586);
      doubleArray7[1] = 3253.13007136384;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = (-183.77838);
      doubleArray7[5] = Double.POSITIVE_INFINITY;
      doubleArray7[6] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-183.77838);
      doubleArray8[1] = (-183.77838);
      doubleArray8[2] = 2.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = 2.0;
      doubleArray9[1] = 3253.13007136384;
      doubleArray9[2] = (-183.77838);
      doubleArray9[3] = (-183.77838);
      doubleArray9[4] = (-164.655122608586);
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2137.87636766);
      doubleArray1[2] = 3243.51;
      doubleArray1[3] = 5703.68576035973;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2137.87636766);
      doubleArray2[1] = 5703.68576035973;
      doubleArray2[2] = (-2137.87636766);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 3243.51;
      doubleArray3[2] = 5703.68576035973;
      doubleArray3[3] = (-2137.87636766);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 5703.68576035973;
      doubleArray4[1] = (-2137.87636766);
      doubleArray4[2] = 5703.68576035973;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimePeriodValue", "Og%UInifD\"$", doubleArray0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2137.87636766));
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, Double.NEGATIVE_INFINITY);
      categoryDataset0.addChangeListener(xYBarDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-2137.87636766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2137.87636766);
      doubleArray1[2] = 3243.51;
      doubleArray1[3] = 5703.68576035973;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2137.87636766);
      doubleArray2[2] = (-2137.87636766);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 3243.51;
      doubleArray3[2] = 5703.68576035973;
      doubleArray3[3] = (-2137.87636766);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 5703.68576035973;
      doubleArray4[1] = (-2137.87636766);
      doubleArray4[2] = 5703.68576035973;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimePeriodValue", "Og%UInifD\"$", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(14650.88152071946, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      timePeriodValuesCollection0.getDomainBounds(false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      arrayList0.stream();
      defaultMultiValueCategoryDataset0.clone();
      arrayList0.spliterator();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 5703.68576035973;
      doubleArray1[1] = 5703.68576035973;
      doubleArray1[2] = 5703.68576035973;
      doubleArray1[3] = 5703.68576035973;
      doubleArray1[4] = 5703.68576035973;
      doubleArray1[5] = 5703.68576035973;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 5703.68576035973;
      doubleArray2[1] = 5703.68576035973;
      doubleArray2[2] = 5703.68576035973;
      doubleArray2[3] = 5703.68576035973;
      doubleArray2[4] = 5703.68576035973;
      doubleArray2[5] = 125.468604888118;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 7, 453);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.656192954849588, 7, 2, 0.0, 453);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, Double.NEGATIVE_INFINITY);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (-1334.81672429), 402);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 7, 453);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.656192954849588, 7, 2, 0.0, 453);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 7, 1868.44, 1794.18722904, 1.656192954849588, (-136.0));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Second second0 = new Second();
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      Second.parseSecond(">=g_lG!4@<)?0^2PL");
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) second0;
      Number[][] numberArray0 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) categoryToPieDataset0);
      DatasetGroup datasetGroup0 = new DatasetGroup("JDBCPieDataset - unknown data type");
      categoryToPieDataset0.setGroup(datasetGroup0);
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("v", 59, 0);
      SynthButtonUI synthButtonUI0 = new SynthButtonUI();
      matrixSeries0.removePropertyChangeListener(synthButtonUI0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) comparableArray0[1], 2008.2907523826584, 638);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.xy.IntervalhYDelegate", "org.jfree.data.xy.IntervalhYDelegate", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2009.5221277402));
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SerialDate serialDate0 = SerialDate.createInstance(3697);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) serialDate0);
      Object[][][] objectArray0 = new Object[0][0][0];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      String string0 = "gN=\\ik";
      Number[][] numberArray0 = new Number[9][1];
      Number[] numberArray1 = new Number[4];
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartX(1, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 34.44405396;
      doubleArray1[1] = (-32.83911);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-4330.3876);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-4330.3876);
      doubleArray2[1] = (-32.83911);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-4330.3876);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-4330.3876);
      doubleArray2[6] = (-32.83911);
      doubleArray2[7] = (-4330.3876);
      doubleArray2[8] = (-4330.3876);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-4330.3876);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-32.83911);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 34.44405396;
      doubleArray4[1] = 34.44405396;
      doubleArray4[2] = 34.44405396;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 34.44405396;
      doubleArray4[6] = (-32.83911);
      doubleArray4[7] = 34.44405396;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-32.83911);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-32.83911);
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3H]$", "3H]$", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(34.44405396, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) bigInteger0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jDBCCategoryDataset0.addValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 0;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", "", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2137.87636766);
      doubleArray1[2] = 3243.51;
      doubleArray1[3] = 5703.68576035973;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2137.87636766);
      doubleArray2[1] = 5703.68576035973;
      doubleArray2[2] = (-2137.87636766);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 3243.51;
      doubleArray3[2] = 5703.68576035973;
      doubleArray3[3] = (-2137.87636766);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 5703.68576035973;
      doubleArray4[1] = (-2137.87636766);
      doubleArray4[2] = 5703.68576035973;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimePeriodValue", "Og%UInifD\"$", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(14650.88152071946, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-932.9206157944);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1597.3601;
      doubleArray1[3] = 5515.24067527;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1736.50672624);
      doubleArray1[7] = (-1833.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-932.9206157944);
      doubleArray2[1] = (-2802.3013);
      doubleArray2[2] = 1597.3601;
      doubleArray2[3] = (-1833.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1597.3601;
      doubleArray2[6] = (-932.9206157944);
      doubleArray2[7] = 117.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1597.3601;
      doubleArray3[1] = 1597.3601;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 432.61481;
      doubleArray3[4] = (-1736.50672624);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-1736.50672624);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-932.9206157944);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2642.0;
      doubleArray4[4] = 117.0;
      doubleArray4[5] = (-932.9206157944);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-2802.3013);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1597.3601;
      doubleArray5[4] = 2642.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 2642.0;
      doubleArray7[1] = 2642.0;
      doubleArray7[2] = (-2802.3013);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 5515.24067527;
      doubleArray7[5] = (-1833.0);
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 432.61481;
      doubleArray7[8] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = (-1833.0);
      doubleArray8[1] = (-2447.5451959413977);
      doubleArray8[2] = 1597.3601;
      doubleArray8[3] = 2642.0;
      doubleArray8[4] = (-1.0);
      doubleArray8[5] = 1597.3601;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (-2802.3013);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = 2642.0;
      doubleArray9[1] = 2642.0;
      doubleArray9[2] = (-932.9206157944);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1373.891961), 1223.70055407606, (-1), (-1), (-1373.891961));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Long long0 = new Long((-1));
      arrayList0.add(long0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      vector0.add(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, stack0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeries taskSeries0 = new TaskSeries("permitted.  Try using the addOrUpdate() method.");
      taskSeriesCollection0.remove(taskSeries0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 1382);
      Comparable<DefaultIntervalCategoryDataset> comparable0 = null;
      YIntervalSeries yIntervalSeries0 = null;
      try {
        yIntervalSeries0 = new YIntervalSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) vector0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3004, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1362.0;
      doubleArray2[1] = 4190.6716439;
      doubleArray2[2] = 2405.73069439;
      doubleArray2[3] = (-4629.888);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 4190.6716439;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 4190.6716439;
      doubleArray5[1] = 1362.0;
      doubleArray5[2] = 2405.73069439;
      doubleArray5[3] = (-4629.888);
      doubleArray5[4] = 1362.0;
      doubleArray5[5] = 4190.6716439;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 2405.73069439;
      doubleArray6[1] = (-4629.888);
      doubleArray6[2] = 2405.73069439;
      doubleArray6[3] = 2405.73069439;
      doubleArray6[4] = (-4629.888);
      doubleArray6[5] = (-4629.888);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 1362.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 3253.13007136384);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 7, 453);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.656192954849588, 7, 2, 0.0, 453);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 7, 1868.44, 1794.18722904, 1.656192954849588, (-136.0));
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-783.98471827239), 866.2860242, 125.468604888118, 866.2860242, (-1244.46128952));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("EkHV&1;`)p~l_z", "7--=#e1{bfF!", doubleArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 7);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2107208519));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 563.918618835;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 563.918618835;
      doubleArray2[1] = 563.918618835;
      doubleArray2[2] = 563.918618835;
      doubleArray2[3] = 563.918618835;
      doubleArray2[4] = 563.918618835;
      doubleArray2[5] = 563.918618835;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 563.918618835;
      doubleArray3[1] = 563.918618835;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 563.918618835;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 563.918618835;
      doubleArray3[6] = 563.918618835;
      doubleArray3[7] = 563.918618835;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 1539.7082277871;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = (-551.6084184331771);
      doubleArray5[2] = 563.918618835;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 1539.7082277871;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = 1539.7082277871;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", ">}Cn", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 88, 93, 1, 88);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'visibleSeriesKeys' argument.");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.previous();
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      year0.next();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (double) 88;
      doubleArray0[3] = (double) (-9999);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 88;
      doubleArray0[8] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(regularTimePeriod1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      Week week0 = new Week(dateArray0[0], timeZone0);
      DefaultPieDataset defaultPieDataset0 = null;
      try {
        defaultPieDataset0 = new DefaultPieDataset((KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-709), 0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = "#iy;e4C";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("#iy;e4C", "#iy;e4C", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1383.0);
      doubleArray1[1] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-71.66);
      doubleArray2[1] = (-1383.0);
      doubleArray2[2] = (-1383.0);
      doubleArray2[3] = (-1383.0);
      doubleArray2[4] = 0.5;
      doubleArray2[5] = (-1383.0);
      doubleArray2[6] = (-1383.0);
      doubleArray2[7] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.5;
      doubleArray3[1] = (-1383.0);
      doubleArray3[2] = (-71.66);
      doubleArray3[3] = (-1383.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-71.66);
      doubleArray4[1] = 2467.60050564;
      doubleArray4[2] = 0.5;
      doubleArray4[3] = (-71.66);
      doubleArray4[4] = (-71.66);
      doubleArray4[5] = (-1383.0);
      doubleArray4[6] = 0.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.5;
      doubleArray5[1] = (-1383.0);
      doubleArray5[2] = 2467.60050564;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-71.66);
      doubleArray6[1] = (-1383.0);
      doubleArray6[2] = 2467.60050564;
      doubleArray6[3] = (-1383.0);
      doubleArray6[4] = 2467.60050564;
      doubleArray6[5] = (-71.66);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-71.66);
      doubleArray7[2] = 0.5;
      doubleArray7[3] = (-71.66);
      doubleArray7[4] = 0.5;
      doubleArray7[5] = 0.5;
      doubleArray7[6] = 0.5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 2467.60050564;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-71.66);
      doubleArray8[3] = (-71.66);
      doubleArray8[4] = (-2033.774);
      doubleArray8[5] = (-1383.0);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (-71.66);
      doubleArray8[8] = (-1383.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = (-1383.0);
      doubleArray9[1] = (-1383.0);
      doubleArray9[2] = (-71.66);
      doubleArray9[3] = (-1383.0);
      doubleArray9[4] = 0.5;
      doubleArray9[5] = (-1383.0);
      doubleArray9[6] = 2467.60050564;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "[^/-w", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Quarter quarter0 = new Quarter(2, 37);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 0.0, (-498.29), 2, quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      Second second0 = null;
      try {
        second0 = new Second((-5328), (-3031), 0, 0, (-3031), 2107);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      SerialDate serialDate0 = SerialDate.createInstance(2);
      SerialDate.addYears(2, serialDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SerialDate.stringToWeekdayCode("org.jfree.data.time.Hour");
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getPercentComplete((-2308), 1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 441.192603;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 441.192603;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 441.192603;
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 441.192603;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.5;
      doubleArray5[1] = 441.192603;
      doubleArray5[2] = 441.192603;
      doubleArray5[3] = 0.5;
      doubleArray5[4] = 441.192603;
      doubleArray5[5] = 441.192603;
      doubleArray5[6] = 0.5;
      doubleArray5[7] = 0.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = 0.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.5;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = 2241.0607633739633;
      doubleArray7[4] = 2.0;
      doubleArray7[5] = 2.0;
      doubleArray7[6] = 2087.28480778;
      doubleArray7[7] = 441.192603;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 2087.28480778;
      doubleArray8[1] = 0.5;
      doubleArray8[2] = 2087.28480778;
      doubleArray8[3] = 2241.0607633739633;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 2.0;
      doubleArray8[6] = 2087.28480778;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = (-1.0);
      doubleArray9[3] = 2.0;
      doubleArray9[4] = (-1.0);
      doubleArray9[5] = 2241.0607633739633;
      doubleArray9[6] = 2087.28480778;
      doubleArray9[7] = 1.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray1[5] = (-1492.664935955);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1492.664935955);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 2675.1080453;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-2.147483648E9);
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (-1.7976931348623157E308);
      doubleArray4[3] = (-1.7976931348623157E308);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1492.664935955);
      doubleArray5[1] = (-1.7976931348623157E308);
      doubleArray5[2] = (-1492.664935955);
      doubleArray5[3] = (-1.7976931348623157E308);
      doubleArray5[4] = (-4850.76970582759);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (-1492.664935955);
      doubleArray6[1] = (-4850.76970582759);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-4850.76970582759);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-2.147483648E9);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-2.147483648E9);
      doubleArray7[5] = Double.POSITIVE_INFINITY;
      doubleArray7[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = (-4850.76970582759);
      doubleArray8[2] = 2675.1080453;
      doubleArray8[3] = Double.NEGATIVE_INFINITY;
      doubleArray8[4] = (-2.147483648E9);
      doubleArray8[5] = (-2.147483648E9);
      doubleArray8[6] = Double.POSITIVE_INFINITY;
      doubleArray8[7] = (-1.7976931348623157E308);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "#i<JL&t", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-783.98471827239), (-783.98471827239), (-2247.8), (-2043.0), 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1244.0), 0.0, (-2247.8), 1261.31703777117, (-2184.1494715129884));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, 1.0, (-2184.1494715129884), Double.NEGATIVE_INFINITY, 0.0);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-2107.57355103363), 979.53823042, (-2043.0), (-1.0), (-783.98471827239));
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-2043.0), 0.0, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      MockDate mockDate1 = new MockDate((-1496L));
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate1, Double.NaN, Double.NaN, 2.0, 2.0, Double.NaN);
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 0.0, 1.0, 0.0, (-2513.667003), 0.0);
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate1, 0.0, 508.4504646199, 1319.9649033875307, 0.0, 509.675712882);
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(1.392409282816E12, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 0.0;
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = (-1331.0);
      doubleArray5[7] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = Double.NEGATIVE_INFINITY;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1331.0);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-1331.0);
      doubleArray8[3] = (-1.0);
      doubleArray8[4] = (-1.0);
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (-1331.0);
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      MockDate mockDate0 = new MockDate(1294, 1294, 1414);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Day day0 = new Day(serialDate0);
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      int int0 = 717;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.getXDate(2, 717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 717, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      arrayList0.stream();
      defaultMultiValueCategoryDataset0.clone();
      arrayList0.spliterator();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(0, 0, 0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      arrayList0.stream();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.clone();
      arrayList0.spliterator();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
