/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 15:33:19 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Cursor;
import java.awt.Dimension;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 0, (-2414.0992785680487), (-2414.0992785680487));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertNotNull(spreadsheetDate0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.5, range1.getCentralValue(), 0.01);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3, Integer.MAX_VALUE);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(Integer.MAX_VALUE, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1919.62364731, 1919.62364731, "BmKNV^R>3G");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(1920.12364731, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1919.12364731, range0.getLowerBound(), 0.01);
      assertEquals(1919.62364731, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[0] = (Comparable<Object>) millisecond0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, regularTimePeriod0.getSerialIndex());
      assertEquals(1L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1L, regularTimePeriod0.getMiddleMillisecond());
      assertNotNull(regularTimePeriod0);
      
      comparableArray0[1] = (Comparable<Object>) regularTimePeriod0;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org.jfree.data.xy.XYDatasetTableModel", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      MockDate mockDate0 = new MockDate(3960, 501, (-181));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3699.35006), (-1922.63832), 1.0, (-1922.63832), (-941.61629905461));
      assertEquals("Tue Apr 02 00:00:00 GMT 5901", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-3699.35006), 1.39240928132E12, (-1930.687), 501, (-1922.63832));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Tue Apr 02 00:00:00 GMT 5901", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(501);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(15, spreadsheetDate0.getDayOfMonth());
      assertEquals(501, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(15, spreadsheetDate0.getDayOfMonth());
      assertEquals(501, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-1), (-3699.35006), 3960, 4, 444.37722);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getMonth());
      assertEquals(15, spreadsheetDate0.getDayOfMonth());
      assertEquals(501, spreadsheetDate0.toSerial());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[4] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals("Tue Apr 02 00:00:00 GMT 5901", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(taskSeriesCollection0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Tue Apr 02 00:00:00 GMT 5901", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate1 = new SpreadsheetDate(2);
      assertFalse(spreadsheetDate1.equals((Object)spreadsheetDate0));
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, spreadsheetDate1.getYYYY());
      assertEquals(1, spreadsheetDate1.getMonth());
      assertEquals(1, spreadsheetDate1.getDayOfMonth());
      assertEquals(2, spreadsheetDate1.toSerial());
      assertEquals(2, spreadsheetDate1.getDayOfWeek());
      assertNull(spreadsheetDate1.getDescription());
      assertNotNull(spreadsheetDate1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("Tue Apr 02 00:00:00 GMT 5901", mockDate0.toString());
      assertEquals(1.240582176E14, range0.getUpperBound(), 0.01);
      assertEquals(1.2266580831868E14, range0.getLength(), 0.01);
      assertEquals(6.272531344066E13, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-599.0F));
      assertEquals((-599.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (List) stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 1, 1, 9, 1);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals((-1901400659000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1901400659000L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(simpleTimePeriod0);
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals((-1901400659000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1901400659000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) stack0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate1, boxAndWhiskerItem0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals((-1901400659000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1901400659000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals((-1901400659000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1901400659000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Fri Oct 01 01:09:01 GMT 1909", mockDate0.toString());
      assertEquals((-1901400659000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1901400659000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<DefaultOHLCDataset> linkedList1 = new LinkedList<DefaultOHLCDataset>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add((DefaultOHLCDataset) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = new MockDate(999, 31, (-2375), (-1322), 0, 31);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Millisecond millisecond1 = new Millisecond(mockDate0, timeZone0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Dec 03 22:00:31 GMT 2894", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0L, millisecond1.getMillisecond());
      assertEquals(29187813631000L, millisecond1.getFirstMillisecond());
      assertEquals(29187813631000L, millisecond1.getLastMillisecond());
      assertNotNull(millisecond1);
      
      String string0 = millisecond1.toString();
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond1, millisecond0);
      assertEquals("Fri Dec 03 22:00:31 GMT 2894", string0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Dec 03 22:00:31 GMT 2894", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0L, millisecond1.getMillisecond());
      assertEquals(29187813631000L, millisecond1.getFirstMillisecond());
      assertEquals(29187813631000L, millisecond1.getLastMillisecond());
      assertNotNull(string0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(46, (-1322));
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1323), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList1, true);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, linkedList1.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1323), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      LinkedList<DefaultOHLCDataset> linkedList2 = new LinkedList<DefaultOHLCDataset>();
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList2, true);
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(0, linkedList2.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-599.0F));
      assertEquals((-599.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains((-599.0F)));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (List) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-599.0), range0.getCentralValue(), 0.01);
      assertEquals((-599.0), range0.getUpperBound(), 0.01);
      assertEquals((-599.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((-599.0F)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-599.0), range0.getCentralValue(), 0.01);
      assertEquals((-599.0), range0.getUpperBound(), 0.01);
      assertEquals((-599.0), range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.39240928132E12, number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = xYTaskDataset0.getX(1, 1);
      assertEquals(1.0, number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(number0);
      
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(float0, float0, float0, float0, number0, float0, float0, byte0, arrayList0);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      defaultBoxAndWhiskerXYDataset0.add((Date) null, boxAndWhiskerItem0);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient((byte)45);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(45.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(45.0, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Fou3", 73, 73);
      assertEquals(73, matrixSeries0.getRowCount());
      assertEquals(73, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5329, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(73, matrixSeries0.getRowCount());
      assertEquals(73, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5329, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(73, matrixSeries0.getRowCount());
      assertEquals(73, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5329, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-2452.05884128294), (-2452.05884128294), (-2452.05884128294));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(2511.05884128294, range0.getLength(), 0.01);
      assertEquals((-2452.05884128294), range0.getLowerBound(), 0.01);
      assertEquals((-1196.52942064147), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      String string0 = "org.jfree.chart.util.TableOrder";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("org.jfree.chart.util.TableOrder", "Duplicate items in 'columnKeys'.3", "org.jfree.chart.util.TableOrder", "Duplicate items in 'columnKeys'.3");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-947), (-947));
      assertEquals((-947), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-947), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Ft5ou1", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("1", 63, 63);
      assertEquals(63, matrixSeries0.getRowCount());
      assertEquals(63, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3969, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(63, matrixSeries0.getRowCount());
      assertEquals(63, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3969, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(62.0, number0);
      assertEquals(63, matrixSeries0.getRowCount());
      assertEquals(63, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3969, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertEquals(63, matrixSeries0.getRowCount());
      assertEquals(63, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3969, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(59, 9792, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-643.0548031), Double.POSITIVE_INFINITY, 0, 9792, (-2414.0992785680487));
      assertEquals("Fri Feb 28 00:00:00 GMT 2775", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 28 00:00:00 GMT 2775", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(taskSeriesCollection0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 28 00:00:00 GMT 2775", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertNotNull(spreadsheetDate0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = linkedList0.add(byte0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains((byte)37));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains((byte)37));
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("Fri Feb 28 00:00:00 GMT 2775", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.54083392E13, range0.getCentralValue(), 0.01);
      assertEquals(2.54083392E13, range0.getUpperBound(), 0.01);
      assertEquals(2.54083392E13, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains((byte)37));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertEquals("Fri Feb 28 00:00:00 GMT 2775", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.54083392E13, range0.getCentralValue(), 0.01);
      assertEquals(2.54083392E13, range0.getUpperBound(), 0.01);
      assertEquals(2.54083392E13, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-785.26);
      doubleArray1[1] = (-2414.460338503983);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1599.8601692519915), range0.getCentralValue(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertEquals((-785.26), range0.getUpperBound(), 0.01);
      assertEquals(1629.2003385039832, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-2414.460338503983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Ft5ou1", 1, 1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Negative 'factor' argument.", "Negative 'factor' argument.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) "Negative 'factor' argument.", (Comparable) "Negative 'factor' argument.");
      assertEquals(2, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(200.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Negative 'factor' argument.");
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 808);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertNotNull(timePeriodValues1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("BFt5ou1", 29, 29);
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeries0.setKey("BFt5ou1");
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(28.0, range0.getLength(), 0.01);
      assertEquals(14.0, range0.getCentralValue(), 0.01);
      assertEquals(28.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(14.0, range1.getCentralValue(), 0.01);
      assertEquals(28.0, range1.getUpperBound(), 0.01);
      assertEquals(28.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(29, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(29, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(841, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(28.0, range2.getLength(), 0.01);
      assertEquals(14.0, range2.getCentralValue(), 0.01);
      assertEquals(28.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertFalse(stack0.contains((short) (-1)));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-1)));
      assertTrue(boolean0);
      assertEquals("[-1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((short) (-1)));
      assertEquals("[-1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertNull(range0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Ft5ou1");
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNotNull(timePeriodValues0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-1345.16000665656));
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains((-1.0F)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains((-1.0F)));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (-1.0F), (double) (-1.0F), (Comparable) float0, (Comparable) float0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(quarter0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0, 4.0}, doubleArray1, 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(string0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, 1.0, "~");
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.validateObject();
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      defaultCategoryDataset0.setValue((Number) 9999, (Comparable) year0, (Comparable) year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      Date date0 = year0.getStart();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      defaultCategoryDataset0.incrementValue(1.5, year0, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(10000.5, range0.getLowerBound(), 0.01);
      assertEquals(10000.5, range0.getCentralValue(), 0.01);
      assertEquals(10000.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1896, 825, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(824, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1397.798857716), (-1130.50310568), "BmKNV^R>3G");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1397.798857716), range0.getCentralValue(), 0.01);
      assertEquals((-1397.298857716), range0.getUpperBound(), 0.01);
      assertEquals((-1398.298857716), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(double0);
      
      Date[] dateArray0 = new Date[8];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(")(");
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(3);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      Date date0 = mockSimpleDateFormat0.parse(")(", parsePosition0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(")(", mockSimpleDateFormat0.toPattern());
      assertEquals(")(", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(3, parsePosition0.getErrorIndex());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=3]", parsePosition0.toString());
      assertNull(date0);
      
      dateArray0[0] = null;
      SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance(815);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(815, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertNotNull(spreadsheetDate0);
      
      Date date1 = spreadsheetDate0.toDate();
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(815, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertEquals(25, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      
      dateArray0[1] = date1;
      Date date2 = mockSimpleDateFormat0.parse(")(", parsePosition0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(")(", mockSimpleDateFormat0.toPattern());
      assertEquals(")(", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(3, parsePosition0.getErrorIndex());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=3]", parsePosition0.toString());
      assertNull(date2);
      
      dateArray0[2] = null;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[3] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0, 3, 2, (-3956), 1, 2);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[4] = (Date) mockDate1;
      Date date3 = mockSimpleDateFormat0.get2DigitYearStart();
      assertTrue(date3.equals((Object)date1));
      assertNotSame(date3, date1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date3.toString());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(")(", mockSimpleDateFormat0.toPattern());
      assertEquals(")(", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotNull(date3);
      
      dateArray0[5] = date3;
      Locale locale0 = new Locale("xR*B#d/0", "Null 'description' argument.", ")(");
      assertEquals("xr*b#d/0", locale0.getLanguage());
      assertEquals("NULL 'DESCRIPTION' ARGUMENT.", locale0.getCountry());
      assertEquals("xr*b#d/0_NULL 'DESCRIPTION' ARGUMENT._)(", locale0.toString());
      assertEquals(")(", locale0.getVariant());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat(")(", locale0);
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertNotNull(mockSimpleDateFormat1);
      
      Date date4 = mockSimpleDateFormat1.get2DigitYearStart();
      assertFalse(mockSimpleDateFormat1.equals((Object)mockSimpleDateFormat0));
      assertTrue(date4.equals((Object)date1));
      assertTrue(date4.equals((Object)date3));
      assertNotSame(mockSimpleDateFormat1, mockSimpleDateFormat0);
      assertNotSame(date4, date3);
      assertNotSame(date4, date1);
      assertEquals("xr*b#d/0", locale0.getLanguage());
      assertEquals("NULL 'DESCRIPTION' ARGUMENT.", locale0.getCountry());
      assertEquals("xr*b#d/0_NULL 'DESCRIPTION' ARGUMENT._)(", locale0.toString());
      assertEquals(")(", locale0.getVariant());
      assertEquals(")(", mockSimpleDateFormat1.toPattern());
      assertTrue(mockSimpleDateFormat1.isLenient());
      assertEquals(")(", mockSimpleDateFormat1.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date4.toString());
      assertNotNull(date4);
      
      dateArray0[6] = date4;
      Instant instant0 = MockInstant.ofEpochMilli((-2254L));
      assertNotNull(instant0);
      
      Date date5 = Date.from(instant0);
      assertFalse(date5.equals((Object)date4));
      assertFalse(date5.equals((Object)date1));
      assertFalse(date5.equals((Object)date3));
      assertNotSame(date5, date4);
      assertNotSame(date5, date1);
      assertNotSame(date5, date3);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date5.toString());
      assertNotNull(date5);
      
      dateArray0[7] = date5;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 5;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(double0, dateArray0, doubleArray1, doubleArray2, doubleArray1, doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(8, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 5.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, 5.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (double) (-6L), "qh8{HK*\"(s^-MZ|/8");
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals((-6.0), double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, linkedList0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[25][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(25, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 999);
      assertEquals(25, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(999, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 25
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Week week0 = new Week(213, (-1));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-43), week0.getWeek());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-96L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate1 = new MockDate(22, (-3344), 213);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 22, (-1433.8401609612), 22, (-3344), 22);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Sun Nov 29 00:00:00 GMT 1643", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 213, 1, 2160.57622167607, Double.POSITIVE_INFINITY, 1.0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(dateArray0[0], (-1043.73), (-2528.909884581), 2160.57622167607, 53, 3453.490779);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(4, dateArray0.length);
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 22, 1, (-1043.73), (-390.6), 1460.158868);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-43), week0.getWeek());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-96L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Date date0 = defaultOHLCDataset0.getXDate(1237, 1);
      assertFalse(date0.equals((Object)mockDate1));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotSame(date0, mockDate1);
      assertSame(date0, mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-43), week0.getWeek());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-96L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[1] = date0;
      MockDate mockDate2 = new MockDate(15, (-7), 213);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)date0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertNotNull(mockDate2);
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate();
      assertTrue(mockDate3.equals((Object)mockDate0));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertTrue(mockDate3.equals((Object)date0));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertNotNull(mockDate3);
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 213;
      doubleArray0[2] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(4, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 213.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-43), week0.getWeek());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-96L), week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (double) 0L, "qh8{HK*\"(s^-MZ|/8");
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("nhcPslena<<", 1, 942);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(942, matrixSeries0.getItemCount());
      assertEquals(942, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(942, matrixSeries0.getItemCount());
      assertEquals(942, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(942, matrixSeries0.getItemCount());
      assertEquals(942, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 59, (-2414.0992785680487), (-2414.0992785680487));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(59.0, range1.getCentralValue(), 0.01);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.2039776E12), range2.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range2.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate(7, 7, 952, 7, 7);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.5, 719.8673338, 2221.404, 2846.2578699191563, (-451.526));
      assertEquals("Wed Mar 09 07:07:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.8, 2221.404, 0.8, (-2379.4043), 2221.404);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Wed Mar 09 07:07:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 2221.404, (-451.526), 3508.9680513, (-451.526), 0.8);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Wed Mar 09 07:07:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertEquals(2220.604, range1.getLength(), 0.01);
      assertEquals(2221.404, range1.getUpperBound(), 0.01);
      assertEquals(1111.102, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(2, 0, 59);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(59, (-1302), (-1302));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Sun Dec 06 00:00:00 GMT 1846", mockDate1.toString());
      assertNotNull(instant0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 17.095267763554, (-1917.500439138772), Double.NaN, (-538.1), (-538.1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Sun Dec 06 00:00:00 GMT 1846", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = defaultOHLCDataset0.getX((-313), 6);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals((-3883766400000L), number0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 0.0F, (double) 0.0F, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains((-1.0F)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains((-1.0F)));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (-1.0F), (double) (-1.0F), (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains((-1.0F)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(instant0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-2414.460338503983), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(oHLCDataItemArray0, oHLCDataItemArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2623), "The number of column keys does not match the number of columns in the data array.");
      assertEquals((-2623), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=-2623,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertEquals((-2623), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=-2623,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(606L);
      assertEquals(606L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(606L, fixedMillisecond0.getSerialIndex());
      assertEquals(606L, fixedMillisecond0.getLastMillisecond());
      assertEquals(606L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (double) 606L, "The number of column keys does not match the number of columns in the data array.");
      assertEquals((-2623), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=-2623,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(606L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(606L, fixedMillisecond0.getSerialIndex());
      assertEquals(606L, fixedMillisecond0.getLastMillisecond());
      assertEquals(606L, fixedMillisecond0.getMiddleMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-2623));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 15);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1008), (-1));
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1008), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2466.945);
      doubleArray0[1] = (double) 31;
      histogramDataset0.addSeries((Comparable) "Ft5ou1", doubleArray0, 762);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2466.945), 31.0}, doubleArray0, 0.01);
      assertEquals(1, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertEquals(1, histogramDataset0.getSeriesCount());
      assertEquals((-2465.3059284776905), range0.getLowerBound(), 0.01);
      assertEquals((-1217.9725), range0.getCentralValue(), 0.01);
      assertEquals(2494.666856955381, range0.getLength(), 0.01);
      assertEquals(29.360928477690322, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "Ft5ou1");
      assertNotNull(pieDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1736, "The number of column keys does not match the number of columns in the data array.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=1736,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1736, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=1736,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1736, simpleTimeZone0.getRawOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(605L);
      assertEquals(605L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(605L, fixedMillisecond0.getLastMillisecond());
      assertEquals(605L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(605L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (double) 1736, "The number of column keys does not match the number of columns in the data array.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("The number of column keys does not match the number of columns in the data array.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=The number of column keys does not match the number of columns in the data array.,offset=1736,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1736, simpleTimeZone0.getRawOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(605L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(605L, fixedMillisecond0.getLastMillisecond());
      assertEquals(605L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(605L, fixedMillisecond0.getSerialIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1414);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1414, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-31.932951F));
      assertEquals((-31.932951F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (-31.932951F), (double) (-31.932951F), (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains((-31.932951F)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-31.932950973510742), range0.getCentralValue(), 0.01);
      assertEquals((-31.932950973510742), range0.getLowerBound(), 0.01);
      assertEquals((-31.932950973510742), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(322, 23);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("v #<JKqP08vUT%+/4N7", 31, 31);
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(30.0, number1);
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-45));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-45), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-45), categoryToPieDataset0.getExtractIndex());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(15.0, range1.getCentralValue(), 0.01);
      assertEquals(30.0, range1.getUpperBound(), 0.01);
      assertEquals(30.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Ft5ou1", 31, 31);
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(31, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(matrixSeries0.getDescription());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2405.649263323825));
      assertEquals((-17405.649263323823), range0.getCentralValue(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-32405.649263323823), range0.getLowerBound(), 0.01);
      assertEquals((-2405.649263323825), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList0.add(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(arrayList0.contains(float1));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1.0), 1.5, (Comparable) float1, (Comparable) float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-2.5), range0.getLowerBound(), 0.01);
      assertEquals(3.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = 1514;
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Day day1 = Day.parseDay("1");
      assertNull(day1);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Null 'rowData' argument.", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(0, 59, 59);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Sat Jan 28 00:00:00 GMT 1905", mockDate0.toString());
      assertNotNull(instant0);
      
      Second second1 = (Second)second0.next();
      assertFalse(second1.equals((Object)second0));
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotNull(second1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 1427.9642336883724, Double.NaN, Double.NaN, 1427.9642336883724);
      assertEquals("Sat Jan 28 00:00:00 GMT 1905", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertFalse(second0.equals((Object)second1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertFalse(second0.equals((Object)second1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotSame(second0, second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertFalse(second0.equals((Object)second1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotSame(second0, second1);
      assertEquals((-2.0488896E12), (double)double0, 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-2611.94117494));
      assertEquals((-2611.9412F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.NaN, (-1174.0), (Comparable) float0, (Comparable) week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-912.67134);
      doubleArray1[1] = (-880.29);
      doubleArray1[2] = (-73.562108);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 2371.7427662071364;
      doubleArray1[5] = (-744.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-744.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-744.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2371.7427662071364;
      doubleArray4[1] = 2371.7427662071364;
      doubleArray4[2] = (-912.67134);
      doubleArray4[3] = (-744.0);
      doubleArray4[4] = (-912.67134);
      doubleArray4[5] = (-744.0);
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = 2371.7427662071364;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("v #<JKqP08vUT%+/4N7", 31, 31);
      assertEquals(31, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(31, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(31, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(30.0, number1);
      assertEquals(31, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(31, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(961, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = timeTableXYDataset0.getDomainBounds(true);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("v #<JKqP08vUT%+/4N7", 31, 31);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(30.0, number1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-784.4549188891551), 3057.5882558667);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-784.4549188891551), 3057.5882558667, 24, "Fourth");
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, 3057.5882558667);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 263, 49);
      assertEquals(49, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(263, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertEquals(49, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(263, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(xYDatasetTableModel0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(seriesChangeEvent0);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Negative 'factor' argument.", "Negative 'factor' argument.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Negative 'factor' argument.", (double) 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Number[][] numberArray0 = new Number[15][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree6data.general.DataKetUtilities", "org.jfree6data.general.DataKetUtilities", numberArray0);
      assertEquals(15, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals(15, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(15, numberArray0.length);
      assertNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "org.jfree6data.general.DataKetUtilities", (KeyedValues) categoryToPieDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(15, numberArray0.length);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryDataset1);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree6data.general.DataKetUtilities", (double) 2);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(15, numberArray0.length);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(155.0F);
      assertEquals(155.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 155.0F, (double) 155.0F, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(155.0, range0.getLowerBound(), 0.01);
      assertEquals(155.0, range0.getUpperBound(), 0.01);
      assertEquals(155.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float0);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(float0));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(155.0, range1.getUpperBound(), 0.01);
      assertEquals(155.0, range1.getLowerBound(), 0.01);
      assertEquals(155.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(arrayList0.contains(float0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(155.0, range2.getCentralValue(), 0.01);
      assertEquals(155.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(155.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.0992785680487), (-2414.0992785680487));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Second second1 = Second.parseSecond("y(y.z6T.x?Rbd");
      assertNull(second1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNotNull(spreadsheetDate0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(702.0548031, range1.getLength(), 0.01);
      assertEquals((-643.0548031), range1.getLowerBound(), 0.01);
      assertEquals((-292.02740155), range1.getCentralValue(), 0.01);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 3279);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList0.add(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 0.0F, (double) 0.0F, (Comparable) float0, (Comparable) float1);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(float0));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4190), (-4190), (-4190));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4190), (-32414.460338503985), (-277.9906120588603), (-4082.380959402), (-32414.460338503985));
      assertEquals("Sun May 12 00:00:00 GMT 2652", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Sun May 12 00:00:00 GMT 2652", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-277.9906120588603) <= upper (-32414.460338503985).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1694.36393276;
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[4] = 754.099;
      doubleArray1[5] = 1549.084;
      doubleArray1[6] = (-784.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 754.099;
      doubleArray2[1] = (-2.147483648E9);
      doubleArray2[2] = 1549.084;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2.147483648E9);
      doubleArray3[1] = (-6038.74107296449);
      doubleArray3[2] = (-698.0065);
      doubleArray3[3] = 1694.36393276;
      doubleArray3[4] = 1694.36393276;
      doubleArray3[5] = 6.283185307179586;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 6.283185307179586;
      doubleArray3[8] = 1694.36393276;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-698.0065);
      doubleArray4[1] = 1694.36393276;
      doubleArray4[2] = (-2.147483648E9);
      doubleArray4[3] = 6.283185307179586;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 754.099;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1549.084;
      doubleArray5[3] = 1549.084;
      doubleArray5[4] = (-6038.74107296449);
      doubleArray5[5] = (-698.0065);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-784.0);
      doubleArray6[1] = 754.099;
      doubleArray6[2] = 1549.084;
      doubleArray6[3] = (-784.0);
      doubleArray6[4] = (-2.147483648E9);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("v <JKqP08vUT%+/4N7", 31, 31);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals(30.0, range0.getUpperBound(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(30.0, number1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(961, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(31, matrixSeries0.getRowCount());
      assertEquals(31, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1.7976931348623157E308));
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(16.67542452351, 16.67542452351, (Comparable) float0, (Comparable) float0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float0);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(33.35084904702, range1.getLength(), 0.01);
      assertEquals(16.67542452351, range1.getCentralValue(), 0.01);
      assertEquals(33.35084904702, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range2);
      
      Range range3 = Range.combine(range1, (Range) null);
      assertTrue(arrayList0.contains(float0));
      assertSame(range1, range3);
      assertSame(range3, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(33.35084904702, range1.getLength(), 0.01);
      assertEquals(16.67542452351, range1.getCentralValue(), 0.01);
      assertEquals(33.35084904702, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(33.35084904702, range3.getUpperBound(), 0.01);
      assertEquals(16.67542452351, range3.getCentralValue(), 0.01);
      assertEquals(33.35084904702, range3.getLength(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-784.4549188891551), (-784.4549188891551));
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals((-784.4549188891551), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 918.32791312, 18, quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals((-784.4549188891551), powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals((-784.4549188891551), powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = mockGregorianCalendar0.getCalendarType();
      assertEquals("gregory", string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, vector0, false);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.22192928E13), range2.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range2.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-784.4549188891551), 3057.5882558667);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-784.4549188891551), 3057.5882558667, 24, "Fourth");
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      xYSeriesCollection0.setIntervalWidth(3057.5882558667);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(3057.5882558667, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(3057.5882558667, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1136.5666684887724, range0.getCentralValue(), 0.01);
      assertEquals(3057.5882558667, range0.getUpperBound(), 0.01);
      assertEquals((-784.4549188891551), range0.getLowerBound(), 0.01);
      assertEquals(3842.043174755855, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals((-784.4549188891551), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(3057.5882558667, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "Fourth");
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(59, 0, 59, 0, 59);
      assertNotNull(mockDate0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      long long0 = second0.getMiddleMillisecond(calendar0);
      assertEquals(1392409281819L, long0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2415.4453812558468), (-2415.4453812558468));
      assertEquals("Sat Feb 28 00:59:00 GMT 1959", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertNotNull(minute0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      double double0 = xYTaskDataset0.getEndXValue(366, 15);
      assertEquals(366.4, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-3.4214046E11), range0.getCentralValue(), 0.01);
      assertEquals((-3.4214046E11), range0.getUpperBound(), 0.01);
      assertEquals((-3.4214046E11), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<XYSeriesCollection>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<XYSeriesCollection>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<XYSeriesCollection>) oHLCDataItem0;
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 366;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 15;
      doubleArray2[3] = (-794.6268613198413);
      doubleArray2[4] = (double) 59;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = 366.4;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 15;
      doubleArray3[1] = (double) 59;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 366;
      doubleArray4[1] = (-3054.538673353);
      doubleArray4[2] = (double) 366;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-794.6268613198413);
      doubleArray5[1] = (-794.6268613198413);
      doubleArray5[2] = (double) 59;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-3054.538673353);
      doubleArray6[1] = (double) 59;
      doubleArray6[2] = 943.36313;
      doubleArray6[3] = (double) 59;
      doubleArray6[4] = (double) 0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) comparableArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 37, 37);
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(37, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) vector0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3057.5882558667;
      doubleArray2[1] = (-1.7976931348623157E308);
      doubleArray2[2] = (-439.0);
      doubleArray2[3] = (-8309.0);
      doubleArray2[4] = (-1843.0728);
      doubleArray2[5] = (-465.553);
      doubleArray2[6] = (-1009.846159);
      doubleArray2[7] = 640.92515637294;
      doubleArray2[8] = (-633.485453810916);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(2291, (-2623), 1073741824);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-385.5113), 234.8974, 1073741824, 2291, 1073741824);
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2623), 1.5, 0.0, 0.0, 3810.002794431968);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(number1.equals((Object)number0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(9.2834483616E16, number1);
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(9.2834483616E16, range0.getCentralValue(), 0.01);
      assertEquals(9.2834483616E16, range0.getUpperBound(), 0.01);
      assertEquals(9.2834483616E16, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals(0, linkedList0.size());
      assertEquals(9.2834483616E16, range0.getCentralValue(), 0.01);
      assertEquals(9.2834483616E16, range0.getUpperBound(), 0.01);
      assertEquals(9.2834483616E16, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Sep 04 00:00:00 GMT 2943777", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertNotNull(minute0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNotNull(spreadsheetDate0);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(21, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotNull(minute1);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3264.64155377;
      doubleArray1[3] = (double) 59;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "M$.v", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1075), 400);
      assertEquals(400, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1075), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNotNull(spreadsheetDate0);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(21, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotNull(minute1);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2414.460338503983), range1.getCentralValue(), 0.01);
      assertEquals((-2414.460338503983), range1.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range1.getLowerBound(), 0.01);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range1);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(2);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertNotNull(serialDate0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertNotNull(minute0);
      
      Date date0 = serialDate0.toDate();
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, false);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 3.16656E12);
      assertEquals(3.16656E12, range1.getCentralValue(), 0.01);
      assertEquals(3.16656E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3.16656E12, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) linkedList0, range1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), 3057.5882558667);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), 3057.5882558667, 8, "Fourth");
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1136.16462793335, range0.getCentralValue(), 0.01);
      assertEquals((-785.759), range0.getLowerBound(), 0.01);
      assertEquals(3058.0882558667, range0.getUpperBound(), 0.01);
      assertEquals(3843.8472558667, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1136.16462793335, range0.getCentralValue(), 0.01);
      assertEquals((-785.759), range0.getLowerBound(), 0.01);
      assertEquals(3058.0882558667, range0.getUpperBound(), 0.01);
      assertEquals(3843.8472558667, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), 3057.5882558667);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), 3057.5882558667, 8, "Fourth");
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Fourth", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(0.0F));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float1 = new Float(3007.98968715);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3007.9897F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList0.add(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(arrayList0.contains(0.0F));
      assertTrue(arrayList0.contains(float1));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1.0), (-6483.116), (Comparable) float1, (Comparable) float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(range1.equals((Object)range0));
      assertFalse(arrayList0.contains(0.0F));
      assertTrue(arrayList0.contains(float1));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.combine(range1, range1);
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(arrayList0.contains(0.0F));
      assertTrue(arrayList0.contains(float1));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNotNull(spreadsheetDate0);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(21, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotNull(minute1);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertEquals((-643.0548031), range1.getLowerBound(), 0.01);
      assertEquals((-292.02740155), range1.getCentralValue(), 0.01);
      assertEquals(702.0548031, range1.getLength(), 0.01);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range1, true);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.equals((Object)range1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertEquals((-643.0548031), range1.getLowerBound(), 0.01);
      assertEquals((-292.02740155), range1.getCentralValue(), 0.01);
      assertEquals(702.0548031, range1.getLength(), 0.01);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertNotNull(spreadsheetDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance(4);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(4, serialDate0.toSerial());
      assertNotNull(serialDate0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2414.460338503983), range0.getCentralValue(), 0.01);
      assertEquals((-2414.460338503983), range0.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-643.0548031));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2414.460338503983), range0.getCentralValue(), 0.01);
      assertEquals((-2414.460338503983), range0.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertEquals((-2414.460338503983), range1.getLowerBound(), 0.01);
      assertEquals((-1528.7575708019915), range1.getCentralValue(), 0.01);
      assertEquals(1771.4055354039833, range1.getLength(), 0.01);
      assertEquals((-643.0548031), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((Byte) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, true);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2.2039776E12), range2.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range2.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range2.getLowerBound(), 0.01);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertNotNull(range2);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(155.0F);
      assertEquals(155.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(155.0F));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 155.0F, (double) 155.0F, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(155.0, range0.getCentralValue(), 0.01);
      assertEquals(155.0, range0.getUpperBound(), 0.01);
      assertEquals(155.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float0);
      assertEquals(0, int0);
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(range1);
      
      Range range2 = Range.combine(range0, range0);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(155.0, range0.getCentralValue(), 0.01);
      assertEquals(155.0, range0.getUpperBound(), 0.01);
      assertEquals(155.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(155.0, range2.getCentralValue(), 0.01);
      assertEquals(155.0, range2.getUpperBound(), 0.01);
      assertEquals(155.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals(155.0, range3.getUpperBound(), 0.01);
      assertEquals(77.5, range3.getCentralValue(), 0.01);
      assertEquals(155.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertTrue(arrayList0.contains(155.0F));
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(155.0, range4.getCentralValue(), 0.01);
      assertEquals(310.0, range4.getUpperBound(), 0.01);
      assertEquals(310.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) millisecond0;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(1, comparableArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) millisecond0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(0, 0, 750, 999, 999);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Mon Mar 03 07:39:00 GMT 1902", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-2140618860000L), second0.getFirstMillisecond());
      assertEquals((-2140618859001L), second0.getLastMillisecond());
      assertNotNull(second0);
      
      Millisecond millisecond1 = new Millisecond(999, second0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Mar 03 07:39:00 GMT 1902", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-2140618860000L), second0.getFirstMillisecond());
      assertEquals((-2140618859001L), second0.getLastMillisecond());
      assertEquals(999L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertNotNull(millisecond1);
      
      keyToGroupMap0.mapKeyToGroup(millisecond1, second0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond1, millisecond0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, keyToGroupMap0.getGroupCount());
      assertEquals("Mon Mar 03 07:39:00 GMT 1902", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-2140618860000L), second0.getFirstMillisecond());
      assertEquals((-2140618859001L), second0.getLastMillisecond());
      assertEquals(999L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(999, 0, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals("Mon Mar 03 07:39:00 GMT 1902", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-2140618860000L), second0.getFirstMillisecond());
      assertEquals((-2140618859001L), second0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Short short0 = new Short((short) (-10026));
      assertEquals((short) (-10026), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(vector0.contains((short) (-10026)));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-10026]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.contains((short) (-10026)));
      assertFalse(vector0.isEmpty());
      assertEquals("[-10026]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate((-1), (-1), 23, 1116, 0, 398);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1699.66), Double.NEGATIVE_INFINITY, 1.7976931348623157E308, 1.0, Double.NaN);
      assertEquals("Tue Feb 07 12:06:38 GMT 1899", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.7976931348623157E308) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(taskSeriesCollection0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertNotNull(spreadsheetDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance(884);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1902, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getMonth());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(884, serialDate0.toSerial());
      assertNotNull(serialDate0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(59, 1379, (-1304));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1379, 2953.60696, 0, (-1.7976931348623157E308), 0);
      assertEquals("Tue May 06 00:00:00 GMT 2070", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Tue May 06 00:00:00 GMT 2070", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(3166560000000L, minute0.getLastMillisecond());
      assertEquals(3166560000000L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertNotNull(minute0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(4, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(21, minute1.getMinute());
      assertNotNull(minute1);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      String string0 = spreadsheetDate0.toString();
      assertEquals("27-February-1900", string0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNotNull(string0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-3585));
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(2953.60696, number1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(3.16656E12, range0.getCentralValue(), 0.01);
      assertEquals(3.16656E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.16656E12, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte0);
      assertNotNull(byte0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray1[2] = (Number) byte0;
      numberArray1[3] = (Number) byte0;
      numberArray1[4] = (Number) byte0;
      numberArray1[5] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = (Number) byte0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) byte0;
      Byte byte1 = new Byte((byte)1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      numberArray3[1] = (Number) byte1;
      numberArray3[2] = (Number) byte0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("PQ/:$P(LybbmexO-*{", "PQ/:$P(LybbmexO-*{", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNotSame(tableOrder1, tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertNotNull(tableOrder1);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder1, (-1147));
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertEquals(3, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertEquals((-1147), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Float float0 = new Float(230.23044413868186);
      assertEquals(230.23044F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(230.23044413868186, 74.7926169342, (Comparable) "Forth", (Comparable) float0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(230.23044413868186, range0.getLowerBound(), 0.01);
      assertEquals(230.23044413868186, range0.getCentralValue(), 0.01);
      assertEquals(230.23044413868186, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(305.0230610728819, number0);
      assertNotNull(number0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 93, (-1133));
      assertEquals((-1133), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(93, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (-2414.460338503983));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Float float0 = new Float((-441.0));
      assertEquals((-441.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float1 = new Float((-441.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-441.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList0.add(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(arrayList0.contains(float1));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1071.5312), 1761.0178010219, (Comparable) float1, (Comparable) float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3522.0356020438003, range1.getLength(), 0.01);
      assertEquals(689.4866010219, range1.getUpperBound(), 0.01);
      assertEquals((-1071.5312), range1.getCentralValue(), 0.01);
      assertEquals((-2832.5490010219), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertEquals((-2832.5490010219), range2.getLowerBound(), 0.01);
      assertEquals((-1071.5312), range2.getCentralValue(), 0.01);
      assertEquals(3522.0356020438003, range2.getLength(), 0.01);
      assertEquals(689.4866010219, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(59);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertNotNull(spreadsheetDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance(4);
      assertFalse(serialDate0.equals((Object)spreadsheetDate0));
      assertNotSame(serialDate0, spreadsheetDate0);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.getDayOfMonth());
      assertEquals(4, serialDate0.toSerial());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertNotNull(serialDate0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertFalse(spreadsheetDate0.equals((Object)serialDate0));
      assertNotSame(spreadsheetDate0, serialDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(27, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(59, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2414.460338503983), range0.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-643.0548031));
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2414.460338503983), range0.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2414.460338503983), range1.getLowerBound(), 0.01);
      assertEquals((-1528.7575708019915), range1.getCentralValue(), 0.01);
      assertEquals((-643.0548031), range1.getUpperBound(), 0.01);
      assertEquals(1771.4055354039833, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList1.add((Byte) null);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(boolean1);
      assertEquals(1, linkedList1.size());
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList1, range0, false);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(range0, range1);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, linkedList1.size());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2414.460338503983), range0.getUpperBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getLowerBound(), 0.01);
      assertEquals((-2414.460338503983), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), 3057.5882558667);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-785.259);
      doubleArray1[1] = 3057.5882558667;
      doubleArray1[2] = (-785.259);
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) millisecond0;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Comparable<TimeTableXYDataset>[] comparableArray0 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<TimeTableXYDataset>) second0;
      comparableArray0[1] = (Comparable<TimeTableXYDataset>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<TimeTableXYDataset>) oHLCDataItem0;
      comparableArray0[3] = (Comparable<TimeTableXYDataset>) second0;
      comparableArray0[4] = (Comparable<TimeTableXYDataset>) oHLCDataItem0;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-643.0548031);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-2414.460338503983);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), 3057.5882558667);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), 3057.5882558667, 8, "Fourth");
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-785.759), range0.getLowerBound(), 0.01);
      assertEquals(3843.8472558667, range0.getLength(), 0.01);
      assertEquals(3058.0882558667, range0.getUpperBound(), 0.01);
      assertEquals(1136.16462793335, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertNotNull(serialDate0);
      
      SerialDate serialDate1 = SerialDate.createInstance((Date) mockDate0);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotSame(serialDate1, serialDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1900, serialDate1.getYYYY());
      assertEquals(28, serialDate1.getDayOfMonth());
      assertEquals(2, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(4, serialDate1.getDayOfWeek());
      assertEquals(60, serialDate1.toSerial());
      assertNotNull(serialDate1);
      
      SerialDate serialDate2 = serialDate0.getEndOfCurrentMonth(serialDate1);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertFalse(serialDate2.equals((Object)serialDate0));
      assertTrue(serialDate2.equals((Object)serialDate1));
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertNotSame(serialDate1, serialDate2);
      assertNotSame(serialDate1, serialDate0);
      assertNotSame(serialDate2, serialDate0);
      assertNotSame(serialDate2, serialDate1);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate1.getYYYY());
      assertEquals(28, serialDate1.getDayOfMonth());
      assertEquals(2, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(4, serialDate1.getDayOfWeek());
      assertEquals(60, serialDate1.toSerial());
      assertEquals(1900, serialDate2.getYYYY());
      assertNull(serialDate2.getDescription());
      assertEquals(60, serialDate2.toSerial());
      assertEquals(28, serialDate2.getDayOfMonth());
      assertEquals(4, serialDate2.getDayOfWeek());
      assertEquals(2, serialDate2.getMonth());
      assertNotNull(serialDate2);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(21, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotNull(minute1);
      
      Date date0 = serialDate0.toDate();
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate0.equals((Object)serialDate2));
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      String string0 = serialDate0.toString();
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate0.equals((Object)serialDate2));
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertEquals("2-January-1900", string0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertNotNull(string0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59.0, number1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.2039776E12), range1.getCentralValue(), 0.01);
      assertEquals((-2.2039776E12), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.2039776E12), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.toSerial());
      assertNotNull(serialDate0);
      
      Minute minute1 = second0.getMinute();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute1, minute0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotNull(minute1);
      
      Date date0 = serialDate0.toDate();
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      String string0 = serialDate0.toString();
      assertEquals("2-January-1900", string0);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.toSerial());
      assertNotNull(string0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59.0, number1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.2039776E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.2039776E12), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate(8, 8, (-12), 1909, (-1), (-1));
      assertNotNull(mockDate0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("Fri Nov 06 12:58:59 GMT 1908", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.929783661E12), range1.getLowerBound(), 0.01);
      assertEquals((-1.929783661E12), range1.getCentralValue(), 0.01);
      assertEquals((-1.929783661E12), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-643.0548031), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      double double0 = defaultOHLCDataset0.getXValue((-1659), 0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, double0, 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2756.21790543876;
      String string0 = serialDate0.toString();
      assertEquals("2-January-1900", string0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertNotNull(string0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertFalse(number1.equals((Object)double0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59.0, number1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(702.0548031, range0.getLength(), 0.01);
      assertEquals((-292.02740155), range0.getCentralValue(), 0.01);
      assertEquals((-643.0548031), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 106.0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(" ", " ", "Forth", "Forth");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3216.323510665708;
      doubleArray1[1] = 2997.884325824588;
      doubleArray1[2] = (-677.52398225506);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2997.884325824588;
      doubleArray3[1] = 2997.884325824588;
      doubleArray3[2] = (-677.52398225506);
      doubleArray3[3] = (-507.86431784865);
      doubleArray3[4] = (-677.52398225506);
      doubleArray3[5] = (-677.52398225506);
      doubleArray3[6] = 4553.364405886;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2997.884325824588;
      doubleArray4[1] = (-507.86431784865);
      doubleArray4[2] = (-507.86431784865);
      doubleArray4[3] = 4553.364405886;
      doubleArray4[4] = 3216.323510665708;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 4553.364405886;
      doubleArray5[1] = 4553.364405886;
      doubleArray5[2] = 2997.884325824588;
      doubleArray5[3] = 2997.884325824588;
      doubleArray5[4] = 3216.323510665708;
      doubleArray5[5] = (-677.52398225506);
      doubleArray5[6] = 4553.364405886;
      doubleArray5[7] = 4553.364405886;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 4553.364405886;
      doubleArray7[1] = (-677.52398225506);
      doubleArray7[2] = (-1338.2951435300997);
      doubleArray7[3] = (-779.816881959);
      doubleArray7[4] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-711.272705568);
      doubleArray8[1] = (-677.52398225506);
      doubleArray8[2] = (-1351.98205);
      doubleArray8[3] = (-507.86431784865);
      doubleArray8[4] = (-507.86431784865);
      doubleArray8[5] = 3216.323510665708;
      doubleArray8[6] = (-779.816881959);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = (-677.52398225506);
      doubleArray9[1] = 3216.323510665708;
      doubleArray9[2] = (-569.469);
      doubleArray9[3] = 4553.364405886;
      doubleArray9[4] = 4553.364405886;
      doubleArray9[5] = (-1338.2951435300997);
      doubleArray9[6] = (-1.0);
      doubleArray9[7] = (-4340.22786);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2757.442107133103;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (Number) byte0, (List) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.39240928132E12, number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC(0, (-2146488809), (-2146488809), 59, 59, 5380);
      assertEquals((-5830295110828280000L), long0);
      
      defaultCategoryDataset0.addValue((double) 0, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals(18, numberArray0.length);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-279.15), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(18, numberArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 5380);
      assertEquals(18, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5380, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (-1678.603), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5380, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-10.02065169);
      doubleArray1[1] = (-1892.52786);
      doubleArray1[2] = 471.383133567;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-10.02065169);
      doubleArray2[1] = (-1892.52786);
      doubleArray2[2] = 471.383133567;
      doubleArray2[3] = (-10.02065169);
      doubleArray2[4] = 2045.739413;
      doubleArray2[5] = (-1892.52786);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2045.739413;
      doubleArray3[1] = 471.383133567;
      doubleArray3[2] = 2045.739413;
      doubleArray3[3] = 2045.739413;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 2045.739413;
      doubleArray5[1] = (-1892.52786);
      doubleArray5[2] = 2045.739413;
      doubleArray5[3] = (-1892.52786);
      doubleArray5[4] = 2045.739413;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-10.02065169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = new Double((-198));
      assertEquals((-198.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer((-198));
      assertEquals((-198), (int)integer0);
      assertNotNull(integer0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) integer0);
      assertEquals((-198.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-198.0), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) double0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) double0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(4, numberArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-618.801070786);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3644.3219015;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultTableXYDataset", "Fou1", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3644.3219015, number0);
      assertNotNull(number0);
      
      Double double0 = new Double(185.757458);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(185.757458, (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3644.3219015, number1);
      assertNotNull(number1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) double0, 5453.611122991686);
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-776.45892324482);
      doubleArray0[2] = (-776.45892324482);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, (-776.45892324482), (-776.45892324482)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 6.283185307179586, 3716.68377199, 2, (-776.45892324482));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, (-776.45892324482), (-776.45892324482)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNull(xYSeries0.getDescription());
      assertEquals((-35525.721737341875), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1.0728686182097956E10), xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(6.283185307179586, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3716.68377199, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowKeys' argument.", 2, 2);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC(0, (-2146488809), (-2146488809), 59, 59, 5380);
      assertEquals((-5830295110828280000L), long0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, (-279.15), (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals((-2.2039776E12), number1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertFalse(number2.equals((Object)number1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals((-279.15), number2);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2758.52590640226;
      String string0 = serialDate0.toString();
      assertEquals("2-January-1900", string0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1900, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNotNull(string0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 2);
      assertNotNull(pieDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59.0, number1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2758.52590640226;
      doubleArray0[1] = (double) 1900;
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertEquals(18, numberArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1613.4031) <= upper (59.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-2414.460338503983);
      doubleArray1[2] = (-2414.460338503983);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 59;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 59;
      doubleArray5[1] = (double) 0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Qo~R:)";
      stringArray0[1] = "6y']W0i&";
      stringArray0[2] = "Fou12";
      stringArray0[3] = "GS{}Sl;DEnOH{Ms/4T";
      stringArray0[4] = "D";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      MockDate mockDate0 = new MockDate(162L);
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, minute0.getHourValue());
      assertEquals(162L, minute0.getLastMillisecond());
      assertEquals(162L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      SerialDate serialDate0 = SerialDate.createInstance(1329);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1329, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(21, serialDate0.getDayOfMonth());
      assertEquals(1903, serialDate0.getYYYY());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1329, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(21, serialDate0.getDayOfMonth());
      assertEquals(1903, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = date0;
      dateArray0[4] = date0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = date0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-405.7);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 2788.75453518539;
      doubleArray1[3] = (double) 7;
      doubleArray1[4] = (double) 162L;
      doubleArray1[5] = (-687.34216488208);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 4;
      doubleArray1[8] = 2758.52590640226;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, dateArray0.length);
      assertArrayEquals(new double[] {(-405.7), 1.0, 2788.75453518539, 7.0, 162.0, (-687.34216488208), 0.0, 4.0, 2758.52590640226}, doubleArray1, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1329, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(21, serialDate0.getDayOfMonth());
      assertEquals(1903, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, dateArray0.length);
      assertArrayEquals(new double[] {(-405.7), 1.0, 2788.75453518539, 7.0, 162.0, (-687.34216488208), 0.0, 4.0, 2758.52590640226}, doubleArray1, 0.01);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1329, serialDate0.toSerial());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(21, serialDate0.getDayOfMonth());
      assertEquals(1903, serialDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-687.34216488208), range0.getLowerBound(), 0.01);
      assertEquals(2788.75453518539, range0.getUpperBound(), 0.01);
      assertEquals(3476.09670006747, range0.getLength(), 0.01);
      assertEquals(1050.706185151655, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Short short0 = new Short((short) (-1124));
      assertEquals((short) (-1124), (short)short0);
      assertNotNull(short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertFalse(stack0.contains(short0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[-1124]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(short0));
      assertEquals(1, stack0.size());
      assertEquals("[-1124]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertNotNull(minute0);
      
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(18, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 59, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(3, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2758.52590640226;
      doubleArray0[1] = (double) 1900;
      doubleArray0[2] = (-687.34216488208);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(minute0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, dateArray0.length);
      assertArrayEquals(new double[] {2758.52590640226, 1900.0, (-687.34216488208), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertEquals(18, numberArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(18, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(18, numberArray0.length);
      assertNull(number0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      Date[] dateArray0 = new Date[6];
      SerialDate serialDate0 = SerialDate.createInstance(3);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, serialDate0.toSerial());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, serialDate0.toSerial());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(2, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2758.52590640226;
      doubleArray0[1] = (double) 1900;
      doubleArray0[2] = (-687.34216488208);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(minute0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, dateArray0.length);
      assertArrayEquals(new double[] {2758.52590640226, 1900.0, (-687.34216488208), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1613.4031) <= upper (59.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.39240928132E12, number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-4035.416);
      doubleArray1[1] = (-2462.460739);
      doubleArray1[2] = 3167.967897700179;
      doubleArray1[3] = (-300.869);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3167.967897700179;
      doubleArray2[1] = (-300.869);
      doubleArray2[2] = (-300.869);
      doubleArray2[3] = (-300.869);
      doubleArray2[4] = (-2462.460739);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3167.967897700179, range2.getUpperBound(), 0.01);
      assertEquals((-4035.416), range2.getLowerBound(), 0.01);
      assertEquals((-433.72405114991057), range2.getCentralValue(), 0.01);
      assertEquals(7203.38389770018, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), 3057.5882558667);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), 3057.5882558667, 8, "Fourth");
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)xYSeriesCollection0.clone();
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertTrue(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertEquals(3057.5882558667, powerFunction2D0.getB(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1136.16462793335, range0.getCentralValue(), 0.01);
      assertEquals((-785.259), range0.getLowerBound(), 0.01);
      assertEquals(3842.8472558667, range0.getLength(), 0.01);
      assertEquals(3057.5882558667, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.jfree.data.time.TimePeriodAnchor";
      stringArray0[1] = "yV!tnmf(I0\\%";
      stringArray0[2] = "8NnI_%v.lIUs";
      stringArray0[3] = "org.jfree.data.function.PowerFunction2D";
      stringArray0[5] = ")H1";
      stringArray0[6] = ":Q-3Q;07^L~w4U(,#T";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(8, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(8, stringArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("JdbcXYDataset: swallowing exception.", "Fou4", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = new Range(1149.7318028813056, 1149.7318028813056);
      assertEquals(1149.7318028813056, range0.getCentralValue(), 0.01);
      assertEquals(1149.7318028813056, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1149.7318028813056, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 243);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(243, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "JdbcXYDataset: swallowing exception.", (-1840.7883306059998));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 243, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("JdbcXYDataset: swallowing exception.", "Fou4", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      ParsePosition parsePosition0 = new ParsePosition(15);
      assertEquals("java.text.ParsePosition[index=15,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(15, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), (-632.726877568), 3576.8, 1615.67, (-2.147483648E9));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2209.5438), 1620.77428858822, 1326.563, 1.39240928132E12, 1149.7318028813056);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2209.5438), 1326.563, (-1780.7152731987403), (-2.147483648E9), 3135.721432);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-2532.7), 1491.34490709, 1.39240928132E12, 892.21, Double.NEGATIVE_INFINITY);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Fou4", oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, number1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Hour hour0 = Hour.parseHour("J-0+^W/");
      assertNull(hour0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Spliterator<TimeTableXYDataset> spliterator0 = vector0.spliterator();
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(spliterator0);
      
      boolean boolean1 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1841.340691;
      doubleArray1[1] = (-1437.165500182);
      doubleArray1[2] = 2788.75453518539;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1841.340691;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 2788.75453518539;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 2788.75453518539;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1841.340691;
      doubleArray3[1] = 2160.57622167607;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2160.57622167607;
      doubleArray4[1] = (-1437.165500182);
      doubleArray4[2] = 1841.340691;
      doubleArray4[3] = (-1437.165500182);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 2160.57622167607;
      doubleArray5[2] = 2788.75453518539;
      doubleArray5[3] = 1841.340691;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1437.165500182);
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = (-1437.165500182);
      doubleArray6[3] = 2788.75453518539;
      doubleArray6[4] = (-1437.165500182);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 1841.340691;
      doubleArray7[1] = 2788.75453518539;
      doubleArray7[2] = 1841.340691;
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray7[4] = 2788.75453518539;
      doubleArray7[5] = 2160.57622167607;
      doubleArray7[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 2160.57622167607;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray8[3] = Double.NEGATIVE_INFINITY;
      doubleArray8[4] = (-1765.9083704792642);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = Double.POSITIVE_INFINITY;
      doubleArray9[1] = (-4990.954496);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean1 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, null]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 6739.643935713653;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 53;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray1[2] = 6739.643935713653;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1583.5;
      doubleArray1[1] = (-2356.966370367674);
      doubleArray1[2] = 1874.461546;
      doubleArray1[3] = 619.59402;
      doubleArray1[4] = (-1400.5597060305);
      doubleArray1[5] = 1.5;
      doubleArray1[6] = (-1249.6682500131317);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1874.461546;
      doubleArray2[1] = (-2356.966370367674);
      doubleArray2[2] = 1583.5;
      doubleArray2[3] = 1874.461546;
      doubleArray2[4] = (-1400.5597060305);
      doubleArray2[5] = 3412.069020792368;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(527.5513252123471, range0.getCentralValue(), 0.01);
      assertEquals(3412.069020792368, range0.getUpperBound(), 0.01);
      assertEquals((-2356.966370367674), range0.getLowerBound(), 0.01);
      assertEquals(5769.035391160041, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      Object[][] objectArray0 = new Object[1][0];
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      Range range0 = new Range((-2447.7), 4793.411726602);
      assertEquals(7241.111726602, range0.getLength(), 0.01);
      assertEquals(4793.411726602, range0.getUpperBound(), 0.01);
      assertEquals(1172.8558633010002, range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-2447.7), (-2447.7), 1865);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[2] = (-776.45892324482);
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains((-776.45892324482)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-4415.5083120698055));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("1", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(15);
      assertEquals(15, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=15,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2.784818556929E12;
      doubleArray1[3] = (-1249.6682500131317);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (-733.568285362997);
      doubleArray1[7] = 2.784818556929E12;
      doubleArray1[8] = 74.3704;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("iA", "Fourth", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(3845.75, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3845.75, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      int int0 = 351;
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NaN, (-1249.6682500131317), 351, "iA");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-4415.5083120698055));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Locale locale0 = new Locale("1", "1");
      assertEquals("", locale0.getVariant());
      assertEquals("1", locale0.getCountry());
      assertEquals("1_1", locale0.toString());
      assertEquals("1", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("1", locale0.getCountry());
      assertEquals("1_1", locale0.toString());
      assertEquals("1", locale0.getLanguage());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      ParsePosition parsePosition0 = new ParsePosition(15);
      assertEquals(15, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=15,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[17];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      Short short0 = new Short((short)292);
      assertEquals((short)292, (short)short0);
      assertNotNull(short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertFalse(stack0.contains((short)292));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Short short1 = new Short((short)1686);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1686, (short)short1);
      assertNotNull(short1);
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(short1.equals((Object)short0));
      assertTrue(stack0.contains((short)1686));
      assertFalse(stack0.contains((short)292));
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1686]", stack0.toString());
      
      Short short2 = new Short((short) (-594));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-594), (short)short2);
      assertNotNull(short2);
      
      boolean boolean1 = stack0.add(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains((short) (-594)));
      assertFalse(stack0.contains(short0));
      assertTrue(boolean1);
      assertEquals("[1686, -594]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "?A";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1465.668266810199;
      doubleArray0[1] = (-2497.2490234375);
      doubleArray0[3] = (-751.9947704082609);
      int int0 = 978;
      JTable jTable0 = new JTable(978, 365);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      boolean boolean1 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3773.346;
      doubleArray1[1] = (-2445.8);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1301.09618322;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1301.09618322;
      doubleArray2[2] = (-2445.8);
      doubleArray2[3] = (-2445.8);
      doubleArray2[4] = 3773.346;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) Double.POSITIVE_INFINITY, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.jfree.data.general.DefaultValueDataset";
      stringArray0[1] = "Fourth";
      stringArray0[2] = "#|%3jK=0$H";
      stringArray0[3] = "Fourth";
      stringArray0[4] = "Fourth";
      stringArray0[5] = "Fourth";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = null;
      Short short0 = new Short((short)12);
      assertEquals((short)12, (short)short0);
      assertNotNull(short0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(short0);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[17];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Double double0 = new Double((-2447.7));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-2447.7), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      
      List list0 = ((DefaultPieDataset) pieDataset0).getKeys();
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Double double1 = new Double((-2447.7));
      assertNotEquals((double)double1, (double)number1, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2447.7), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-2447.7), (-2447.7));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset2);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2.147483648E9));
      assertEquals(2, doubleArray0.length);
      assertEquals((-2.1474860957E9), range0.getLowerBound(), 0.01);
      assertEquals(2447.699999809265, range0.getLength(), 0.01);
      assertEquals((-2.14748487185E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) pieDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-4392.4));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("1", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(6);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(6, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1383.05);
      doubleArray1[1] = 3090.448114162;
      doubleArray1[2] = 10.882721833399161;
      doubleArray1[3] = 0.8;
      doubleArray1[4] = (-1341.97742762795);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1341.97742762795);
      doubleArray2[1] = 10.882721833399161;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1341.97742762795);
      doubleArray4[1] = (-69.0568418829631);
      doubleArray4[2] = 10.882721833399161;
      doubleArray4[3] = 3090.448114162;
      doubleArray4[4] = 10.882721833399161;
      doubleArray4[5] = 10.882721833399161;
      doubleArray4[6] = (-1383.05);
      doubleArray4[7] = 10.882721833399161;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1341.97742762795);
      doubleArray5[1] = 3090.448114162;
      doubleArray5[2] = (-69.0568418829631);
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = 10.882721833399161;
      doubleArray5[5] = 3090.448114162;
      doubleArray5[6] = 0.8;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-1383.05);
      doubleArray6[1] = (-1341.97742762795);
      doubleArray6[2] = 0.8;
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-1383.05);
      doubleArray7[1] = (-1341.97742762795);
      doubleArray7[2] = (-1383.05);
      doubleArray7[3] = 0.8;
      doubleArray7[4] = 10.882721833399161;
      doubleArray7[5] = 10.882721833399161;
      doubleArray7[6] = 1593.981;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 3);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 3);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      Range range1 = defaultTableXYDataset0.getDomainBounds(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(range1);
      
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (-760.20932);
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (-542.309520753048);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-542.309520753048);
      doubleArray3[1] = (-542.309520753048);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-542.309520753048);
      doubleArray3[4] = (double) 3;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-760.20932);
      doubleArray3[7] = (-542.309520753048);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-651), 290);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-651), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(290, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      vector0.addElement(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset1));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector1 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(vector1.contains(defaultBoxAndWhiskerCategoryDataset1));
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertNotNull(vector1);
      
      boolean boolean0 = vector1.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(vector1.contains(defaultBoxAndWhiskerCategoryDataset1));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(vector1, vector0);
      assertTrue(boolean0);
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 2.040109465E9);
      assertEquals(2.040109465E9, range1.getCentralValue(), 0.01);
      assertEquals(2.040109465E9, range1.getUpperBound(), 0.01);
      assertEquals(2.040109465E9, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-4895.4), Double.POSITIVE_INFINITY);
      assertEquals((-4895.4), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(2.040109465E9, range1.getCentralValue(), 0.01);
      assertEquals(2.040109465E9, range1.getUpperBound(), 0.01);
      assertEquals(2.040109465E9, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range2);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) ",v$rX 6]fwK1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      Object[][] objectArray0 = new Object[1][0];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      defaultPieDataset0.setValue((Comparable) (-2447.7), (Number) bigInteger0);
      assertEquals(2, doubleArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-6119.25), range0.getCentralValue(), 0.01);
      assertEquals((-12238.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(12238.5, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) (-2447.7), (-2447.7), 0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotNull(defaultPieDataset1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 7, (-5));
      assertEquals(2, doubleArray0.length);
      assertEquals((-5), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (-2447.7));
      assertEquals(2, doubleArray0.length);
      assertEquals((-5), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "Fourth";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-4895.4));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`:", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2621.714), (-785.259));
      assertEquals((-2621.714), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2366.52372512903), 8, 8, "Fourth");
      assertEquals((-2621.714), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals((-2621.714), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(-0.0, range0.getCentralValue(), 0.01);
      assertEquals(-0.0, range0.getUpperBound(), 0.01);
      assertEquals(-0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, number0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 476.51042360905;
      doubleArray1[2] = 9.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1504.4070756635208);
      doubleArray1[5] = 3547.66;
      doubleArray1[6] = 11.0;
      doubleArray1[7] = 3.0;
      doubleArray1[8] = 826.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 826.0;
      doubleArray2[2] = (-1504.4070756635208);
      doubleArray2[3] = 3.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fou15", "Null 'object' argument.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3547.66, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(6.283185307179586, 498.749637);
      assertEquals(498.749637, powerFunction2D0.getB(), 0.01);
      assertEquals(6.283185307179586, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.0, 73.02106365, 9, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(498.749637, powerFunction2D0.getB(), 0.01);
      assertEquals(6.283185307179586, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(498.749637, powerFunction2D0.getB(), 0.01);
      assertEquals(6.283185307179586, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(498.749637, powerFunction2D0.getB(), 0.01);
      assertEquals(6.283185307179586, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2796, 2796);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2795, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2796;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2796;
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = 138.776;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(8, 8);
      assertEquals(8.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(8.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-4690.625), (-2533.0), 8, "Forth");
      assertEquals(8.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(8.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(8.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(8.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-20256.0), range0.getUpperBound(), 0.01);
      assertEquals((-37517.0), range0.getLowerBound(), 0.01);
      assertEquals((-28886.5), range0.getCentralValue(), 0.01);
      assertEquals(17261.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      vector0.addElement(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector1 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertFalse(vector1.equals((Object)vector0));
      assertFalse(vector1.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertNotNull(vector1);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(vector0.equals((Object)vector1));
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(vector0, vector1);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1958.219454830772));
      assertEquals((-1958.2195F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = arrayList0.add(float0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1117.6));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.sort((Comparator<? super Float>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1.0));
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, true);
      assertFalse(arrayList0.contains(float0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, false);
      assertFalse(arrayList0.contains(float0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(number0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-474.06901170550964));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      boolean boolean1 = false;
      MatrixSeries matrixSeries0 = new MatrixSeries("$jpu6", 1, 1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(194, 1);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number2);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range3);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) xYDataItem0);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(pieDataset0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertEquals(Double.NaN, range4.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range4.getUpperBound(), 0.01);
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-1299.0);
      doubleArray1[2] = (-2533.0);
      doubleArray1[3] = 1901.866906697;
      doubleArray1[4] = (-1523.8561056795);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2533.0);
      doubleArray2[1] = (-2533.0);
      doubleArray2[2] = (-2533.0);
      doubleArray2[3] = (-1523.8561056795);
      doubleArray2[4] = (-1299.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1523.8561056795);
      doubleArray3[1] = (-1299.0);
      doubleArray3[2] = 1901.866906697;
      doubleArray3[3] = (-2533.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-3922), 0, 0, (-3922), 0);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Sun Jul 20 14:00:00 GMT 2024", mockDate0.toString());
      assertEquals(14, hour0.getHour());
      assertEquals((-125991021600000L), hour0.getLastMillisecond());
      assertEquals((-125991021600000L), hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-3922);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-3922);
      doubleArray0[4] = (double) (-3922);
      doubleArray0[5] = (double) (-3922);
      doubleArray0[6] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-3922.0), 0.0, (-3922.0), (-3922.0), (-3922.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3604.3651036890974, 3604.3651036890974, 2, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Comparator<Object> comparator0 = null;
      arrayList0.sort((Comparator<? super Float>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = 5395;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 5395);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 334, 334);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(334, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(334, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(334, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(334, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)19, (byte)19, (byte)19, (byte)19, (byte)19, (byte)19, (byte)19}, byteArray0);
      assertEquals((short)4883, bigInteger0.shortValue());
      assertEquals((byte)19, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) (byte)19, (Number) (byte)19, (Comparable) hour0, (Comparable) (byte)19);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((byte)19, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(7, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      Week week0 = new Week(243, (-3244));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-171945L), week0.getSerialIndex());
      assertEquals((-3244), week0.getYearValue());
      assertEquals((-13), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertFalse(week1.equals((Object)week0));
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-171945L), week0.getSerialIndex());
      assertEquals((-3244), week0.getYearValue());
      assertEquals((-13), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-171944L), week1.getSerialIndex());
      assertEquals((-3244), week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-12), week1.getWeek());
      assertNotNull(week1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 219, week1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals((-171945L), week0.getSerialIndex());
      assertEquals((-3244), week0.getYearValue());
      assertEquals((-13), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-171944L), week1.getSerialIndex());
      assertEquals((-3244), week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-12), week1.getWeek());
      assertEquals(218, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Forth");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      boolean boolean1 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, null]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, vector0, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, null]", vector0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Week week0 = new Week((-538), 8);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(398L, week0.getSerialIndex());
      assertEquals(8, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-26), week0.getWeek());
      assertNotNull(week0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), (-687.957925), 8, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(398L, week0.getSerialIndex());
      assertEquals(8, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-26), week0.getWeek());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(398L, week0.getSerialIndex());
      assertEquals(8, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-26), week0.getWeek());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0013635212271451156, range0.getCentralValue(), 0.01);
      assertEquals(0.001453577266371341, range0.getUpperBound(), 0.01);
      assertEquals(1.8011207845245055E-4, range0.getLength(), 0.01);
      assertEquals(0.0012734651879188904, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), (-785.259));
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), (-135.921304495516), 8, "Fourth");
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Short short0 = new Short((short) (-1334));
      assertEquals((short) (-1334), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-1334)));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1334]", stack0.toString());
      
      short short1 = (short) (-1085);
      Short short2 = new Short((short) (-1085));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-1085), (short)short2);
      assertNotNull(short2);
      
      boolean boolean1 = stack0.add(short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains((short) (-1085)));
      assertTrue(boolean1);
      assertEquals("[-1334, -1085]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      String string0 = "Null 'columnKeys' argument.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Cmz;-Z[U", "Null 'columnKeys' argument.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals(2, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 354.2243379;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("iA", "iA", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(177.11216895, range0.getCentralValue(), 0.01);
      assertEquals(354.2243379, range0.getUpperBound(), 0.01);
      assertEquals(354.2243379, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P9R'@+\u0002*X%9;hbTh;f";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Double double0 = new Double((-2447.7));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-2447.7), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double1, 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)double1));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range1);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.sort((Comparator<? super Float>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-215.21648355876442);
      doubleArray2[1] = (-215.21648355876442);
      doubleArray2[2] = 429.8;
      doubleArray2[3] = (-215.21648355876442);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-215.21648355876442);
      doubleArray3[1] = (-215.21648355876442);
      doubleArray3[2] = (-215.21648355876442);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("~K", "~K", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-215.21648355876442), number0);
      assertNotNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) (-215.21648355876442), (-215.21648355876442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[12] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-388.22946162241), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(776.45892324482, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[19] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = (-776.45892324482);
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[12] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(776.45892324482, range0.getLength(), 0.01);
      assertEquals((-388.22946162241), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-776.45892324482), number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1904);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 1353.0;
      doubleArray1[2] = (-1926.805644518);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 5241.9607299576;
      doubleArray1[5] = (-3740.569577);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1353.0;
      doubleArray2[1] = 5241.9607299576;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3740.569577);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-2100799220), (-2104));
      assertEquals((-2100799220), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2104), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Quarter quarter0 = new Quarter(date0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      double double0 = 1421.683402559;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1653.4145501426171), 4, (-266.1990745098868), 1421.683402559, 1.7976931348623157E308);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 5063.99053874386, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      double double1 = (-1837.4011);
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 1, (-2100799220), (-2104), 0.5, (-1837.4011));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(quarter0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = arrayList0.add(defaultOHLCDataset0);
      assertTrue(arrayList0.contains(defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(boolean0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex("%p,9Cx'ThzRT}O'[A");
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      Object[][] objectArray0 = new Object[1][0];
      JTable jTable0 = new JTable(0, 0);
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, 0.0, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Short short0 = new Short((short)10083);
      assertEquals((short)10083, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[10083]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[10083]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[16];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertNull(range1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertFalse(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertEquals(Double.NaN, number2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(number2);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      
      String string0 = "q81Hl_7)n1|VE]G26";
      Day day0 = Day.parseDay("q81Hl_7)n1|VE]G26");
      assertNull(day0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1402.43023), (-3693.77290001), 273, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Short short0 = new Short((short) (-9999));
      assertEquals((short) (-9999), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(vector0.contains((short) (-9999)));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-9999]", vector0.toString());
      
      boolean boolean1 = vector0.add((Short) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains((short) (-9999)));
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals("[-9999, null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (-1.7976931348623157E308));
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1.7976931348623157E308), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[][] doubleArray0 = new double[15][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fou", "Fou", doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(15, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(15, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Double double0 = new Double((-2447.7));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-2447.7), (double)double0, 0.01);
      assertNotNull(double0);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(173, 173, 162, 0, (-226));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(3719160840000L, millisecond0.getLastMillisecond());
      assertEquals(3719160840000L, millisecond0.getFirstMillisecond());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertNotNull(millisecond0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      XYSeries xYSeries0 = new XYSeries((-2447.7), true, false);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertNotNull(xYSeries0);
      
      boolean boolean0 = simpleTimePeriod0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-2447.7), (double) 162);
      assertEquals(162.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-2447.7), xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(162.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-2447.7), xYSeries0.getMinX(), 0.01);
      assertNull(xYDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleTimePeriod0, (-2447.7));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(15, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Integer integer0 = new Integer(23);
      assertEquals(23, (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "permitted.  Try using the addOrUpdate() method.", "Fourth1");
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Double double0 = new Double((-2447.7));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-2447.7), (double)double0, 0.01);
      assertNotNull(double0);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(173, 173, 162, 0, (-226));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(3719160840000L, millisecond0.getFirstMillisecond());
      assertEquals(3719160840000L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertNotNull(millisecond0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      XYSeries xYSeries0 = new XYSeries((-2447.7), true, false);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      boolean boolean0 = simpleTimePeriod0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-2447.7), (double) 162);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-2447.7), xYSeries0.getMinX(), 0.01);
      assertEquals(162.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-2447.7), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(162.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYDataItem0);
      
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-2447.7), xYSeries0.getMinX(), 0.01);
      assertEquals(162.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-2447.7), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(162.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-2447.7), xYSeries0.getMinX(), 0.01);
      assertEquals(162.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-2447.7), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(162.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(162.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(162.0, range1.getCentralValue(), 0.01);
      assertEquals(162.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.sort((Comparator<? super Float>) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1552.726011810232;
      doubleArray0[1] = 1552.726011810232;
      doubleArray0[2] = 1552.726011810232;
      doubleArray0[3] = 1552.726011810232;
      doubleArray0[4] = 1552.726011810232;
      doubleArray0[5] = 1552.726011810232;
      doubleArray0[6] = 1552.726011810232;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1679.763772615345), (-1402.43023), 975, 1552.726011810232);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232, 1552.726011810232}, doubleArray0, 0.01);
      assertEquals((-1679.763772615345), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3.485985884074426E22, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.180518653094324E22, xYSeries0.getMinY(), 0.01);
      assertEquals((-1402.43023), xYSeries0.getMaxX(), 0.01);
      assertEquals(975, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) float0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 557.63821);
      assertEquals(558.13821, range2.getCentralValue(), 0.01);
      assertEquals(558.63821, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(557.63821, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 23;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Cannot parse string.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      
      Object[][] objectArray0 = new Object[4][8];
      objectArray0[0] = (Object[]) doubleArray0;
      objectArray0[1] = (Object[]) doubleArray0;
      objectArray0[2] = (Object[]) doubleArray0;
      objectArray0[3] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(1, doubleArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(""));
      assertEquals(1, doubleArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(1, doubleArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(46.0, range1.getUpperBound(), 0.01);
      assertEquals(46.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range2);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Cannot parse string.", 2387.78581563, 2);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      Week week0 = new Week((-473), 5);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(39, week0.getWeek());
      assertEquals(304L, week0.getSerialIndex());
      assertEquals(5, week0.getYearValue());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-473), (-355.9635198226424), 5, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range1);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      int int0 = (-3833);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("LKm$_.'p^-)5gwn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(30.7F);
      assertEquals(30.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-121);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-121)}, byteArray0);
      assertEquals((short) (-5753), bigInteger0.shortValue());
      assertEquals((byte) (-121), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      
      defaultStatisticalCategoryDataset0.add((Number) (byte) (-23), (Number) bigInteger1, (Comparable) regularTimePeriod0, (Comparable) float0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Double double0 = new Double(2);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "Fourth";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList0.add(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      int int0 = 177;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Double double0 = new Double(2);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotEquals((double)double0, (double)number1, 0.01);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-3189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((-2447.7), 401.456);
      assertEquals(401.456, xYDataItem0.getYValue(), 0.01);
      assertEquals((-2447.7), xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-505), (-505), (-505));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-505,MONTH=-505,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-505,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(date0);
      
      Short short0 = new Short((short)16);
      assertEquals((short)16, (short)short0);
      assertNotNull(short0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) short0, (Number) (-2447.7), (Number) (-2447.7), (Number) (-2447.7), (Number) (-2447.7), (Number) (-2447.7), (Number) short0, (Number) (-2447.7), (List) arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-505,MONTH=-505,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-505,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-2447.7), number0);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2447.7));
      assertEquals(2, doubleArray0.length);
      assertEquals((-4895.4), range0.getLowerBound(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-3671.5499999999997), range0.getCentralValue(), 0.01);
      assertEquals(2447.7, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertFalse(boolean0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      String string0 = "%p,9Cx'ThzR}O'[A";
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%p,9Cx'ThzR}O'[A", "%p,9Cx'ThzR}O'[A", doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(121, 121);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Minute minute0 = new Minute();
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertFalse(minute1.equals((Object)minute0));
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotNull(minute1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-2.147483648E9), (-2.147483648E9), (-518), minute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      defaultStatisticalCategoryDataset0.add((Number) 23, (Number) 23, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      arrayList1.sort((Comparator<? super Float>) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "Requires 'start' < 'end'.";
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "Requires 'start' < 'end'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1606.7673F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1606.7673F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float1, (OHLCDataItem[]) null);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(float1, (OHLCDataItem[]) null);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean1 = linkedList0.add(defaultOHLCDataset1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(defaultOHLCDataset0));
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float1));
      assertFalse(arrayList0.contains(float0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = new Range(2.0, 2.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      Range range1 = Range.expandToInclude((Range) null, (-2118.8));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2118.8), range1.getLowerBound(), 0.01);
      assertEquals((-2118.8), range1.getCentralValue(), 0.01);
      assertEquals((-2118.8), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 1551.750028);
      assertEquals(1551.750028, range1.getLowerBound(), 0.01);
      assertEquals(1551.750028, range1.getCentralValue(), 0.01);
      assertEquals(1551.750028, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, true);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 570.2634732;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 862.13;
      doubleArray4[1] = 570.2634732;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 570.2634732;
      doubleArray4[4] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 570.2634732;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 862.13;
      doubleArray5[4] = 862.13;
      doubleArray5[5] = 862.13;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("X3fpH%Q1|pxiO}V8r#7", "'&v7vHz~F/&A/E", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(0, 0, 59);
      assertNotNull(mockDate0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 59, 1613.4031, (-2414.460338503983), (-2414.460338503983));
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Wed Feb 28 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals((-2203977600000L), minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals((-2203977600000L), minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener((EventListener) null);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(boolean0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      SerialDate serialDate0 = SerialDate.createInstance(18);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, serialDate0.getMonth());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(18, serialDate0.toSerial());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertNotNull(serialDate0);
      
      Date date0 = serialDate0.toDate();
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, serialDate0.getMonth());
      assertEquals(4, serialDate0.getDayOfWeek());
      assertNull(serialDate0.getDescription());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(18, serialDate0.toSerial());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Integer integer0 = new Integer(23);
      assertEquals(23, (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "permitted.  Try using the addOrUpdate() method.", "Fourth1");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("permitted.  Try using the addOrUpdate() method.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Fourth1", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number1);
      
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      Vector<Byte> vector0 = new Vector<Byte>();
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      arrayList1.sort((Comparator<? super Float>) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(1, numberArray0.length);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertNotNull(defaultTableXYDataset1);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset1, 1280);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      
      ArrayList<XYBarDataset> arrayList2 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth1", "Fourth1", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Integer integer1 = new Integer(1280);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1280, (int)integer1);
      assertNotNull(integer1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertEquals(1, numberArray0.length);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection2 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertNotNull(taskSeriesCollection2);
      
      Float float1 = new Float(2958.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2958.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      boolean boolean1 = arrayList0.add(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(0.0F));
      assertFalse(arrayList0.contains(float1));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, (OHLCDataItem[]) null);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean2 = linkedList0.add(defaultOHLCDataset0);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains(defaultOHLCDataset0));
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) arrayList0, true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection2));
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection2));
      assertTrue(arrayList0.contains(0.0F));
      assertFalse(arrayList0.contains(float1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection2);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection3 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection3.equals((Object)taskSeriesCollection2));
      assertTrue(taskSeriesCollection3.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection3.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection3.getRowCount());
      assertEquals(0, taskSeriesCollection3.getColumnCount());
      assertNotNull(taskSeriesCollection3);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection2, true);
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection3));
      assertNotSame(taskSeriesCollection2, taskSeriesCollection3);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      long long0 = hour0.getMiddleMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-1402.43023), 23, mockDate0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = Range.expandToInclude((Range) null, 23);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, range1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(0.0F));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(0.0F));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(arrayList0.contains(0.0F));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1280);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      Number[][] numberArray0 = new Number[0][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, "TimePeriodValue[", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = new Integer(1280);
      assertEquals(1280, (int)integer0);
      assertNotNull(integer0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) 0.0F);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener((DatasetChangeListener) null);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1474.46));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1474.46), range1.getCentralValue(), 0.01);
      assertEquals((-1474.46), range1.getUpperBound(), 0.01);
      assertEquals((-1474.46), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, range1, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1474.46), range1.getCentralValue(), 0.01);
      assertEquals((-1474.46), range1.getUpperBound(), 0.01);
      assertEquals((-1474.46), range1.getLowerBound(), 0.01);
      assertNull(range2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 2112.837846522304);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Float float0 = new Float((-441.0));
      assertEquals((-441.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertFalse(arrayList1.contains("Fourth"));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      defaultStatisticalCategoryDataset0.add((-441.0), (-1.0), (Comparable) float0, (Comparable) "Fourth");
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertEquals((-441.0), range0.getCentralValue(), 0.01);
      assertEquals((-441.0), range0.getLowerBound(), 0.01);
      assertEquals((-441.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-440.0) <= upper (-442.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      defaultStatisticalCategoryDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      boolean boolean0 = false;
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((DefaultOHLCDataset) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 148);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1552.726011810232);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1552.726011810232, range1.getLowerBound(), 0.01);
      assertEquals(1552.726011810232, range1.getCentralValue(), 0.01);
      assertEquals(1552.726011810232, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      vector0.clear();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean1 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[null, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      double double0 = 168.48;
      Range range1 = Range.expandToInclude((Range) null, 168.48);
      assertEquals(168.48, range1.getLowerBound(), 0.01);
      assertEquals(168.48, range1.getCentralValue(), 0.01);
      assertEquals(168.48, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      Range range1 = timeTableXYDataset0.getDomainBounds(true);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertTrue(range2.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(range2, range0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-2447.7), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2447.7), range2.getCentralValue(), 0.01);
      assertEquals((-2447.7), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(4895.4, range3.getLength(), 0.01);
      assertEquals((-2447.7), range3.getCentralValue(), 0.01);
      assertEquals((-4895.4), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean1 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (-1.7976931348623157E308));
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1.7976931348623157E308), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(1.0F));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(1.0F));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 603);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) 1.0F);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals((double)double0, (double)number1, 0.01);
      assertEquals((double)double0, (double)number0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) double0, 1741.68216320743, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = Range.expandToInclude((Range) null, 23);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, range1, false);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      arrayList1.sort((Comparator<? super Float>) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, (-1149.861605925));
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1149.861605925), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.7976931348623157E308), (-1400.5597060305), 4, integer0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1149.861605925), lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1149.861605925), lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1149.861605925), lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertNotNull(xYSeriesCollection1);
      
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection0));
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection1));
      assertEquals(1.0, xYSeriesCollection2.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection2.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection2.getSeriesCount());
      assertFalse(xYSeriesCollection2.isAutoWidth());
      assertNotNull(xYSeriesCollection2);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection2));
      assertTrue(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection2);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1149.861605925), lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(173, 173, 162, 0, (-226));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertEquals(3719160840000L, millisecond0.getLastMillisecond());
      assertEquals(3719160840000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      XYSeries xYSeries0 = new XYSeries((-2447.7), true, false);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      boolean boolean0 = simpleTimePeriod0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-2447.7), (double) 162);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(162.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-2447.7), xYSeries0.getMinX(), 0.01);
      assertEquals(162.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2447.7), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleTimePeriod0, (-2447.7));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals("Sat Nov 08 20:14:00 GMT 2087", mockDate0.toString());
      assertEquals(3719160840000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3719160840000L, simpleTimePeriod0.getStartMillis());
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-1402.43023), 23, mockDate0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(23, 0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 0, 4, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection((XYSeries) null);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection1);
      
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection();
      assertTrue(xYSeriesCollection2.equals((Object)xYSeriesCollection1));
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection0));
      assertEquals(1.0, xYSeriesCollection2.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection2.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection2.isAutoWidth());
      assertEquals(0, xYSeriesCollection2.getSeriesCount());
      assertNotNull(xYSeriesCollection2);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection2));
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 6.283185307179586);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range1, false);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (-776.45892324482);
      doubleArray0[2] = (-776.45892324482);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, (-776.45892324482), (-776.45892324482)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 6.283185307179586, 3716.68377199, 2, (-776.45892324482));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, (-776.45892324482), (-776.45892324482)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNull(xYSeries0.getDescription());
      assertEquals((-35525.721737341875), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(6.283185307179586, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1.0728686182097956E10), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3716.68377199, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      Vector<TimeTableXYDataset> vector0 = new Stack<TimeTableXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[] doubleArray0 = new double[21];
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem(397.0, 397.0);
      assertEquals(397.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(397.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertEquals(397.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(397.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(397.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(397.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 17, 121);
      assertEquals(17, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(121, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(6.6302447297296896E18, 590.170868272);
      assertEquals(590.170868272, powerFunction2D0.getB(), 0.01);
      assertEquals(6.6302447297296896E18, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2071.31704408077), 310.3023675732247, 278, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(590.170868272, powerFunction2D0.getB(), 0.01);
      assertEquals(6.6302447297296896E18, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2071.31704408077), xYSeries0.getMinX(), 0.01);
      assertEquals(278, xYSeries0.getItemCount());
      assertEquals(2.6459261514419755E-46, xYSeries0.getMinY(), 0.01);
      assertEquals(310.3023675732247, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(590.170868272, powerFunction2D0.getB(), 0.01);
      assertEquals(6.6302447297296896E18, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2071.31704408077), xYSeries0.getMinX(), 0.01);
      assertEquals(278, xYSeries0.getItemCount());
      assertEquals(2.6459261514419755E-46, xYSeries0.getMinY(), 0.01);
      assertEquals(310.3023675732247, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries0);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(590.170868272, powerFunction2D0.getB(), 0.01);
      assertEquals(6.6302447297296896E18, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2071.31704408077), xYSeries0.getMinX(), 0.01);
      assertEquals(278, xYSeries0.getItemCount());
      assertEquals(2.6459261514419755E-46, xYSeries0.getMinY(), 0.01);
      assertEquals(310.3023675732247, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection1);
      
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection0));
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection1));
      assertFalse(xYSeriesCollection2.isAutoWidth());
      assertEquals(0, xYSeriesCollection2.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection2.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection2);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection2));
      assertTrue(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(590.170868272, powerFunction2D0.getB(), 0.01);
      assertEquals(6.6302447297296896E18, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2071.31704408077), xYSeries0.getMinX(), 0.01);
      assertEquals(278, xYSeries0.getItemCount());
      assertEquals(2.6459261514419755E-46, xYSeries0.getMinY(), 0.01);
      assertEquals(310.3023675732247, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-880.5073382537726), range0.getCentralValue(), 0.01);
      assertEquals(2382.6194116539946, range0.getLength(), 0.01);
      assertEquals((-2071.81704408077), range0.getLowerBound(), 0.01);
      assertEquals(310.8023675732247, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset1));
      assertTrue(defaultStatisticalCategoryDataset2.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset2);
      
      defaultStatisticalCategoryDataset1.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      
      boolean boolean0 = defaultStatisticalCategoryDataset1.equals((Object) null);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset2));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset2);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.add((DefaultOHLCDataset) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      
      String string0 = "H>L5k-4Duv{=vOJb";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("1", "H>L5k-4Duv{=vOJb", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, false);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(155.0F);
      assertEquals(155.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1.0, (double) 155.0F, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowIndex(float0);
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(range1.equals((Object)range0));
      assertTrue(arrayList0.contains(float0));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-154.0), range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(310.0, range2.getLength(), 0.01);
      assertEquals(156.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      arrayList1.sort((Comparator<? super Float>) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.726011810232);
      assertEquals(1552.726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1606.7673F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1606.7673F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = arrayList1.add(float1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(arrayList1.contains(float0));
      assertTrue(arrayList1.contains((-1606.7673F)));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, (OHLCDataItem[]) null);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean1 = linkedList0.add(defaultOHLCDataset0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(defaultOHLCDataset0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      defaultStatisticalCategoryDataset1.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = new Range((-1.0), (-1.0));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("1", "1", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(254, 86);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(85, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      categoryToPieDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-388.22946162241), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(776.45892324482, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(categoryToPieDataset0);
      
      categoryToPieDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = 2;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("1", "1", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(254, 86);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(85, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      assertFalse(stack0.contains(xYDatasetTableModel0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      assertFalse(stack0.contains(xYDatasetTableModel0));
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(85, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, number2);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(85, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(85, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number2.equals((Object)number1));
      assertTrue(number2.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number2);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1, 293, 293, 1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      boolean boolean0 = keyToGroupMap0.equals(arrayList0);
      assertFalse(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(776.45892324482, range0.getLength(), 0.01);
      assertEquals((-388.22946162241), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (-776.45892324482);
      doubleArray0[1] = (-776.45892324482);
      doubleArray0[2] = (-776.45892324482);
      doubleArray0[3] = (-776.45892324482);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-776.45892324482);
      doubleArray0[6] = (-776.45892324482);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-776.45892324482), (-776.45892324482));
      assertEquals((-776.45892324482), powerFunction2D0.getB(), 0.01);
      assertEquals((-776.45892324482), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 53.0, 3716.68377199, 177, 0.0);
      assertEquals((-776.45892324482), powerFunction2D0.getB(), 0.01);
      assertEquals((-776.45892324482), powerFunction2D0.getA(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMinX(), 0.01);
      assertEquals(3716.6837719900004, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(-0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(-0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals((-776.45892324482), powerFunction2D0.getB(), 0.01);
      assertEquals((-776.45892324482), powerFunction2D0.getA(), 0.01);
      assertEquals(177, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMinX(), 0.01);
      assertEquals(3716.6837719900004, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(-0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(-0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(183, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 183, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(23, 0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(23));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertFalse(linkedList0.contains(23));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      
      Float float0 = new Float(1198.434671);
      assertEquals(1198.4347F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertFalse(linkedList0.contains(23));
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, true);
      assertFalse(linkedList0.contains(1198.434671));
      assertEquals(0, linkedList0.size());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(1739L, (long) 0);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 1739L, (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertNotNull(date0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(locale1);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals(75126539000L, quarter0.getLastMillisecond());
      assertEquals(1972, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(75126539000L, quarter0.getFirstMillisecond());
      assertEquals(7890L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals(75126539000L, quarter0.getLastMillisecond());
      assertEquals(1972, quarter0.getYearValue());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(75126539000L, quarter0.getFirstMillisecond());
      assertEquals(7890L, quarter0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) chronoUnit0, (double) 1739L, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset1);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(range0);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertFalse(linkedList0.contains(defaultStatisticalCategoryDataset0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, list0, true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener((DatasetChangeListener) null);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList1 = new ArrayList<DefaultMultiValueCategoryDataset>(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = arrayList1.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(arrayList1.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean1);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>(arrayList1);
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(arrayList1.contains(defaultMultiValueCategoryDataset0));
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = null;
      Vector vector1 = (Vector)vector0.clone();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertNotNull(vector1);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      Week week0 = new Week((-473), 5);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(304L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
      assertEquals(5, week0.getYearValue());
      assertNotNull(week0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(304L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
      assertEquals(5, week0.getYearValue());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(304L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(39, week0.getWeek());
      assertEquals(5, week0.getYearValue());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(315.34716, 310.3023675732247);
      assertEquals(310.3023675732247, lineFunction2D0.getSlope(), 0.01);
      assertEquals(315.34716, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-473), 53, 2201, week0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.sort((Comparator<? super Float>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.294637881);
      assertEquals(1552.2947F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(arrayList0.contains(float0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(float0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      int int0 = 730;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 730);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      defaultStatisticalCategoryDataset0.addChangeListener((DatasetChangeListener) null);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      
      boolean boolean0 = false;
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((DefaultOHLCDataset) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      arrayList1.sort((Comparator<? super Float>) null);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(1, numberArray0.length);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1552.294637881);
      assertEquals(1552.2947F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = arrayList0.add(float0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList0.contains(float0));
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      Range range0 = new Range(310.3023675732247, 2958L);
      assertEquals(310.3023675732247, range0.getLowerBound(), 0.01);
      assertEquals(2647.6976324267753, range0.getLength(), 0.01);
      assertEquals(2958.0, range0.getUpperBound(), 0.01);
      assertEquals(1634.1511837866124, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      String string1 = range0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Range[310.3023675732247,2958.0]", string1);
      assertEquals(310.3023675732247, range0.getLowerBound(), 0.01);
      assertEquals(2647.6976324267753, range0.getLength(), 0.01);
      assertEquals(2958.0, range0.getUpperBound(), 0.01);
      assertEquals(1634.1511837866124, range0.getCentralValue(), 0.01);
      assertNotNull(string1);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      CategoryDataset categoryDataset0 = null;
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      JList<Object> jList0 = new JList<Object>(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertNotNull(jList0);
      
      List<Object> list0 = jList0.getSelectedValuesList();
      assertFalse(list0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, list0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(1376L);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1376L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1376L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      CategoryDataset categoryDataset0 = null;
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(stack0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Requires 'start' < 'end'.", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-775.5335615549147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1551.750028;
      doubleArray1[1] = 138.776;
      doubleArray1[2] = 73.02106365;
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 138.776;
      doubleArray2[1] = 138.776;
      doubleArray2[2] = 138.776;
      doubleArray2[3] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'seriesKey' argument.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1690.526028, number0);
      assertNotNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getYValue(213, (-970));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 213, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      List list0 = defaultPieDataset0.getKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-662));
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, (-662));
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-663), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      TableXYDataset tableXYDataset0 = null;
      int int0 = 730;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      boolean boolean0 = xYTaskDataset0.equals(timePeriodAnchor0);
      assertFalse(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getStartValue((Comparable) "", (Comparable) fixedMillisecond0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<XIntervalSeriesCollection> stack1 = new Stack<XIntervalSeriesCollection>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(173, 2043, 162, 0, (-226));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, simpleTimePeriod0.getStartMillis());
      assertEquals(8636703240000L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, millisecond0.getFirstMillisecond());
      assertEquals(8636703240000L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Date[] dateArray0 = new Date[4];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-226);
      doubleArray3[1] = (double) 999;
      doubleArray3[2] = 1483.27660387;
      doubleArray3[3] = (-2447.7);
      doubleArray3[4] = (-2447.7);
      doubleArray3[5] = (-2447.7);
      doubleArray3[6] = (double) (-226);
      doubleArray3[7] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-2447.7), dateArray0, doubleArray1, doubleArray3, doubleArray1, doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray3.length);
      assertArrayEquals(new double[] {(-2447.7)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2447.7), (-2447.7), (-2447.7), (-2447.7), 0.0, (-2447.7)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-226.0), 999.0, 1483.27660387, (-2447.7), (-2447.7), (-2447.7), (-226.0), 0.0}, doubleArray3, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = vector0.add(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(vector0.contains(defaultHighLowDataset0));
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2447.7)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2447.7), (-2447.7), (-2447.7), (-2447.7), 0.0, (-2447.7)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-226.0), 999.0, 1483.27660387, (-2447.7), (-2447.7), (-2447.7), (-226.0), 0.0}, doubleArray3, 0.01);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-1402.43023), 23, mockDate0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
      assertTrue(range0.equals((Object)range1));
      assertNotSame(range0, range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertNull(range2);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(776.45892324482, range4.getLength(), 0.01);
      assertEquals((-776.45892324482), range4.getLowerBound(), 0.01);
      assertEquals((-388.22946162241), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertTrue(range5.equals((Object)range4));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(776.45892324482, range5.getLength(), 0.01);
      assertEquals((-388.22946162241), range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range5.getLowerBound(), 0.01);
      assertNotNull(range5);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range1, true);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-776.45892324482), range4.getLowerBound(), 0.01);
      assertEquals((-388.22946162241), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(776.45892324482, range4.getLength(), 0.01);
      assertNotNull(range4);
      
      Range range5 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range4);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals((-388.22946162241), range5.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range5.getLowerBound(), 0.01);
      assertEquals(776.45892324482, range5.getLength(), 0.01);
      assertNotNull(range5);
      
      Range range6 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range6);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4.777594831070629E35, (-1.0));
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.777594831070629E35, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      int int0 = 4;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, (-2449.1176), 4, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.777594831070629E35, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.777594831070629E35, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      int int1 = 0;
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection((XYSeries) null);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertNotNull(xYSeriesCollection1);
      
      // Undeclared exception!
      try { 
        xYSeriesCollection1.getStartY(0, (-366));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "Fourth";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1441), (-656));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      MockDate mockDate0 = new MockDate((-2140375282), 185, (-2146250170), (-2146250170), (-2140375282), (-209));
      assertNotNull(mockDate0);
      
      mockSimpleDateFormat0.set2DigitYearStart(mockDate0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Wed May 13 06:17:57 GMT 191673733", mockDate0.toString());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      long long0 = 1739L;
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 0);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 1739L, (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Fri May 19 12:00:00 GMT 1972", date0.toString());
      assertNotNull(date0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(locale1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((TimeTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      histogramDataset0.validateObject();
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(cursor0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-12238.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-6119.25), range0.getCentralValue(), 0.01);
      assertEquals(12238.5, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2118.8));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-2118.8), range2.getUpperBound(), 0.01);
      assertEquals((-7014.2), range2.getLowerBound(), 0.01);
      assertEquals(4895.4, range2.getLength(), 0.01);
      assertEquals((-4566.5), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iRaD$SQ79!7.nxk=[";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "hzqPtcZG\"";
      String string0 = "L]w,";
      stringArray0[4] = "L]w,";
      stringArray0[5] = "C,))LQ&s/";
      Number[][] numberArray0 = new Number[8][0];
      Number[] numberArray1 = new Number[6];
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getX((-4606), (-4606));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82)}, byteArray0);
      assertEquals((short) (-20818), bigInteger0.shortValue());
      assertEquals((byte) (-82), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Double double0 = new Double(1122.223);
      assertEquals(1122.223, (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) 23, (Number) (byte) (-82), (Comparable) (byte) (-82), (Comparable) (byte) (-82));
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      
      int int0 = keyToGroupMap0.getGroupIndex(mockDate0);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertEquals((-1), int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(range2, range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(11.5, range2.getCentralValue(), 0.01);
      assertEquals(23.0, range2.getUpperBound(), 0.01);
      assertEquals(23.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(11.5, range3.getCentralValue(), 0.01);
      assertEquals(23.0, range3.getUpperBound(), 0.01);
      assertEquals(23.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      double double0 = (-2447.7);
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-2447.7), (-2447.7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Long long0 = new Long(2958L);
      assertEquals(2958L, (long)long0);
      assertNotNull(long0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(243, 243, 460);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=243,MONTH=243,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=460,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=243,MONTH=243,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=460,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(1582, quarter0.getYearValue());
      assertEquals((-12219292800000L), quarter0.getLastMillisecond());
      assertEquals(6332L, quarter0.getSerialIndex());
      assertEquals((-12219292800000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertNotNull(quarter0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) jDBCPieDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=243,MONTH=243,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=460,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(1582, quarter0.getYearValue());
      assertEquals((-12219292800000L), quarter0.getLastMillisecond());
      assertEquals(6332L, quarter0.getSerialIndex());
      assertEquals((-12219292800000L), quarter0.getFirstMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertNotNull(categoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(2958L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2958L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2958L, fixedMillisecond0.getSerialIndex());
      assertEquals(2958L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = null;
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[2][7];
      objectArray0[0] = (Object[]) doubleArray0;
      objectArray0[1] = (Object[]) doubleArray0;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "Fourth";
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      JTable jTable1 = new JTable(0, 0);
      assertFalse(jTable1.equals((Object)jTable0));
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertNotNull(jTable1);
      
      Locale locale0 = jTable1.getLocale();
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(jTable1, jTable0);
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertFalse(jTable1.equals((Object)jTable0));
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(jTable1.equals((Object)jTable0));
      assertFalse(set0.contains("Fourth"));
      assertNotSame(jTable1, jTable0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable1.getCursor();
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(jTable1, jTable0);
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 175);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(jTable1, jTable0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertFalse(range1.equals((Object)range0));
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(range1, range0);
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(jTable1, jTable0);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable1.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.getIgnoreRepaint());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 293);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number2);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(292, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1593.633, 1739L);
      assertEquals(1739.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1593.633, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Requires 'start' < 'end'.", (KeyedValues) pieDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(categoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 180);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(173, 2043, 162, 0, (-226));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, simpleTimePeriod0.getEndMillis());
      assertEquals(8636703240000L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, millisecond0.getFirstMillisecond());
      assertEquals(8636703240000L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) millisecond0;
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, simpleTimePeriod0.getEndMillis());
      assertEquals(8636703240000L, simpleTimePeriod0.getStartMillis());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(2.0, (double) 0);
      assertEquals("Fri Sep 08 20:14:00 GMT 2243", mockDate0.toString());
      assertEquals(8636703240000L, simpleTimePeriod0.getEndMillis());
      assertEquals(8636703240000L, simpleTimePeriod0.getStartMillis());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYDataItem0);
      
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(cursor0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(locale0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = null;
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, linkedList0.size());
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      assertEquals(2, doubleArray0.length);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 196);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 196, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("Fourth"));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset(timeZone0, locale0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset1);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertFalse(set1.contains("Fourth"));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertSame(set1, set0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      
      Cursor cursor1 = jTable0.getCursor();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertSame(cursor1, cursor0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(0, cursor1.getType());
      assertEquals("Default Cursor", cursor1.getName());
      assertNotNull(cursor1);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-7343.1), range2.getCentralValue(), 0.01);
      assertEquals((-14686.2), range2.getLowerBound(), 0.01);
      assertEquals(14686.2, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals((-2447.7), range3.getUpperBound(), 0.01);
      assertEquals((-2447.7), range3.getCentralValue(), 0.01);
      assertEquals((-2447.7), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-785.259), (-785.259));
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-785.259), (-135.921304495516), 8, "Fourth");
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals((-785.259), powerFunction2D0.getA(), 0.01);
      assertEquals((-785.259), powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 2);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertEquals(2.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range3);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 681, 1.0);
      assertEquals(681.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertEquals(681.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(681.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range4);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(681.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((-2447.7), 401.456);
      assertEquals(401.456, xYDataItem0.getYValue(), 0.01);
      assertEquals((-2447.7), xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset1);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-4895.4), number1);
      assertNotNull(number1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(defaultBoxAndWhiskerXYDataset0.equals((Object)defaultBoxAndWhiskerXYDataset1));
      assertNotSame(defaultBoxAndWhiskerXYDataset0, defaultBoxAndWhiskerXYDataset1);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(2.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2.0, range2.getCentralValue(), 0.01);
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range4);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeriesKey(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(range1, range0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(529.0806669, 529.0806669);
      assertEquals(529.0806669, powerFunction2D0.getA(), 0.01);
      assertEquals(529.0806669, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Year year0 = new Year((-2333));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2333L), year0.getSerialIndex());
      assertEquals((-2333), year0.getYear());
      assertEquals("-2333", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 1.5, 1600, year0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(1739L, (long) 0);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 1739L, (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertNotNull(date0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertNotNull(locale1);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(75126539000L, quarter0.getFirstMillisecond());
      assertEquals(1972, quarter0.getYearValue());
      assertEquals(75126539000L, quarter0.getLastMillisecond());
      assertEquals(7890L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri May 19 12:28:59 GMT 1972", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(75126539000L, quarter0.getFirstMillisecond());
      assertEquals(1972, quarter0.getYearValue());
      assertEquals(75126539000L, quarter0.getLastMillisecond());
      assertEquals(7890L, quarter0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) chronoUnit0, (double) 1739L, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset1);
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) instant1);
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(pieDataset2);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1593.633, 1739L);
      assertEquals(1739.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1593.633, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, Double.NEGATIVE_INFINITY, 0, 2043, instant0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DomainOrder domainOrder0 = xYTaskDataset0.getDomainOrder();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Requires 'start' < 'end'.", (KeyedValues) pieDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(categoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 180);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-638.7217), 180);
      assertEquals(180.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-638.7217), normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertFalse(year1.equals((Object)year0));
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertNotNull(year1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 3268.54577, 180, 507, year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(23, 0);
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, 0, 4, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection((XYSeries) null);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertEquals(0, xYSeriesCollection1.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertNotNull(xYSeriesCollection1);
      
      int int0 = (-366);
      XYSeriesCollection xYSeriesCollection2 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection2.equals((Object)xYSeriesCollection0));
      assertTrue(xYSeriesCollection2.equals((Object)xYSeriesCollection1));
      assertFalse(xYSeriesCollection2.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection2.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection2.getSeriesCount());
      assertNotNull(xYSeriesCollection2);
      
      // Undeclared exception!
      try { 
        xYSeriesCollection2.getStartY(28, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.019598910517713158;
      doubleArray1[1] = 0.0;
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(776.4785221553377, range2.getLength(), 0.01);
      assertEquals(0.019598910517713158, range2.getUpperBound(), 0.01);
      assertEquals((-388.2196621671511), range2.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeriesKey(3210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("Fourth"));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertNotNull(jTable0);
      
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "Requires 'start' < 'end'.";
      int int0 = 24;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertNotNull(jTable0);
      
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem(2913.25433, (-1080.04625112));
      assertEquals((-1080.04625112), xYDataItem0.getYValue(), 0.01);
      assertEquals(2913.25433, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-776.45892324482));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((-776.45892324482), (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "%p,9Cx'ThzRT}O'[A";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeriesKey(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getUpperBound(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals((-2447.7), range3.getCentralValue(), 0.01);
      assertEquals((-2447.7), range3.getUpperBound(), 0.01);
      assertEquals((-2447.7), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(4895.4, range4.getLength(), 0.01);
      assertEquals((-2447.7), range4.getCentralValue(), 0.01);
      assertEquals((-4895.4), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "Fourth";
      String string1 = "%p,9Cx'ThzRT}O'[A";
      double[][] doubleArray0 = new double[2][7];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 655.10318366);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(655.10318366, range0.getCentralValue(), 0.01);
      assertEquals(655.10318366, range0.getUpperBound(), 0.01);
      assertEquals(655.10318366, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 655.10318366);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(655.10318366, range1.getUpperBound(), 0.01);
      assertEquals(655.10318366, range1.getCentralValue(), 0.01);
      assertEquals(655.10318366, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string1));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeriesKey(3210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2447.7);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2447.7);
      doubleArray1[1] = (-2447.7);
      doubleArray1[2] = (-2447.7);
      doubleArray1[3] = (-2447.7);
      doubleArray1[5] = (-2447.7);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-1), 0);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Sat Dec 30 23:00:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209078800000L), year0.getLastMillisecond());
      assertEquals(1899, year0.getYear());
      assertEquals(1899L, year0.getSerialIndex());
      assertEquals((-2209078800000L), year0.getFirstMillisecond());
      assertEquals("1899", year0.toString());
      assertNotNull(year0);
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-9999);
      doubleArray1[4] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-9999);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 9999;
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-9999);
      doubleArray3[1] = (double) (-1);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) (-1);
      doubleArray3[5] = (double) 9999;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 9999;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(12238.5, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-6119.25), range0.getCentralValue(), 0.01);
      assertEquals((-12238.5), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 265);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond((long) 265, 1L);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, (long) 0, (TemporalUnit) chronoUnit0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant0);
      assertSame(instant0, instant1);
      assertEquals("Thu Jan 01 00:04:25 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Jan 01 00:04:25 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals(265000L, quarter0.getLastMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(265000L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (-1438.4374342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.6302447297296957E18;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = 0.5;
      doubleArray2[3] = 0.5;
      doubleArray2[4] = 0.5;
      doubleArray2[5] = 0.5;
      doubleArray2[6] = (-2618.7337521332);
      doubleArray2[7] = 0.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2618.7337521332);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.5;
      doubleArray5[1] = 0.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 6.6302447297296957E18;
      doubleArray6[1] = 0.5;
      doubleArray6[2] = (-2618.7337521332);
      doubleArray6[3] = 6.6302447297296957E18;
      doubleArray6[4] = (-1318.326189303);
      doubleArray6[5] = 0.5;
      doubleArray6[6] = (-2618.7337521332);
      doubleArray6[7] = (-776.45892324482);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-1318.326189303);
      doubleArray7[1] = 6.6302447297296957E18;
      doubleArray7[2] = (-776.45892324482);
      doubleArray7[3] = 3979.074277401848;
      doubleArray7[4] = (-2618.7337521332);
      doubleArray7[5] = 0.5;
      doubleArray7[6] = 0.5;
      doubleArray7[7] = 0.5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = 6.6302447297296957E18;
      doubleArray9[1] = (-2618.7337521332);
      doubleArray9[2] = 6.6302447297296957E18;
      doubleArray9[3] = 1.5;
      doubleArray9[4] = 3979.074277401848;
      doubleArray9[5] = (-776.45892324482);
      doubleArray9[6] = 6.6302447297296957E18;
      doubleArray9[7] = (-776.45892324482);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<Long>) hour0;
      comparableArray0[1] = (Comparable<Long>) hour0;
      comparableArray0[2] = (Comparable<Long>) hour0;
      comparableArray0[3] = (Comparable<Long>) hour0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      assertEquals(2958.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2958.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(""));
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>(66);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      JTable jTable0 = new JTable(vector0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertNotNull(jTableHeader0);
      
      Dimension dimension0 = jTable0.getMaximumSize();
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      jTableHeader0.removeNotify();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      
      JTable jTable1 = jTableHeader0.getTable();
      assertSame(jTable0, jTable1);
      assertSame(jTable1, jTable0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusCycleRoot());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.getIgnoreRepaint());
      assertNotNull(jTable1);
      
      Cursor cursor0 = jTable1.getCursor();
      assertSame(jTable0, jTable1);
      assertSame(jTable1, jTable0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(66, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTableHeader0.getFocusTraversalKeysEnabled());
      assertFalse(jTableHeader0.getIgnoreRepaint());
      assertFalse(jTableHeader0.isFocusTraversalPolicySet());
      assertFalse(jTableHeader0.isFocusTraversalPolicyProvider());
      assertFalse(jTableHeader0.isFocusCycleRoot());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.isFocusCycleRoot());
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.getIgnoreRepaint());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, false);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2.0, 1238.70206978499);
      assertEquals(2.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1238.70206978499, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      int int0 = 2;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      int int1 = 466;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getStartY(3434, 466);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3434, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Requires 'start' < 'end'.", (KeyedValues) pieDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(categoryDataset0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("Requires 'start' < 'end'."));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = timePeriodValuesCollection0.getDomainBounds(true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range1);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, (-2017.7346));
      assertEquals((-2017.7346), lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.POSITIVE_INFINITY, (-1720.2132), 334, week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "Fourth";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      double[][] doubleArray2 = new double[3][5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%p,9Cx'ThzRT}O'[A", (String) null, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(categoryDataset0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 642);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 642, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 0.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(4895.4, range1.getLength(), 0.01);
      assertEquals((-4895.4), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-4895.4), number0);
      assertNotNull(number0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.not();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertEquals((short)16890, bigInteger1.shortValue());
      assertEquals((byte) (-6), bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      long long0 = bigInteger0.longValueExact();
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals(6630244729729695237L, long0);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) (byte)113, (Comparable) (byte)3, (Comparable) (byte)113);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(8, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertEquals(6.6302447297296957E18, range0.getUpperBound(), 0.01);
      assertEquals(6.6302447297296957E18, range0.getLowerBound(), 0.01);
      assertEquals(6.6302447297296957E18, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getGroupIndex((byte)5);
      assertEquals((-1), int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(6.6302447297296957E18, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.6302447297296957E18, range1.getLength(), 0.01);
      assertEquals(3.3151223648648479E18, range1.getCentralValue(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(3.3151223648648479E18, range2.getCentralValue(), 0.01);
      assertEquals(6.6302447297296957E18, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(6.6302447297296957E18, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Fourth", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[6][2];
      objectArray0[0] = (Object[]) doubleArray0;
      objectArray0[1] = (Object[]) doubleArray0;
      objectArray0[2] = (Object[]) doubleArray0;
      objectArray0[3] = (Object[]) doubleArray0;
      objectArray0[4] = (Object[]) doubleArray0;
      objectArray0[5] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      assertEquals(6, objectArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(6, objectArray0.length);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(6, objectArray0.length);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("Fourth"));
      assertEquals(6, objectArray0.length);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(6, objectArray0.length);
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(6, objectArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals(6, objectArray0.length);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "l~CfhFA7x!:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "jl~[oI8NW7st+WGZ[", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2447.7, range0.getLength(), 0.01);
      assertEquals((-1223.85), range0.getCentralValue(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][8];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      JTable jTable1 = new JTable(995, 0);
      assertFalse(jTable1.equals((Object)jTable0));
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertNotNull(jTable1);
      
      Locale locale0 = jTable1.getLocale();
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(jTable1, jTable0);
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertFalse(jTable1.equals((Object)jTable0));
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(jTable1.equals((Object)jTable0));
      assertFalse(set0.contains("jl~[oI8NW7st+WGZ["));
      assertNotSame(jTable1, jTable0);
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable1.getCursor();
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(jTable1, jTable0);
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-961));
      assertFalse(jTable1.equals((Object)jTable0));
      assertNotSame(jTable1, jTable0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2321.845641937258));
      assertFalse(jTable1.equals((Object)jTable0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(jTable1, jTable0);
      assertNotSame(range1, range0);
      assertTrue(jTable1.getFocusTraversalKeysEnabled());
      assertFalse(jTable1.isFocusTraversalPolicyProvider());
      assertFalse(jTable1.isFocusTraversalPolicySet());
      assertFalse(jTable1.getIgnoreRepaint());
      assertFalse(jTable1.isFocusCycleRoot());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2321.845641937258), range1.getUpperBound(), 0.01);
      assertEquals((-2321.845641937258), range1.getCentralValue(), 0.01);
      assertEquals((-2321.845641937258), range1.getLowerBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range1);
      
      PriorityQueue<DefaultOHLCDataset> priorityQueue0 = new PriorityQueue<DefaultOHLCDataset>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-1223.85), range3.getCentralValue(), 0.01);
      assertEquals(2447.7, range3.getLength(), 0.01);
      assertEquals((-2447.7), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.0));
      assertNull(range0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      Instant instant0 = MockInstant.ofEpochSecond(1L, 1L);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, (-600L), (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Wed Dec 31 14:00:01 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Wed Dec 31 14:00:01 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-35999000L), quarter0.getFirstMillisecond());
      assertEquals((-35999000L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1969, quarter0.getYearValue());
      assertEquals(7880L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1L);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Wed Dec 31 14:00:01 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-35999000L), quarter0.getFirstMillisecond());
      assertEquals((-35999000L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1969, quarter0.getYearValue());
      assertEquals(7880L, quarter0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) quarter0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Wed Dec 31 14:00:01 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-35999000L), quarter0.getFirstMillisecond());
      assertEquals((-35999000L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1969, quarter0.getYearValue());
      assertEquals(7880L, quarter0.getSerialIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) timeSeriesDataItem0, (double) 4, 60);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Wed Dec 31 14:00:01 GMT 1969", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals((-35999000L), quarter0.getFirstMillisecond());
      assertEquals((-35999000L), quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1969, quarter0.getYearValue());
      assertEquals(7880L, quarter0.getSerialIndex());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(1739L, (long) 0);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 1739L, (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(106079000L, quarter0.getFirstMillisecond());
      assertEquals(106079000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(106079000L, quarter0.getFirstMillisecond());
      assertEquals(106079000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) chronoUnit0, (double) 1739L, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(1739L, (long) 0);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 1739L, (TemporalUnit) chronoUnit0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals(106079000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(106079000L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (double) 1);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals(106079000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(106079000L, quarter0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) chronoUnit0, (double) 1739L, 1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) date0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertNotNull(pieDataset2);
      
      PieDataset pieDataset3 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) timeSeriesDataItem0, 2303.33);
      assertTrue(pieDataset3.equals((Object)pieDataset0));
      assertTrue(pieDataset3.equals((Object)pieDataset2));
      assertTrue(pieDataset3.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotSame(pieDataset3, pieDataset1);
      assertNotSame(pieDataset3, pieDataset2);
      assertNotSame(pieDataset3, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset3);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Jan 02 05:27:59 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals(106079000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(106079000L, quarter0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(pieDataset3);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-776.45892324482), range0.getUpperBound(), 0.01);
      assertEquals((-776.45892324482), range0.getLowerBound(), 0.01);
      assertEquals((-776.45892324482), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-776.45892324482), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-776.45892324482), range1.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(776.45892324482, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-388.22946162241), range2.getCentralValue(), 0.01);
      assertEquals((-776.45892324482), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeriesKey(3210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.xy.XYDataItem", "Requires 'start' < 'end'.", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      defaultStatisticalCategoryDataset0.add((Number) bigInteger0, (Number) (byte)113, (Comparable) (byte)3, (Comparable) (byte)113);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)3, (byte)92, (byte)116, (byte)1, (byte)113, (byte) (-66), (byte)5}, byteArray0);
      assertEquals((short) (-16891), bigInteger0.shortValue());
      assertEquals((byte)5, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertEquals(6.6302447297296957E18, range0.getLowerBound(), 0.01);
      assertEquals(6.6302447297296957E18, range0.getCentralValue(), 0.01);
      assertEquals(6.6302447297296957E18, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getGroupIndex((byte)5);
      assertEquals((-1), int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(6.6302447297296957E18, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.6302447297296957E18, range1.getUpperBound(), 0.01);
      assertEquals(3.3151223648648479E18, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals(0, cursor0.getType());
      assertEquals("Default Cursor", cursor0.getName());
      assertNotNull(cursor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2447.7), range0.getLowerBound(), 0.01);
      assertEquals((-2447.7), range0.getUpperBound(), 0.01);
      assertEquals((-2447.7), range0.getCentralValue(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals((-2447.7), range1.getCentralValue(), 0.01);
      assertEquals((-4895.4), range1.getLowerBound(), 0.01);
      assertEquals(4895.4, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-4895.4), number0);
      assertNotNull(number0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals((-2447.7), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(4895.4, range3.getLength(), 0.01);
      assertEquals((-4895.4), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      
      String string0 = "Requires 'start' < 'end'.";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1476.6535), (-1476.6535), 8, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      Object[][] objectArray0 = new Object[1][0];
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      Locale locale0 = jTable0.getLocale();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("%p,9Cx'ThzRT}O'[A"));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(set0);
      
      Cursor cursor0 = jTable0.getCursor();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(cursor0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(12238.5, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-12238.5), range0.getLowerBound(), 0.01);
      assertEquals((-6119.25), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
      assertEquals((-1223.85), range1.getCentralValue(), 0.01);
      assertEquals((-2447.7), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2447.7, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-2447.7), (-2447.7), 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Instant instant0 = MockInstant.ofEpochSecond(2071L, 0L);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      assertEquals(ChronoUnit.MINUTES, chronoUnit0);
      
      Instant instant1 = MockInstant.plus(instant0, 0L, (TemporalUnit) chronoUnit0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertEquals("Thu Jan 01 00:34:31 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Quarter quarter0 = new Quarter(date0, timeZone0, locale0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Jan 01 00:34:31 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(2071000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(2071000L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, 1.5);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Jan 01 00:34:31 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(2071000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(2071000L, quarter0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) timeSeriesDataItem0, 301.606551866632, 0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Thu Jan 01 00:34:31 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(2071000L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(2071000L, quarter0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 6);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-671));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Sat Dec 30 12:49:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209115460000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Sat Dec 30 12:49:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209115460000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertEquals("Sat Dec 30 12:49:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209115460000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209115460001L), regularTimePeriod1.getSerialIndex());
      assertEquals((-2209115460001L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-2209115460001L), regularTimePeriod1.getMiddleMillisecond());
      assertEquals((-2209115460001L), regularTimePeriod1.getLastMillisecond());
      assertNotNull(regularTimePeriod1);
      
      double double0 = 301.606551866632;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1406), 2000);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1406), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) regularTimePeriod0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertEquals("Sat Dec 30 12:49:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209115460000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1406), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      int int0 = (-671);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) regularTimePeriod1, 2425.256, (-671));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals("Sat Dec 30 12:49:00 GMT 1899", mockDate0.toString());
      assertEquals((-2209115460000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2209115460000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2209115459999L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2209115459999L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2209115460001L), regularTimePeriod1.getSerialIndex());
      assertEquals((-2209115460001L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-2209115460001L), regularTimePeriod1.getMiddleMillisecond());
      assertEquals((-2209115460001L), regularTimePeriod1.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1406), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset1);
      
      Minute minute0 = new Minute();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNotNull(minute0);
      
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) minute0;
      int int1 = (-3412);
      Minute minute1 = null;
      try {
        minute1 = new Minute(0, 0, 1268, (-3412), (-3412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.toString();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (-2.147483648E9), "Fri Feb 14 20:21:21 GMT 2014");
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals((-2.147483648E9), double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1287.975037180187);
      assertNotNull(range0);
      assertEquals(2.147483648E9, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-799), (-1));
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      JTable jTable0 = new JTable();
      jTable0.getCursor();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-799));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "._N)iE]8+pYI<m 6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Comparable<Integer> comparable0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1), (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-799), (-1));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (-1));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries((-1339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      defaultTableColumnModel0.getColumnModelListeners();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      jTable0.getY();
      jTable0.getRowHeight((-184));
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-776.45892324482);
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      hour0.previous();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-89);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Double double0 = new Double((byte)5);
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) (byte)5, (Comparable) (byte) (-89), (Comparable) bigInteger0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      keyToGroupMap0.getGroupIndex(hour0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap1);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      XYSeries xYSeries0 = new XYSeries((byte) (-89), false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.sort((Comparator<? super Float>) null);
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double double0 = 1552.726011810232;
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      int int0 = 2135141787;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(2135141787, 939, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Fourth", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      double[][] doubleArray3 = new double[1][8];
      doubleArray3[0] = doubleArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("We.!", "We.!", doubleArray3);
      DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(194, 3392);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      XYDataset xYDataset0 = null;
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      Locale locale0 = jTable0.getLocale();
      locale0.getUnicodeLocaleKeys();
      jTable0.getCursor();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      Locale locale0 = jTable0.getLocale();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-99));
      linkedList0.add(byte0);
      TimeSeries timeSeries0 = new TimeSeries(byte0, "2mhnP", "2mhnP");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte) (-99), "Fou15");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(11, 11, Integer.MAX_VALUE);
      dateArray0[0] = (Date) mockDate0;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(11);
      Date date0 = spreadsheetDate0.toDate();
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(fixedMillisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      vector0.add(defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      TimeZone.getDefault();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(293, 173);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.0));
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 2);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, false);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      String string0 = "";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) mockDate0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Double double0 = new Double(1122.223);
      defaultStatisticalCategoryDataset0.add((Number) 23, (Number) (byte) (-82), (Comparable) (byte) (-82), (Comparable) (byte) (-82));
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      int int0 = 0;
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-680));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        arrayList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-799), (-1));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (-1));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      XYDataset xYDataset0 = null;
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      comparableArray0[1] = (Comparable<Object>) fixedMillisecond0;
      comparableArray0[2] = (Comparable<Object>) fixedMillisecond0;
      int int0 = (-2109);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(2556, (-2109), 148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 6);
      int int0 = (-671);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-671));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-671));
      double double0 = 0.5;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.5, 301.606551866632, (-671), regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2447.7);
      doubleArray2[1] = (-2447.7);
      doubleArray2[2] = (-2447.7);
      doubleArray2[3] = (-2447.7);
      doubleArray2[4] = (-2447.7);
      doubleArray2[5] = (-2447.7);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "%p,9Cx'ThzRT}O'[A", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Object[][] objectArray0 = new Object[1][0];
      objectArray0[0] = (Object[]) doubleArray0;
      JTable jTable0 = new JTable(objectArray0, doubleArray0);
      Locale locale0 = jTable0.getLocale();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      locale0.getUnicodeLocaleKeys();
      jTable0.getCursor();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2447.7));
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 265);
      MockInstant.ofEpochSecond((long) 265, 1L);
      TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      locale0.stripExtensions();
      RegularTimePeriod regularTimePeriod0 = null;
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (-1438.4374342));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Fourth", "Fourth", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Fourth");
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long(9223372036854775807L);
      vector0.add(long0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-981.183);
      doubleArray1[1] = 1895.0;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = 2835.93251488329;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 5009.623241;
      doubleArray1[6] = 727.433692;
      doubleArray1[7] = (-438.10027804);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 727.433692;
      doubleArray2[1] = (-438.10027804);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.5;
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray2[5] = 1.7976931348623157E308;
      doubleArray2[6] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.5;
      doubleArray3[1] = 5009.623241;
      doubleArray3[2] = (-438.10027804);
      doubleArray3[3] = 727.433692;
      doubleArray3[4] = 727.433692;
      doubleArray3[5] = (-438.10027804);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 5009.623241;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-438.10027804);
      doubleArray5[3] = 1.7976931348623157E308;
      doubleArray5[4] = (-438.10027804);
      doubleArray5[5] = (-438.10027804);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-981.183);
      doubleArray6[1] = 727.433692;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      int int0 = 0;
      Year year0 = new Year();
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(0, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), (-1402.43023), 23, mockDate0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      defaultStatisticalCategoryDataset0.getRowCount();
      defaultXYDataset0.validateObject();
      DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][1];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      Byte byte0 = new Byte((byte)103);
      numberArray2[0] = (Number) byte0;
      int int0 = (-161);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((byte)103, (-161));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float(1.0F);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 557.63821);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      jDBCXYDataset0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      int int0 = (-1475);
      // Undeclared exception!
      try { 
        jDBCXYDataset0.getXValue(2704, (-1475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(xYDatasetTableModel0, defaultTableColumnModel0);
      xYDatasetTableModel0.removeTableModelListener(jTable0);
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-776.45892324482));
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-776.45892324482);
      doubleArray1[1] = (-776.45892324482);
      doubleArray1[2] = (-776.45892324482);
      doubleArray1[3] = (-776.45892324482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-776.45892324482);
      doubleArray1[7] = (-776.45892324482);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      Stack<String> stack0 = new Stack<String>();
      int int0 = 3210;
      // Undeclared exception!
      try { 
        stack0.addAll(3210, (Collection<? extends String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3210
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      ArrayList<Float> arrayList1 = new ArrayList<Float>();
      arrayList1.sort((Comparator<? super Float>) null);
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      timeSeriesCollection0.getSeriesKey(0);
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 304);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("Mt:Hy9*/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2958L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      timeSeriesCollection0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958L, (double) 2958L);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      xYTaskDataset0.getDomainOrder();
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.add((DefaultOHLCDataset) null);
      linkedList0.add((DefaultOHLCDataset) null);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultStatisticalCategoryDataset0.addChangeListener(xYTaskDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) hour0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      XYDataItem xYDataItem0 = new XYDataItem(2830.089020652113, (double) 23);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2447.7);
      doubleArray0[0] = doubleArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 8);
      Range range0 = new Range((-2447.7), 8);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2447.7));
      arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      defaultXYZDataset0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }
}
