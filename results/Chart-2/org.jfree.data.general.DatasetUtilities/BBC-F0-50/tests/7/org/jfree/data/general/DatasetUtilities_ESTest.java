/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:00:53 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) millisecond0, (double) 0, "q^");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 4;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-631.19296), (-130.0), 2, (-8.0));
      assertEquals((-130.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[7][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      Float float0 = new Float((float) (-272));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) mockDate0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) mockDate0, (-957.282), (-272));
      assertNotSame(defaultPieDataset0, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(0.5);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, (-4234.06458907), 11);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Date date0 = quarter0.getStart();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 2095.3540316556023, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(quarter0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      double[] doubleArray0 = new double[7];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1416.0, 4, quarter0);
      assertEquals(1416.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-767.4), Double.POSITIVE_INFINITY, 4, (-219.0));
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-821.60576), (-1.0), 4, 1.0);
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2.147483648E9), 0.0, 4, 0.0);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) millisecond0, (double) 0, "ClassContext");
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-272), 841.0, 841.0, (-272), (-429.24107801));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(841.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double((-264));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-264));
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(1.0F);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
      Date date0 = spreadsheetDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 2, 0, 3, (-3382.761), 1.0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(9999);
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, (-4283.05182602193), 2.39669114663607, 0L, 53.75265505565533);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Double double0 = new Double((-1433.222429306818));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float(1393.6F);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate((-1593), (-1593), (-1593));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1374.0, 1393.6F, 1374.0, (-1593), 1374.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.39240928132E12, 0.8, (-1.0983932416E13), 239.619751222, Double.POSITIVE_INFINITY);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(1832.619751222, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries(long0, ".fy", "1}/rDUulqVl");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float(1393.6F);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate((-1593), (-1593), (-1593));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1374.0, 1393.6F, 1374.0, (-1593), 1374.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals((-1593.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2818), "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(1, (-5), 866);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2564.9643), (-5), (-2564.9643), (-2564.9643), (-5));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(quarter0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals((-5.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-264), (-264), (-264), (-264), (-264), (-264));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-264), 841.0, 841.0, (-264), (-757.2906449818));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(841.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[1] = (Number) 4;
      numberArray1[4] = (Number) 1;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 4;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][7];
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      Number[] numberArray1 = new Number[6];
      numberArray1[1] = (Number) double0;
      numberArray0[2] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`o4Fk", "org.jfree.data.general.DatasetUtilities", numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1, 1);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 1;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.gantt.Task", "", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-4843.331943);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("0`H)@K[my}", "0`H)@K[my}", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-2421.6659715), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(4);
      Date date0 = serialDate0.toDate();
      MockDate mockDate0 = new MockDate(32, (-956), 6);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-956), 6, (-821.60576), 4, 1869.4);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-757.2906449818), (-2.147483648E9), 0.0, 0.0, 6.283185307179586);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0, (-897.90906857));
      MockDate mockDate0 = new MockDate(3547);
      Minute minute0 = new Minute(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-6.0213006E11), 1086.76003661987, 6, minute0);
      Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0);
      assertNotNull(range0);
      assertEquals(6.0213006108776E11, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 502.70606135898;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "F", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(502.70606135898, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 1;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) minute0, (-2220.92927592783), "LbK~)S9XwEZ Q,xl");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2220.92927592783), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'pzY??3%E%XsF!nJ", "'pzY??3%E%XsF!nJ", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.8);
      assertNotNull(range0);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1089, 3042, 0, 907);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 678.0, 1089, 1089, (-1634.0), 907);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1089.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(100, 100);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) minute0, (-2220.92927592783), "LbK~)S9XwEZ Q,xl");
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      TimeSeries timeSeries0 = new TimeSeries(float0, "W.K", "W.K");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries(long0, ".fy", "1}/rDUulqVl");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float((double) (-1030.8845F));
      TimeSeries timeSeries0 = new TimeSeries(float0);
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(244, second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 3376.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double((-264));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-264));
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float(1.0F);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-8.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(3238, (-1866), (-1866), 2004, 3238, (-1866));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3238, (-3144.368385999147), 3238, 0.0, 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(9.4911326814E13, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-264), (-264), (-264), (-264), (-264), (-264));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-264), 841.0, 841.0, (-264), (-757.2906449818));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, (-4283.05182602193), 2.39669114663607, 0L, 53.75265505565533);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Double double0 = new Double((-1433.222429306818));
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      TimeSeries timeSeries0 = new TimeSeries(float0, "W.K", "W.K");
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Week week0 = new Week();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, 3497.20209787394, 3497.20209787394, (-664.8429305781216), (-664.8429305781216));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[5] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[6] = oHLCDataItemArray0[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double((-264));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, 17, 2145.91, 59, double0);
      Range range0 = DatasetUtilities.findDomainBounds(xYDataset0);
      assertEquals(2129.91, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 855);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1734.352), 1119.99410141073, (-1.0), 0.0, 1);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ef}k,}hw^/vr", ",FXzL7$y!ulo,n:z", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-4.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timeTableXYDataset0.add((TimePeriod) millisecond0, 1143.5, ";S9%}eZZuMh\u0001W{");
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1143.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timeTableXYDataset0.add((TimePeriod) millisecond0, (-1905.223), "Null 'f' argument.");
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals((-1905.223), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(0.5);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.5, 0.5);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-4929.411768758137), (-1322.115758706757), 2144933686, double0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(126);
      Date date0 = serialDate0.toDate();
      Date[] dateArray0 = new Date[5];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<Object> vector0 = new Vector<Object>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      vector0.add((Object) xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-8.0));
      Double double1 = new Double(98.3818764742);
      stack0.add(double1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, double0, double1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float((-716.0284F));
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(3238, (-1866), (-1866), (-1866), 3238, (-1866));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3238, (-1866), 3238, 0.0, 0.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (3238.0) <= upper (-1866.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-259), (-259), (-259), (-259), (-259), (-259));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-259), (-259), (-259), (-259), (-440.86956374167323));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-702), (-678));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 9999);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9999, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1866));
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1082), 1484);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 3862, 3862);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[21][0];
      double[] doubleArray1 = new double[18];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float((float) 4);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((double) (-259));
      stack0.add(float0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-1L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) list0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NEGATIVE_INFINITY, 1.1888774524216539, false, true);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleHistogramBin0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1518, (-2147012510));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add((Float) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      double[][] doubleArray0 = new double[0][5];
      double[][] doubleArray1 = new double[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((float) (-8L));
      stack0.add(float0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, (-2782));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[5];
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2145843961, 2133054597);
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2767), 4);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("FALLBACK", 78, 78);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(9999);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(1);
      stack0.add(double0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Minute minute0 = new Minute();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2306, 0, minute0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) day0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Float float0 = new Float((-1030.8845F));
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-286));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Null 'rowKeys' argument.", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 545);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 545, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("0`H)@K[my}", "0`H)@K[my}", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-907));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "Series index out of bounds");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((-2462.9905632));
      Stack<Float> stack0 = new Stack<Float>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 1457, 1457);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1456, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("u5>", "=o'(.j@5k!.;?Y", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1243);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.gnra.atasetUtilities", "org.jfree.data.gnra.atasetUtilities", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-5561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      defaultStatisticalCategoryDataset0.add((double) (-1545.931F), 1874.31302009628, (Comparable) float0, (Comparable) float0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, 1874.31302009628, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(52.2F);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3112.4), (-3392.4), (double) 52.2F, 1491.6, (-812.7755275642), 0.0, (-812.7755275642), (-2323.085197992926), (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float0, (Comparable) float0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 22);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, (-2478.90773772702));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 4.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-3811), 35);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, (-3811));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5", "5", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-282));
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "5", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Quarter quarter0 = new Quarter();
      timeTableXYDataset0.add((TimePeriod) quarter0, (double) 4, "");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timeTableXYDataset0.add((TimePeriod) millisecond0, (double) 999, "*Aa~:K9uXkTO`htRu&");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(1.0F);
      Stack<Float> stack0 = new Stack<Float>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 4);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      Day day0 = new Day();
      Hour hour0 = new Hour((-1), day0);
      defaultPieDataset0.insertValue(0, (Comparable) hour0, (double) 23);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, (double) 53, "]J*9lR");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1);
      assertNotNull(range0);
      assertEquals(27.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1841.6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) 3238);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) (-8L));
      assertNotNull(range0);
      assertEquals(8.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1841.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-913.2528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(0.8);
      stack0.add(double0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("org.jfree.data.xy.XIntervalSeriesCollection");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-259), (-259), (-259), (-259), (-259), (-259));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-259), (-259), (-259), (-259), (-440.86956374167323));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-259));
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, false);
      assertEquals((-1.1086845799E13), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-264));
      stack0.add(double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYDataset0, stack0, true);
      assertEquals(2410.91, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Float float0 = new Float((float) 1);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = new Float((-713.0F));
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("gs%mJ", "", "gs%mJ");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, (double) 53, "]J*9lR");
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals(53.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Long long0 = new Long((-8L));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      SerialDate serialDate0 = SerialDate.createInstance(126);
      Date date0 = serialDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3, 1, 5, 1.7976931348623157E308, Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Long long0 = new Long((-8L));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, oHLCDataItemArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      Stack<Float> stack0 = new Stack<Float>();
      defaultStatisticalCategoryDataset0.add((double) (-1545.931F), 1874.31302009628, (Comparable) float0, (Comparable) float0);
      stack0.add(float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals((-3420.2440503697176), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Float float0 = new Float((-713.0F));
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals((-713.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double double0 = new Double(302.41812810051096);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      double[][] doubleArray0 = new double[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(Double.NEGATIVE_INFINITY, 2240.45354352075, Double.NEGATIVE_INFINITY, 2240.45354352075, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-6.76667423623812), (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Float float0 = new Float((double) (-1030.8845F));
      TimeSeries timeSeries0 = new TimeSeries(float0);
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(244, second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 3376.0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float((double) (-1030.8845F));
      TimeSeries timeSeries0 = new TimeSeries(float0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 4, 1124, quarter0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-2818), 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1264.24661690836, 1264.24661690836, (-2818), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = new Float((-884.484));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, (-2.0), 546);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3228, 3228, 3228, 3228, 3228, 3228);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "D;:rzX>&z;EOG@\"", (Number) null);
      TimeZone timeZone0 = TimeZone.getTimeZone("D;:rzX>&z;EOG@\"");
      Minute minute0 = new Minute(mockDate0, timeZone0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) minute0, 350.09544, 1244);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 59);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) millisecond0, (double) 0, "q^");
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Day day0 = new Day();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.add((TimePeriod) day0, (-92.0), "|XKQ#(0U!A6xN;[Y");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-4091.4614638));
      assertNotNull(range0);
      assertEquals((-4137.4614638), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, (double) 53, "");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(53.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "q^<y%+?V]'=.qS/IJ#", doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals((-8.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      defaultStatisticalCategoryDataset0.add((double) (-1545.931F), 1874.31302009628, (Comparable) float0, (Comparable) float0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(float0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertEquals((-1545.9310302734375), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Minute minute0 = new Minute();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(minute0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      defaultStatisticalCategoryDataset0.add((double) (-1545.931F), 1874.31302009628, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals((-772.9655151367188), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.8;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.4, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Double double0 = new Double(0.5);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(2331L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1.0, Double.NEGATIVE_INFINITY, 1576.24592881, Double.NaN);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-3455.7487550366523), Double.NaN, 1.0, 1576.24592881, 1.0);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-259), (-259), (-259), (-259), (-259), (-259));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("&snTr__F|(iz", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, (double) 53, "");
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals(53.0, number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Float float0 = new Float((-1.7976931348623157E308));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, numberArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Double double0 = new Double((-264));
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-264));
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.TimeSeriesCollection");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, (-680), quarter0, timeZone0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("<xvhrYdO4bwTw6E4l';", 1, 30);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, (-1527.75));
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-374.33622513), (-437.7008107), (-374.33622513), (-374.33622513), (-437.7008107));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1.39240928132E12, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-374.33622513), (-437.7008107), (-374.33622513), (-374.33622513), (-437.7008107));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(4);
      Date date0 = serialDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0, (-1100.00158714), 0, 308.23076, 5);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(1.39240928132E12, number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(4);
      Date date0 = serialDate0.toDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0, (-1100.00158714), 0, 308.23076, 5);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Float float0 = new Float((-1.7976931348623157E308));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(469.49, 469.49);
      Year year0 = new Year();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 9.0, Double.POSITIVE_INFINITY, 173, year0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-272), 841.0, 841.0, (-272), (-429.24107801));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-1629.43));
      stack0.add(double0);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-264));
      stack0.add(double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2172.8465117500114);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2172.8465117500114, 59, double0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYDataset0, false);
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(xYDataset0, (List) stack0, range0, false);
      assertEquals(2436.8465117500114, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-264));
      stack0.add(double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-440.86956374167323));
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, true);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(1969.0404362583267, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-264));
      stack0.add(double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.778686563611), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-264));
      Range range0 = new Range((-1625.778686563611), (-264));
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double(0.8);
      stack0.add(double0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1920, 1920, 3085, 3085, 3085);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4610.0), Double.NaN, (-1.0), (-2470.18770615062), 3085);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add((Double) null);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.0) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-253), (-253), (-1943), (-253), 366, 365);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 366, 365, 0.0, 1.0F);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-1308.97875));
      stack0.add(double0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertEquals(366.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.1027083675E13), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-272), 841.0, 841.0, (-272), (-429.24107801));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-1629.43));
      stack0.add(double0);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-1629.43));
      stack0.add(double0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Vector<Long> vector0 = new Vector<Long>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-253), (-253), (-253), (-253), (-253), (-253));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-253));
      stack0.add(double0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-264));
      stack0.add(double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1625.7786865636106), 2145.91);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-264), 2145.91, 59, double0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-264));
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) stack0, true);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertEquals(2145.91, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (-2218.9162109332));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 59, float0);
      Range range0 = DatasetUtilities.findDomainBounds(xYDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(1620.245323938423);
      stack0.add(float0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, (-120));
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      linkedList0.add(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-374.33622513), (-437.7008107), (-374.33622513), (-374.33622513), (-437.7008107));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-374.33622513) <= upper (-437.7008107).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2210L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2227, "Unknown key: ", 1267, 0, (-1959), 2227, 2479, 0, 1084, 151, 304);
      Locale locale0 = Locale.FRANCE;
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Week week0 = new Week();
      timeTableXYDataset0.add((TimePeriod) week0, (Number) null, "]J*9R", false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Stack<Float> stack1 = new Stack<Float>();
      Float float0 = new Float((-615.391F));
      stack1.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack1, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Stack<Float> stack0 = new Stack<Float>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(Double.NaN, Double.NaN, (Comparable) float0, (Comparable) float0);
      stack0.add(float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Float float0 = new Float((-1545.931F));
      Stack<Float> stack0 = new Stack<Float>();
      defaultStatisticalCategoryDataset0.add((double) (-1545.931F), 1874.31302009628, (Comparable) float0, (Comparable) float0);
      stack0.add(float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals(3748.62604019256, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Stack<Float> stack0 = new Stack<Float>();
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((-3124.005F));
      stack0.add(float0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Double double0 = new Double(302.41812810051096);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(Double.NEGATIVE_INFINITY, 2240.45354352075, Double.NEGATIVE_INFINITY, 2240.45354352075, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-6.76667423623812), (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[5] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("q^", "q^", doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[3];
      Long long0 = new Long((-8L));
      numberArray1[0] = (Number) long0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[][] doubleArray0 = new double[13][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-4101), 6);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale locale0 = new Locale("P(E1Ekxi{5@", "P(E1Ekxi{5@", "P(E1Ekxi{5@");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, list0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      timeTableXYDataset0.add((TimePeriod) millisecond0, (-1905.223), "Null 'f' argument.");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("FALLBACK", 78, 78);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(38.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries(long0, ".fy", "1}/rDUulqVl");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Long long0 = new Long((-37L));
      TimeSeries timeSeries0 = new TimeSeries(long0, ")`<r#24fD0K", ")`<r#24fD0K");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Float float0 = new Float(1.0F);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, (OHLCDataItem[]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 4, 1);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), 3528);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-272), (-272), (-272), (-272), (-272), (-272));
      Float float0 = new Float((float) (-272));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) mockDate0, (Number) float0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 2);
      defaultPieDataset0.setValue((Comparable) "5", 4343.682543300679);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      double[] doubleArray0 = new double[7];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, Double.POSITIVE_INFINITY, 1, quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Hour hour0 = new Hour();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(679.6970195248, 575.72);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 9, 0.0, (-9999), hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2117.280651, (-266.93794589));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1342.5365386135377, 1.39240928132E12, (-2546), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Long long0 = new Long((-8L));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-8L), 1.0, 0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "q^<y%+?V]'=.qS/IJ#", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3135);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 1.0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3135, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Year year0 = new Year();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) year0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NEGATIVE_INFINITY, 0.8, false, true);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) simpleHistogramBin0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 11);
      double[][] doubleArray0 = new double[7][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1773.1704161648897, 0.8, (-624.0), (-624.0), (-3144.368385999147));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][4];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) comparableArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Month month0 = new Month();
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) month0;
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) month0;
      double[][] doubleArray0 = new double[6][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 4);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 181);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", (-596.376176139057), 1529);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 181, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 2);
      defaultPieDataset0.setValue((Comparable) "5", 4343.682543300679);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "5", (double) 2);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Float float0 = new Float(2.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, (double) 1, 26);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 2);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      double[][] doubleArray0 = new double[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, " B*kOxkwy<8AlH:F\"^,", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) quarter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Float float0 = new Float(2937.65181652);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) float0, (Number) float0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) float0, 2937.65181652, 1);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) quarter0, (double) 4, 1973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Float float0 = new Float((-2462.9905632));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 1457, 1457);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(469.49, 469.49);
      Year year0 = new Year();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 9.0, Double.POSITIVE_INFINITY, 173, year0);
      Range range0 = DatasetUtilities.findRangeBounds(xYDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, millisecond0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "The number of row keys does not match the number of rows in the data array.");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Default Group", 1, 59);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(58.0, range0.getLength(), 0.01);
  }
}
