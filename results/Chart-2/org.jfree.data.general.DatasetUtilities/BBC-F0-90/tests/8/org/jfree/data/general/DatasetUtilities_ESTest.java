/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:03:24 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Dialog;
import java.awt.event.ContainerListener;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicSplitPaneDivider;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import javax.swing.plaf.synth.SynthViewportUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) list0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[12][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertFalse(stack0.contains(week0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Date[] dateArray0 = new Date[4];
      int int0 = 2810;
      MockDate mockDate0 = new MockDate(1, 2810, 10, 2810, (-1), (-1));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 10, 366);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=10,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      dateArray0[1] = date0;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotSame(date1, date0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      assertFalse(date1.equals((Object)date0));
      
      dateArray0[2] = date1;
      MockDate mockDate1 = new MockDate(1, 53, (-1), 1, 70);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[3] = (Date) mockDate1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = (double) 53;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 2810;
      doubleArray1[4] = (double) 366;
      doubleArray1[5] = (double) 2810;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(6, doubleArray1.length);
      assertEquals(4, dateArray0.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {10.0, 53.0, (-1.0), 2810.0, 366.0, 2810.0}, doubleArray1, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertTrue(stack0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.7442179939E13, range0.getLength(), 0.01);
      assertEquals((-3.4982028305E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(5.222887139E12, range0.getUpperBound(), 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(4, dateArray0.length);
      assertNotNull(range0);
      assertArrayEquals(new double[] {10.0, 53.0, (-1.0), 2810.0, 366.0, 2810.0}, doubleArray1, 0.01);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(2810.0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2104), (-2104), (-2104));
      assertNotNull(mockDate0);
      
      Comparable<Quarter>[] comparableArray0 = (Comparable<Quarter>[]) Array.newInstance(Comparable.class, 1);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertNotNull(spreadsheetDate0);
      
      comparableArray0[0] = (Comparable<Quarter>) spreadsheetDate0;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(1, comparableArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-105));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2424, 1);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1839.6446), (Comparable) "Column oey (", (Comparable) "Column oey (");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1839.6446), range0.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range0.getLowerBound(), 0.01);
      assertEquals((-1839.6446), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1839.6446), range1.getCentralValue(), 0.01);
      assertEquals((-1839.6446), range1.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, (-891.0));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1839.6446), range1.getCentralValue(), 0.01);
      assertEquals((-1839.6446), range1.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2730.6446), range2.getLowerBound(), 0.01);
      assertEquals((-2730.6446), range2.getUpperBound(), 0.01);
      assertEquals((-2730.6446), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range3 = Range.expand(range1, (-1839.6446), (-1839.6446));
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1839.6446), range1.getCentralValue(), 0.01);
      assertEquals((-1839.6446), range1.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range1.getLowerBound(), 0.01);
      assertEquals((-1839.6446), range3.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range3.getCentralValue(), 0.01);
      assertEquals((-1839.6446), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range1.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      Double double0 = new Double((-1839.6446));
      assertEquals((-1839.6446), (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertEquals((-1839.6446), range4.getLowerBound(), 0.01);
      assertEquals((-1839.6446), range4.getUpperBound(), 0.01);
      assertEquals((-1839.6446), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 2, 2);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), (-2090), (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertTrue(stack0.contains(week0));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.38402912E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getCentralValue(), 0.01);
      assertEquals((-7.38402912E13), range0.getUpperBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains(week0));
      assertNotSame(range1, range0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-7.38402912E13), range1.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range1.getUpperBound(), 0.01);
      assertEquals((-7.38402912E13), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2090.0), range2.getLowerBound(), 0.01);
      assertEquals((-2090.0), range2.getUpperBound(), 0.01);
      assertEquals((-2090.0), range2.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("*B", 75, 75);
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LineFunction2D lineFunction2D0 = new LineFunction2D(151, (-1.0));
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(151.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(151);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertEquals(152L, regularTimePeriod0.getSerialIndex());
      assertEquals(152L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(152L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(152L, regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NaN, (-1.0), 151, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(151.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertEquals(152L, regularTimePeriod0.getSerialIndex());
      assertEquals(152L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(152L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(152L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      XYSeries xYSeries1 = xYSeries0.createCopy(151, 151);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertNotNull(xYSeries1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection1, true);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals(151L, fixedMillisecond0.getSerialIndex());
      assertEquals(151L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(151L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(151L, fixedMillisecond0.getLastMillisecond());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.NaN);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2107), (-2107), (-2107), 541, (-2107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals(1.39240928132E12, double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.0));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (double) (-2107), true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-2108.0), range1.getLowerBound(), 0.01);
      assertEquals((-2108.0), range1.getUpperBound(), 0.01);
      assertEquals((-2108.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains(week0));
      assertNotSame(range0, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("*B", 75, 75);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(75, matrixSeries0.getRowCount());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(75, matrixSeries0.getRowCount());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      matrixSeriesCollection0.validateObject();
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(75, matrixSeries0.getRowCount());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      matrixSeriesCollection0.removeChangeListener(xYTaskDataset0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(75, matrixSeries0.getRowCount());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(75, matrixSeries0.getRowCount());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("*B", 75, 75);
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      SynthSplitPaneUI synthSplitPaneUI0 = new SynthSplitPaneUI();
      assertNotNull(synthSplitPaneUI0);
      
      BasicSplitPaneDivider basicSplitPaneDivider0 = synthSplitPaneUI0.getDivider();
      assertNull(basicSplitPaneDivider0);
      
      matrixSeries0.removePropertyChangeListener((PropertyChangeListener) null);
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(75, matrixSeries0.getColumnsCount());
      assertEquals(5625, matrixSeries0.getItemCount());
      assertEquals(75, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("8</8!FH->", 15, 15);
      assertEquals(15, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(15, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(225, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(15, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(15, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(225, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 1.0);
      assertEquals(15, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(15, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(225, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertEquals((-0.5), number0);
      assertEquals(15, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(15, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(225, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(arrayList0.contains((byte)120));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(byte1.equals((Object)byte0));
      
      TimeSeries timeSeries0 = new TimeSeries(byte1, "", "");
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      assertTrue(byte1.equals((Object)byte0));
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((short)47, "Requires 'start' < 'end'.");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(47, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Requires 'start' < 'end'.,offset=47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Requires 'start' < 'end'.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(47, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Requires 'start' < 'end'.,offset=47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Requires 'start' < 'end'.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      assertTrue(byte1.equals((Object)byte0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)120));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(47, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Requires 'start' < 'end'.,offset=47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Requires 'start' < 'end'.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, true);
      assertFalse(stack0.contains((short)47));
      assertNotSame(range0, range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(47, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Requires 'start' < 'end'.,offset=47,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Requires 'start' < 'end'.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNull(range2);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(range0.equals((Object)range1));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((byte)120, 2505.0);
      assertEquals(120.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2505.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (short)47, (-2248.598862), (short)47, hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2107), (-2107), (-2107), 541, (-2107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      Week week1 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106749L, week1.getSerialIndex());
      assertNotNull(week1);
      assertTrue(week1.equals((Object)week0));
      
      boolean boolean1 = stack0.add(week1);
      assertTrue(stack0.contains(week1));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean1);
      assertNotSame(week1, week0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[Week 7, 2014, Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(7, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106749L, week1.getSerialIndex());
      assertTrue(week1.equals((Object)week0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals(1.39240928132E12, double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range(1.39240928132E12, 1.39240928132E12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 228.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(228.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYBarDataset0);
      assertEquals(541.0, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(228.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 72, 72);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(71.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNull(range0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 5757.3593;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (-2547.1);
      doubleArray1[3] = (-1508.2);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-3524.0);
      doubleArray1[6] = 72.5;
      doubleArray1[7] = (-5.263626240002312E13);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 72.5;
      doubleArray2[3] = (-5.263626240002312E13);
      doubleArray2[4] = 5757.3593;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-5.263626240002312E13);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-5.263626240002312E13);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = (-3524.0);
      doubleArray4[2] = (-1380.9911344212674);
      doubleArray4[3] = 12.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 5757.3593;
      doubleArray6[1] = (-1508.2);
      doubleArray6[2] = (-1380.9911344212674);
      doubleArray6[3] = 12.0;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 12.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = 5757.3593;
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray8[2] = (-5.263626240002312E13);
      doubleArray8[3] = (-2547.1);
      doubleArray8[4] = 72.5;
      doubleArray8[5] = (-2547.1);
      doubleArray8[6] = (-1380.9911344212674);
      doubleArray8[7] = (-5.263626240002312E13);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = 5757.3593;
      doubleArray9[1] = (-641.302589828411);
      doubleArray9[2] = 12.0;
      doubleArray9[3] = 5757.3593;
      doubleArray9[4] = (-5.263626240002312E13);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("fu0'a[-=UbLP3lqHs", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(23041.4372, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1839.6446031154821), (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1839.6446031154821), range0.getLowerBound(), 0.01);
      assertEquals((-1839.6446031154821), range0.getUpperBound(), 0.01);
      assertEquals((-1839.6446031154821), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Quarter quarter0 = new Quarter(4, 11);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(48L, quarter0.getSerialIndex());
      assertEquals(11, quarter0.getYearValue());
      assertNotNull(quarter0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(11, (-1377), quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(48L, quarter0.getSerialIndex());
      assertEquals(11, quarter0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1378), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(48L, quarter0.getSerialIndex());
      assertEquals(11, quarter0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1378), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2107), (-2107), (-2107), 541, (-2107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals(1.39240928132E12, double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range(1.39240928132E12, 1.39240928132E12);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(541.0, range1.getLowerBound(), 0.01);
      assertEquals(541.0, range1.getCentralValue(), 0.01);
      assertEquals(541.0, range1.getUpperBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertTrue(stack0.contains(week0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("@", 72, 72);
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      matrixSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(71.0, number0);
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNull(number1);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090), (-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate((-2090), (-2090), (-2090), (-2090), (-2090), (-2090));
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, (-2090), (-2090), (-2090), (-2090), (-2074));
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Stack<OHLCDataItem> stack0 = new Stack<OHLCDataItem>();
      assertFalse(stack0.contains(oHLCDataItem0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      mockDate0.setTime((-2090));
      assertNotSame(mockDate0, mockDate1);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      boolean boolean0 = stack0.add(oHLCDataItem0);
      assertTrue(stack0.contains(oHLCDataItem0));
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate1.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertTrue(stack0.contains(oHLCDataItem0));
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), (-2090), (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Stack<Week> stack1 = new Stack<Week>();
      assertFalse(stack1.contains(week0));
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertFalse(stack1.equals((Object)stack0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack1, true);
      assertFalse(stack1.contains(week0));
      assertNotSame(stack1, stack0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range0);
      assertFalse(stack1.equals((Object)stack0));
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-2090.0), number0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) categoryToPieDataset0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals((-2090.0), range2.getCentralValue(), 0.01);
      assertEquals((-2090.0), range2.getLowerBound(), 0.01);
      assertEquals((-2090.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      categoryTableXYDataset0.add((Number) short0, (Number) short0, "", true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2146861106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146861106, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090), (-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), (-2090), (-2090));
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<OHLCDataItem> stack0 = new Stack<OHLCDataItem>();
      assertFalse(stack0.contains(oHLCDataItem0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals("Wed Nov 12 10:35:10 GMT 372", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      mockDate0.setTime((-2090));
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      
      boolean boolean0 = stack0.add(oHLCDataItem0);
      assertTrue(stack0.contains(oHLCDataItem0));
      assertTrue(boolean0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertTrue(stack0.contains(oHLCDataItem0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals((-2090.0), range1.getUpperBound(), 0.01);
      assertEquals((-2090.0), range1.getCentralValue(), 0.01);
      assertEquals((-2090.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 72, 72);
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(71.0, number0);
      assertEquals(5184, matrixSeries0.getItemCount());
      assertEquals(72, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(72, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Short short0 = new Short((short) (-2030));
      assertEquals((short) (-2030), (short)short0);
      assertNotNull(short0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) short0, (Number) short0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2030.0), range0.getLowerBound(), 0.01);
      assertEquals((-2030.0), range0.getUpperBound(), 0.01);
      assertEquals((-2030.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1095.61472494, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1095.61472494, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Integer integer0 = new Integer(151);
      assertEquals(151, (int)integer0);
      assertNotNull(integer0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) integer0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NEGATIVE_INFINITY, (-401.70596655839), 93, timeSeriesDataItem0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1095.61472494, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1095.61472494, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNull(range0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1095.61472494, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNull(range1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(86, 30.837491);
      assertEquals(30.837491, lineFunction2D0.getSlope(), 0.01);
      assertEquals(86.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 30.837491, 93, 93, "j");
      assertEquals(30.837491, lineFunction2D0.getSlope(), 0.01);
      assertEquals(86.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(30.837491, lineFunction2D0.getSlope(), 0.01);
      assertEquals(86.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1916.9358118249193, range0.getLength(), 0.01);
      assertEquals(1036.950851175081, range0.getLowerBound(), 0.01);
      assertEquals(2953.886663, range0.getUpperBound(), 0.01);
      assertEquals(1995.4187570875406, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertEquals(30.837491, lineFunction2D0.getSlope(), 0.01);
      assertEquals(86.0, lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1036.950851175081, range1.getLowerBound(), 0.01);
      assertEquals(1995.4187570875406, range1.getCentralValue(), 0.01);
      assertEquals(1916.9358118249193, range1.getLength(), 0.01);
      assertEquals(2953.886663, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue(11.6548, (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(11.6548, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(11.6548, range0.getUpperBound(), 0.01);
      assertEquals(11.6548, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) list0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Short short0 = new Short((short) (-1560));
      assertEquals((short) (-1560), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short) (-1560)));
      assertTrue(boolean0);
      assertEquals("[-1560]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), (-2090), (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<OHLCDataItem> stack0 = new Stack<OHLCDataItem>();
      assertFalse(stack0.contains(oHLCDataItem0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertFalse(stack0.contains(oHLCDataItem0));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals((-2090.0), range0.getLowerBound(), 0.01);
      assertEquals((-2090.0), range0.getCentralValue(), 0.01);
      assertEquals((-2090.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      
      Date date0 = year0.getStart();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Week week0 = new Week(495, year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-17), week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106725L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, (OHLCDataItem[]) null);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-17), week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106725L, week0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), (-4811));
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.0), 1079.4731637121893, 151, integer0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-5198156.390619342), range0.getLowerBound(), 0.01);
      assertEquals((-2599078.195309671), range0.getCentralValue(), 0.01);
      assertEquals(5198156.390619342, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertEquals(1079.9731637121893, range1.getUpperBound(), 0.01);
      assertEquals(539.2365818560946, range1.getCentralValue(), 0.01);
      assertEquals(1081.4731637121893, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5198156.390619342, range2.getLength(), 0.01);
      assertEquals((-2599078.195309671), range2.getCentralValue(), 0.01);
      assertEquals((-5198156.390619342), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(5198156.390619342, range3.getLength(), 0.01);
      assertEquals((-5198156.390619342), range3.getLowerBound(), 0.01);
      assertEquals((-2599078.195309671), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, true);
      assertNotSame(range0, range2);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-5198156.390619342), range0.getLowerBound(), 0.01);
      assertEquals((-2599078.195309671), range0.getCentralValue(), 0.01);
      assertEquals(5198156.390619342, range0.getLength(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(range4);
      assertTrue(range0.equals((Object)range3));
      assertTrue(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), (-2090), (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertTrue(stack0.contains(week0));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals((-7.38402912E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2090.0), range1.getLowerBound(), 0.01);
      assertEquals((-2090.0), range1.getUpperBound(), 0.01);
      assertEquals((-2090.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MatrixSeries matrixSeries0 = new MatrixSeries("No obsDrvation for x = ", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Stack<OHLCDataItem> stack0 = new Stack<OHLCDataItem>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), 541, (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = false;
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      boolean boolean1 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean1);
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertFalse(boolean1 == boolean0);
      
      Range range0 = new Range(1, 1);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1296);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, (-90.859786), (-467.743091188), 1.0, (-90.859786));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-90.859786), 1831.0, 1.0, 1.0, (-9999));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1296, 2916.2565046606273, (-626.0), (-832.0748972807), 9999);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1663.0), (-626.0), (-626.0), (-1.0), (-1052.231241009));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-9999), 2385.47, (-626.0), (-832.0748972807), 9999);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, (-2440.04), (-1.0), (-1052.231241009), (-1504.793645241658), (-1094.444168494));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem5);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(6, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2916.2565046606273, range0.getUpperBound(), 0.01);
      assertEquals(932.0126318258136, range0.getCentralValue(), 0.01);
      assertEquals((-1052.231241009), range0.getLowerBound(), 0.01);
      assertEquals(3968.4877456696277, range0.getLength(), 0.01);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(6, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1259);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(arrayList0.contains((byte)45));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (byte)45);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(45.0, range1.getLength(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
      assertEquals(22.5, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range1, (double) (byte)45);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(45.0, range1.getLength(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
      assertEquals(22.5, range1.getCentralValue(), 0.01);
      assertEquals(45.0, range2.getLowerBound(), 0.01);
      assertEquals(67.5, range2.getCentralValue(), 0.01);
      assertEquals(90.0, range2.getUpperBound(), 0.01);
      assertEquals(45.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)45));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)45));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(arrayList0.contains(byte0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (byte)45);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(45.0, range1.getLength(), 0.01);
      assertEquals(45.0, range1.getUpperBound(), 0.01);
      assertEquals(22.5, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)45));
      assertNotSame(range0, range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      assertTrue(arrayList0.contains((byte)45));
      assertNotSame(range0, range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNull(range3);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[12][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`P#^;.LJ-hQ", "The 'series' argument is out of bounds (", doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(12, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The 'series' argument is out of bounds (");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(arrayList0.contains((byte)41));
      assertFalse(arrayList0.contains((byte) (-51)));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)41));
      assertFalse(arrayList0.contains((byte) (-51)));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(12, doubleArray0.length);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1432.7600608481741;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(stack0.contains((short)47));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[47]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Week week0 = new Week(24, 24);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(24, week0.getYearValue());
      assertEquals(24, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1296L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(24, 24, week0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(24, week0.getYearValue());
      assertEquals(24, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1296L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(23, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      keyToGroupMap0.mapKeyToGroup(week0, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2, keyToGroupMap0.getGroupCount());
      assertEquals(24, week0.getYearValue());
      assertEquals(24, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1296L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1.0), (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      assertNotSame(range1, range0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Short short0 = new Short((short) (-2030));
      assertEquals((short) (-2030), (short)short0);
      assertNotNull(short0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) short0, (Number) short0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) short0, (double) (short) (-1744));
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) short0, (double) (short) (-2030), 1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      assertNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 24;
      doubleArray1[1] = (double) 24;
      doubleArray1[2] = (double) 24;
      doubleArray1[3] = (double) 24;
      doubleArray1[4] = (double) 24;
      doubleArray1[5] = (double) 24;
      doubleArray1[6] = (double) 24;
      doubleArray1[7] = (double) 24;
      doubleArray1[8] = (double) 24;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1635.83492082;
      doubleArray2[1] = (double) 24;
      doubleArray2[2] = (double) 24;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 24;
      doubleArray3[1] = 1559.228927556992;
      doubleArray3[2] = 1635.83492082;
      doubleArray3[3] = 1635.83492082;
      doubleArray3[4] = (double) 24;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("OS5n-)P/Nd@Q", "OS5n-)P/Nd@Q", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 24, 0);
      assertEquals(24, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) 24.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      MockDate mockDate0 = new MockDate((-79), (-79), 1051, (-572), 1051, (-572));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1697.5900116919306, (-572), 1051, 0.0, (-1387.916822182));
      assertEquals("Sun Mar 23 21:21:28 GMT 1817", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Sun Mar 23 21:21:28 GMT 1817", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Sun Mar 23 21:21:28 GMT 1817", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 1, 1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1.0), (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<String>) "7S8j21>W";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8x?Fqg", "+O!A! 8x?Fqg", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 5);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "+O!A! 8x?Fqg", 2843.699325847704, 2);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "+O!A! 8x?Fqg", (KeyedValues) defaultPieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset1, (List) stack0, true);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNull(range0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, (-3454), (-3454));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-3454), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3454), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Year year0 = new Year(1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, year0.getYear());
      assertNotNull(year0);
      
      Month month0 = new Month(1, year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, year0.getYear());
      assertEquals(13L, month0.getSerialIndex());
      assertEquals(1, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      assertNotNull(month0);
      
      defaultStatisticalCategoryDataset0.add(11.0, (-885.367923), (Comparable) month0, (Comparable) year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, year0.getYear());
      assertEquals(13L, month0.getSerialIndex());
      assertEquals(1, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = keyToGroupMap0.equals(list0);
      assertFalse(boolean0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The number of rhw keysZdos not match the nu;ber of rows in the dta array.", 8, 8);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(64, matrixSeries0.getItemCount());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 8, 90);
      assertEquals(8, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(90, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue(0.0, (Comparable) "7S8j21>W", (Comparable) "7S8j21>W");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(byte0));
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((byte) (-51), "", (byte) (-51), (byte) (-51), 602, (byte) (-51), 51, (byte) (-51), 753, (-681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -51
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][4];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = new Integer((-3381));
      assertEquals((-3381), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Short short0 = new Short((short) (-1395));
      assertEquals((short) (-1395), (short)short0);
      assertNotNull(short0);
      
      numberArray1[2] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = numberArray1[0];
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) short0;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = numberArray1[0];
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) short0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, numberArray0.length);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultIntervalCategoryDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(4, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-3381), 2);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3381), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertNotNull(quarter0);
      
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) quarter0;
      Week week0 = new Week(4, 90);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(4, week0.getWeek());
      assertEquals(4774L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(90, week0.getYearValue());
      assertNotNull(week0);
      
      comparableArray0[1] = (Comparable<DefaultMultiValueCategoryDataset>) week0;
      Comparable<CategoryTableXYDataset>[] comparableArray1 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray1[0] = (Comparable<CategoryTableXYDataset>) week0;
      comparableArray1[1] = (Comparable<CategoryTableXYDataset>) week0;
      comparableArray1[2] = (Comparable<CategoryTableXYDataset>) week0;
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-351.508473560966);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 90;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 90;
      doubleArray2[4] = (double) 90;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 53;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 90;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 90;
      doubleArray3[1] = (-351.508473560966);
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 90;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 90;
      doubleArray4[1] = (double) 90;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 53;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 53;
      doubleArray5[3] = (double) 90;
      doubleArray5[4] = (double) 4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) 53;
      doubleArray6[1] = (double) 4;
      doubleArray6[2] = (double) 4;
      doubleArray6[3] = (double) 53;
      doubleArray6[4] = (double) 4;
      doubleArray6[5] = 182.47873992729726;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 90;
      doubleArray6[8] = (-351.508473560966);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 90;
      doubleArray7[1] = (double) 1;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = (double) 4;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = 0.5;
      doubleArray7[6] = (-351.508473560966);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 1;
      doubleArray8[2] = (double) 1;
      doubleArray8[3] = 22.5;
      doubleArray8[4] = 0.5;
      doubleArray8[5] = (double) 53;
      doubleArray8[6] = (double) 4;
      doubleArray8[7] = (-1.0);
      doubleArray8[8] = (-1.0);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Number[][] numberArray0 = new Number[4][2];
      Number[] numberArray1 = new Number[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      numberArray1[1] = (Number) bigInteger1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) bigInteger1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1929, 2);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1929, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, numberArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1929, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1.0), (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 30, 1);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(30, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(matrixSeriesCollection0, seriesChangeInfo0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(30, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeEvent0);
      
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals(1, seriesChangeInfo0.getIndex2());
      assertEquals(30, seriesChangeInfo0.getIndex1());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(23.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7S8j21>W";
      stringArray0[1] = "7S8j21>W";
      stringArray0[2] = "7S8j21>W";
      stringArray0[3] = "7S8j21>W";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 24, 1);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Long long0 = new Long((-1573L));
      assertEquals((-1573L), (long)long0);
      assertNotNull(long0);
      
      defaultCategoryDataset0.addValue((Number) long0, (Comparable) "", (Comparable) long0);
      assertEquals(2, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals((-1573.0), (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-4293), 400);
      assertEquals((-4293), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(400, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2107), (-2107), (-2107));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2107), (-2107), (-2107), 541, (-2107));
      assertEquals("Fri Aug 24 00:00:00 GMT 390", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Aug 24 00:00:00 GMT 390", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals((-7.44229728E13), double0, 0.01);
      assertEquals("Fri Aug 24 00:00:00 GMT 390", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-7.44229728E13), (-7.44229728E13));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.44229728E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.44229728E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.44229728E13), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Fri Aug 24 00:00:00 GMT 390", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.44229728E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.44229728E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.44229728E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(541.0, range1.getUpperBound(), 0.01);
      assertEquals(541.0, range1.getCentralValue(), 0.01);
      assertEquals(541.0, range1.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultWindDataset defaultWindDataset1 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotNull(defaultWindDataset1);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2090), (-2090), (-2090));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2090), (-2090), (-2090), 541, (-2090));
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      double double0 = defaultOHLCDataset0.getXValue((-2090), 1);
      assertEquals((-7.38402912E13), double0, 0.01);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-7.38402912E13), (-7.38402912E13));
      assertEquals((-7.38402912E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertTrue(stack0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals((-7.38402912E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2090.0), range1.getLowerBound(), 0.01);
      assertEquals((-2090.0), range1.getUpperBound(), 0.01);
      assertEquals((-2090.0), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, true);
      assertTrue(stack0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Mon Feb 09 00:00:00 GMT 371", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals((-7.38402912E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.38402912E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2090.0), range1.getLowerBound(), 0.01);
      assertEquals((-2090.0), range1.getUpperBound(), 0.01);
      assertEquals((-2090.0), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), (-2099), (-2099));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 541, (-2099));
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Vector<Week> vector0 = new Vector<Week>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      boolean boolean0 = vector0.add(week0);
      assertTrue(vector0.contains(week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[Week 7, 2014]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals((-7.41486528E13), double0, 0.01);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-7.41486528E13), (-7.41486528E13));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.41486528E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getCentralValue(), 0.01);
      assertEquals((-7.41486528E13), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      assertTrue(vector0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(vector0.isEmpty());
      assertEquals("[Week 7, 2014]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.41486528E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getCentralValue(), 0.01);
      assertEquals((-7.41486528E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2099.0), range1.getLowerBound(), 0.01);
      assertEquals((-2099.0), range1.getUpperBound(), 0.01);
      assertEquals((-2099.0), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultWindDataset defaultWindDataset1 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotNull(defaultWindDataset1);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 620, 2617);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2617, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(620, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 622, 541);
      assertEquals(541, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(622, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2617, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(620, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
      assertEquals(541, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(622, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2617, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(620, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), (-2099), (-2099));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 541, (-2099));
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Vector<Week> vector0 = new Vector<Week>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      boolean boolean0 = vector0.add(week0);
      assertTrue(vector0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[Week 7, 2014]", vector0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals((-7.41486528E13), double0, 0.01);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-7.41486528E13), (-7.41486528E13));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.41486528E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      assertTrue(vector0.contains(week0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[Week 7, 2014]", vector0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-7.41486528E13), range0.getLowerBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getUpperBound(), 0.01);
      assertEquals((-7.41486528E13), range0.getCentralValue(), 0.01);
      assertEquals((-2099.0), range1.getLowerBound(), 0.01);
      assertEquals((-2099.0), range1.getUpperBound(), 0.01);
      assertEquals((-2099.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultWindDataset defaultWindDataset1 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotNull(defaultWindDataset1);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) oHLCDataItem0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue(294.64988322, (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(294.64988322, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(294.64988322, range0.getLowerBound(), 0.01);
      assertEquals(294.64988322, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), (-2099), (-2099));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 541, (-2099));
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[12];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Tue May 03 00:00:00 GMT 381", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(12, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = true;
      Vector<Week> vector0 = new Vector<Week>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      double double0 = new Integer((-2099));
      assertEquals((-2099), double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertFalse(stack0.contains(byte0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(stack0);
      assertFalse(stack0.contains(byte0));
      assertFalse(arrayList0.contains(byte0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(stack0.contains(byte0));
      assertTrue(arrayList0.contains(byte0));
      assertTrue(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (byte)92;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (byte)92;
      doubleArray3[1] = (double) (byte)92;
      doubleArray3[2] = 1698.05947;
      doubleArray3[3] = (double) (byte)92;
      doubleArray3[4] = (double) (byte)92;
      doubleArray3[5] = (double) (byte)92;
      doubleArray3[6] = (double) (byte)92;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(523, 523, 523, 523, 523, 523);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, (-2099));
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Vector<Week> vector0 = new Vector<Week>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals(1.5717642703E13, double0, 0.01);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2099.0), range0.getUpperBound(), 0.01);
      assertEquals((-2099.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2099.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals((-2099.0), range0.getUpperBound(), 0.01);
      assertEquals((-2099.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2099.0), range0.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "[";
      MatrixSeries matrixSeries0 = new MatrixSeries("[", 1, 1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      int int0 = matrixSeriesCollection0.indexOf("[");
      assertEquals(0, int0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      String string1 = "W8";
      Number[][] numberArray0 = new Number[3][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(6, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate(523, 523, 523, 523, 523, 523);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, (-2099));
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2099.0), range0.getLowerBound(), 0.01);
      assertEquals((-2099.0), range0.getUpperBound(), 0.01);
      assertEquals((-2099.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 523);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(523.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(1.57176427032615E13, number0);
      assertEquals("Fri Jan 27 03:51:43 GMT 2468", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(523.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Byte>) oHLCDataItem0;
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = number0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = number0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray1[6] = number0;
      numberArray1[7] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = number0;
      numberArray2[4] = (Number) (byte)0;
      numberArray2[5] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(24, 24, week0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(23, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertFalse(arrayList0.contains(byte0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(arrayList0.contains((byte)92));
      assertFalse(arrayList0.contains(byte0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      assertTrue(arrayList0.contains((byte)92));
      assertFalse(arrayList0.contains(byte0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultCategoryDataset0.setValue((-1.0), (Comparable) "The number o column keys does not match the number of columns in the ata array.", (Comparable) "The number o column keys does not match the number of columns in the ata array.");
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 554, 554);
      assertEquals(554, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(554, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Week week0 = new Week(0, 7);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(371L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Week week1 = new Week(0, 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2809L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(0, week1.getWeek());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      defaultPieDataset0.setValue((Comparable) week1, (Number) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week1, week0);
      assertEquals(53, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2809L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(0, week1.getWeek());
      assertFalse(week1.equals((Object)week0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) week1, (double) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(week1, week0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(53, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2809L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(0, week1.getWeek());
      assertNotNull(pieDataset0);
      assertFalse(week1.equals((Object)week0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      pieDataset0.setGroup(datasetGroup0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(week1, week0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(53, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2809L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(0, week1.getWeek());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(week1.equals((Object)week0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53.0, double0, 0.01);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(week1, week0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(53, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2809L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(0, week1.getWeek());
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(week1.equals((Object)week0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte1 = new Byte((byte) (-114));
      assertEquals((byte) (-114), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte) (-114)));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte) (-114)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 93.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "JHI@w+Q", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(46.5, range0.getCentralValue(), 0.01);
      assertEquals(93.0, range0.getUpperBound(), 0.01);
      assertEquals(93.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(arrayList0.contains((byte) (-127)));
      assertFalse(arrayList0.contains(byte0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, false);
      assertTrue(arrayList0.contains((byte) (-127)));
      assertFalse(arrayList0.contains(byte0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(46.5, range0.getCentralValue(), 0.01);
      assertEquals(93.0, range0.getUpperBound(), 0.01);
      assertEquals(93.0, range0.getLength(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Year year0 = new Year(2024);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2024", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2024, year0.getYear());
      assertEquals(2024L, year0.getSerialIndex());
      assertNotNull(year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      Instant instant0 = MockInstant.ofEpochSecond((-1089L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, Double.NaN, 1935.25588515, (-1089L), 9999, 2557.788551257819);
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, (-1089L), (-9999), (-3060.2), (-602.97));
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-3060.2), 49.0, 49.0, 1935.25588515, Double.NaN);
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, Double.NaN, Double.NaN, (-602.97), Double.NaN, 9999);
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-1.0), 637.9885194277304, 156.0, 2557.788551257819, 637.9885194277304);
      assertEquals("Wed Dec 31 23:41:51 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("2024", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2024, year0.getYear());
      assertEquals(2024L, year0.getSerialIndex());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1935.25588515, range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals(11934.25588515, range0.getLength(), 0.01);
      assertEquals((-4031.872057425), range0.getCentralValue(), 0.01);
      assertEquals("2024", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2024, year0.getYear());
      assertEquals(2024L, year0.getSerialIndex());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(0, (SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[8];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Number number0 = xYTaskDataset0.getX(0, 2384);
      assertEquals(0.0, number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(number0);
      
      numberArray1[0] = number0;
      Float float0 = new Float((float) 2384);
      assertEquals(2384.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[1] = (Number) float0;
      Number number1 = xYTaskDataset0.getStartX(2384, (-1));
      assertEquals(2383.6, number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      
      numberArray1[2] = number1;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[3] = (Number) bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      numberArray1[4] = (Number) bigInteger1;
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotEquals((double)double0, (double)number1, 0.01);
      
      numberArray1[5] = (Number) double0;
      Integer integer0 = new Integer(2389);
      assertEquals(2389, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[6] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[7] = (Number) integer1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = number1;
      numberArray2[2] = (Number) bigInteger1;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 2772, 2772);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(2772, seriesChangeInfo0.getIndex1());
      assertEquals(2772, seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xIntervalSeriesCollection0, seriesChangeInfo0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(2772, seriesChangeInfo0.getIndex1());
      assertEquals(2772, seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeEvent0);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals(2772, seriesChangeInfo0.getIndex1());
      assertEquals(2772, seriesChangeInfo0.getIndex2());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("PG76'MFr@0", 24, 24);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = matrixSeries0.equals(defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(23.0, number0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.chart.util.ArrayUtilities", 40, 1);
      assertEquals(40, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(40, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(40, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(40, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(40, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(40, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(93, 53.0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 53.0, 93, 93, "+O!A! 8?Fq");
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(3962.0, range0.getCentralValue(), 0.01);
      assertEquals(5022.0, range0.getUpperBound(), 0.01);
      assertEquals(2902.0, range0.getLowerBound(), 0.01);
      assertEquals(2120.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(52.5, range1.getLowerBound(), 0.01);
      assertEquals(73.0, range1.getCentralValue(), 0.01);
      assertEquals(93.5, range1.getUpperBound(), 0.01);
      assertEquals(41.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2120.0, range2.getLength(), 0.01);
      assertEquals(2902.0, range2.getLowerBound(), 0.01);
      assertEquals(3962.0, range2.getCentralValue(), 0.01);
      assertEquals(5022.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(5022.0, range3.getUpperBound(), 0.01);
      assertEquals(2902.0, range3.getLowerBound(), 0.01);
      assertEquals(3962.0, range3.getCentralValue(), 0.01);
      assertEquals(2120.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, (-2099));
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(domainOrder0);
      assertTrue(mockDate0.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparable<TimeTableXYDataset>[] comparableArray0 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("The number of column keys does not match the number of columns in the data array.");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 45, 2932);
      assertEquals(2932, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(45, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(658);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(arrayList0.contains(byte0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = true;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      
      Week week0 = new Week((-2205), year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(106841L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(99, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(106841L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(99, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(98, week1.getWeek());
      assertEquals(106840L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1415), (-9999), (-1415), (-2205), (-2205), 533);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1415,MONTH=-9999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1415,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2205,HOUR_OF_DAY=-2205,MINUTE=-2205,SECOND=533,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3311.53686658, 9999, 1, 9999, (-2974.0933347463015));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1415,MONTH=-9999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1415,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2205,HOUR_OF_DAY=-2205,MINUTE=-2205,SECOND=533,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1173.29963), 3311.53686658, (-715.19924), (-2205), (-1043.4043824));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1415,MONTH=-9999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1415,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2205,HOUR_OF_DAY=-2205,MINUTE=-2205,SECOND=533,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-1415), (-736.793606700782), 1, (-715.19924), (-715.19924));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1415,MONTH=-9999,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1415,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2205,HOUR_OF_DAY=-2205,MINUTE=-2205,SECOND=533,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week1, oHLCDataItemArray0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(106841L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(99, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(98, week1.getWeek());
      assertEquals(106840L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(106841L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(99, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(98, week1.getWeek());
      assertEquals(106840L, week1.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) list0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of column keys does not match the number of columns in the data array.");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(arrayList0.contains((byte)29));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains((byte)29));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "IQ@!B;#AGNMtkj$+";
      stringArray0[1] = "tUub";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      int int0 = 261;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 261, 261);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(261, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(261, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, stringArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = arrayList0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("org.jfree.data.general.DefaulKeyedValesDataset");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf("org.jfree.data.general.DefaulKeyedValesDataset");
      assertEquals(0, int0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Long long0 = new Long((-948L));
      assertEquals((-948L), (long)long0);
      assertNotNull(long0);
      
      jDBCPieDataset0.setValue((Comparable) "org.jfree.data.general.DefaulKeyedValesDataset", (Number) long0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number o column keys does not match the number of columns in the ata array.", "The number o column keys does not match the number of columns in the ata array.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(93, 53.0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 53.0, 93, 93, "+O_A!_8?F");
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3962.0, range0.getCentralValue(), 0.01);
      assertEquals(5022.0, range0.getUpperBound(), 0.01);
      assertEquals(2120.0, range0.getLength(), 0.01);
      assertEquals(2902.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(73.0, range1.getCentralValue(), 0.01);
      assertEquals(93.5, range1.getUpperBound(), 0.01);
      assertEquals(41.0, range1.getLength(), 0.01);
      assertEquals(52.5, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(2902.0, range2.getLowerBound(), 0.01);
      assertEquals(3962.0, range2.getCentralValue(), 0.01);
      assertEquals(5022.0, range2.getUpperBound(), 0.01);
      assertEquals(2120.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(52.5, range3.getLowerBound(), 0.01);
      assertEquals(73.0, range3.getCentralValue(), 0.01);
      assertEquals(93.5, range3.getUpperBound(), 0.01);
      assertEquals(41.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(53.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(5022.0, range4.getUpperBound(), 0.01);
      assertEquals(2902.0, range4.getLowerBound(), 0.01);
      assertEquals(3962.0, range4.getCentralValue(), 0.01);
      assertEquals(2120.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 19.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 2601.444221;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 93.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 611.21481548;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8?Fq", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2601.444221, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      MockDate mockDate0 = new MockDate(90, 90, 773, 2398, (-1), 0);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Nov 19 21:59:00 GMT 1999", mockDate0.toString());
      assertEquals("Fri Nov 19 21:59:00 GMT 1999", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 773, (-3602.786914379), 1005.029656937, 1983.9107755688879, 55.5);
      assertEquals("Fri Nov 19 21:59:00 GMT 1999", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Nov 19 21:59:00 GMT 1999", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1005.029656937) <= upper (-3602.786914379).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, 490.10317607430756);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2099.0), range0.getUpperBound(), 0.01);
      assertEquals((-2099.0), range0.getCentralValue(), 0.01);
      assertEquals((-2099.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-2099.0), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("TimeSeriesDataset.addValue(): series #", 90, 90);
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(8100, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(151, 151);
      assertEquals(151.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(151.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.8, Double.POSITIVE_INFINITY, 151, ">xqYHpFC]");
      assertEquals(151.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(151.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(151.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(151.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-4811));
      assertEquals((-4811), (int)integer0);
      assertNotNull(integer0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), (-4811));
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 1090.11, 93, integer0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-2761778.605), range0.getCentralValue(), 0.01);
      assertEquals((-274227.0), range0.getUpperBound(), 0.01);
      assertEquals(4975103.21, range0.getLength(), 0.01);
      assertEquals((-5249330.21), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(573.055, range1.getCentralValue(), 0.01);
      assertEquals(1090.61, range1.getUpperBound(), 0.01);
      assertEquals(55.5, range1.getLowerBound(), 0.01);
      assertEquals(1035.11, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-2761778.605), range2.getCentralValue(), 0.01);
      assertEquals((-5249330.21), range2.getLowerBound(), 0.01);
      assertEquals(4975103.21, range2.getLength(), 0.01);
      assertEquals((-274227.0), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer((-4811));
      assertEquals((-4811), (int)integer0);
      assertNotNull(integer0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), (-4811));
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 1090.11, 93, integer0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-274227.0), range0.getUpperBound(), 0.01);
      assertEquals((-5249330.21), range0.getLowerBound(), 0.01);
      assertEquals(4975103.21, range0.getLength(), 0.01);
      assertEquals((-2761778.605), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1035.11, range1.getLength(), 0.01);
      assertEquals(573.055, range1.getCentralValue(), 0.01);
      assertEquals(1090.61, range1.getUpperBound(), 0.01);
      assertEquals(55.5, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(573.055, range2.getCentralValue(), 0.01);
      assertEquals(55.5, range2.getLowerBound(), 0.01);
      assertEquals(1090.61, range2.getUpperBound(), 0.01);
      assertEquals(1035.11, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer((-4811));
      assertEquals((-4811), (int)integer0);
      assertNotNull(integer0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), (-4811));
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 1090.11, 93, integer0);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-5249330.21), range0.getLowerBound(), 0.01);
      assertEquals(4975103.21, range0.getLength(), 0.01);
      assertEquals((-2761778.605), range0.getCentralValue(), 0.01);
      assertEquals((-274227.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("org.jfree.data.general.DefaulKeyedValesDataset");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf("org.jfree.data.general.DefaulKeyedValesDataset");
      assertEquals(0, int0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaulKeyedValesDataset", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(Double.NaN, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(Double.NaN, number1);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(range2);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 523, 490.10317607430756, 523, 490.10317607430756, 523);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, (-2780.46), 523, 523, (-2099), (-207.624476313187));
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertNotNull(oHLCDataItem1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), (double)double0, 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(double0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(523.0, range0.getLowerBound(), 0.01);
      assertEquals(523.0, range0.getUpperBound(), 0.01);
      assertEquals(523.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range1, range0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(523.0, range1.getLowerBound(), 0.01);
      assertEquals(523.0, range1.getUpperBound(), 0.01);
      assertEquals(523.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(range1.equals((Object)range0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("7S8j21>W");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3666.7436;
      doubleArray1[1] = 2415.94771268671;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2415.94771268671;
      doubleArray2[1] = 3666.7436;
      doubleArray2[2] = 2415.94771268671;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 3666.7436;
      doubleArray2[5] = 2415.94771268671;
      doubleArray2[6] = 2415.94771268671;
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.contains(2415.94771268671));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1250.7958873132898, range2.getLength(), 0.01);
      assertEquals(3666.7436, range2.getUpperBound(), 0.01);
      assertEquals(2415.94771268671, range2.getLowerBound(), 0.01);
      assertEquals(3041.3456563433547, range2.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "7S8j21>W";
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("7S8j21>W");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("7S8j21>W", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, 490.10317607430756);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(defaultTableXYDataset0);
      assertFalse(boolean0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(2, oHLCDataItemArray0.length);
      assertTrue(mockDate0.equals((Object)object0));
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(523.0, range0.getLowerBound(), 0.01);
      assertEquals(523.0, range0.getUpperBound(), 0.01);
      assertEquals(523.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertTrue(mockDate0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, 490.10317607430756);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 23, 23);
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(529, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1448.2372), 1275.8877853526);
      assertEquals((-1448.2372), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1275.8877853526, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1448.2372), 23, 23, year1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-1448.2372), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1275.8877853526, lineFunction2D0.getSlope(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals((-1448.2372), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1275.8877853526, lineFunction2D0.getSlope(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1877133.5728363604, range0.getLength(), 0.01);
      assertEquals((-910669.6045550704), range0.getCentralValue(), 0.01);
      assertEquals(27897.181863109803, range0.getUpperBound(), 0.01);
      assertEquals((-1849236.3909732506), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotSame(range1, range0);
      assertEquals((-1448.2372), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1275.8877853526, lineFunction2D0.getSlope(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1472.2372, range1.getLength(), 0.01);
      assertEquals((-1448.7372), range1.getLowerBound(), 0.01);
      assertEquals((-712.6186), range1.getCentralValue(), 0.01);
      assertEquals(23.5, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-4811);
      Integer integer0 = new Integer((-4811));
      assertEquals((-4811), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), (-4811));
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 1090.11, 93, integer0);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertTrue(integer0.equals((Object)int0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-5249330.21), range0.getLowerBound(), 0.01);
      assertEquals(4975103.21, range0.getLength(), 0.01);
      assertEquals((-2761778.605), range0.getCentralValue(), 0.01);
      assertEquals((-274227.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1035.11, range1.getLength(), 0.01);
      assertEquals(573.055, range1.getCentralValue(), 0.01);
      assertEquals(1090.61, range1.getUpperBound(), 0.01);
      assertEquals(55.5, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 35.7948, 93, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short short0 = new Short((short) (-1240));
      assertEquals((short) (-1240), (short)short0);
      assertNotNull(short0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) short0, (Number) short0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "+O!A!8?1q", 2475.5259, (int) (short) (-2030));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, 2475.5259);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Week week0 = new Week(1262, 1262);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1262, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-18), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(66868L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Week week1 = (Week)week0.previous();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1262, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-18), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(66868L, week0.getSerialIndex());
      assertEquals(66867L, week1.getSerialIndex());
      assertEquals(1262, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-19), week1.getWeek());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      defaultPieDataset0.setValue((Comparable) week1, (Number) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1262, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-18), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(66868L, week0.getSerialIndex());
      assertEquals(66867L, week1.getSerialIndex());
      assertEquals(1262, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals((-19), week1.getWeek());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) week0, 983.448039967);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(1262, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-18), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(66868L, week0.getSerialIndex());
      assertNotNull(defaultPieDataset1);
      assertFalse(week0.equals((Object)week1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Week week0 = new Week(0, 7);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getYearValue());
      assertEquals(371L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertNotNull(week0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Week week1 = (Week)week0.previous();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(7, week0.getYearValue());
      assertEquals(371L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(370L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(7, week1.getYearValue());
      assertEquals((-1), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      defaultPieDataset0.setValue((Comparable) week1, (Number) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(7, week0.getYearValue());
      assertEquals(371L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(370L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(7, week1.getYearValue());
      assertEquals((-1), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) week1, (double) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(week1, week0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals(7, week0.getYearValue());
      assertEquals(371L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(370L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(7, week1.getYearValue());
      assertEquals((-1), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(defaultPieDataset1);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of column keys does not match the number of columns in the data array.");
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertEquals("[null]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertFalse(stack1.equals((Object)stack0));
      
      Week week0 = new Week(554, 554);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(42, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(554, week0.getYearValue());
      assertEquals(29404L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) week0, (Number) 53);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(42, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(554, week0.getYearValue());
      assertEquals(29404L, week0.getSerialIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) week0, (double) 1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(42, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(554, week0.getYearValue());
      assertEquals(29404L, week0.getSerialIndex());
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) pieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertEquals(42, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(554, week0.getYearValue());
      assertEquals(29404L, week0.getSerialIndex());
      assertNotNull(categoryDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2107), (-2107), (-2107), 541, (-2107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<Week> stack0 = new Stack<Week>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int0 = 278;
      int int1 = 1;
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      boolean boolean0 = stack0.add(week0);
      assertTrue(stack0.contains(week0));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Week 7, 2014]", stack0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double double0 = defaultOHLCDataset0.getXValue(278, 1);
      assertEquals(1.39240928132E12, double0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Year constructor: year (";
      stringArray0[1] = "EhZk'+saq,ZCT?4";
      stringArray0[2] = "";
      stringArray0[3] = "sv2J9";
      stringArray0[4] = "The 'data' array must contain six arrays with equal length.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2099), (-2099), (-2099), 523, 490.10317607430756);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number1);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number1);
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(number1.equals((Object)number0));
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 523;
      doubleArray1[1] = (double) (-2099);
      doubleArray1[2] = (double) (-2099);
      doubleArray1[3] = (double) 523;
      doubleArray1[4] = (double) (-2099);
      doubleArray1[5] = 490.10317607430756;
      doubleArray1[6] = (double) (-2099);
      doubleArray1[7] = (double) (-2099);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2099);
      doubleArray2[1] = (double) (-2099);
      doubleArray2[2] = (double) 523;
      doubleArray2[3] = (double) 523;
      doubleArray2[4] = (double) 523;
      doubleArray2[5] = 490.10317607430756;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-2099);
      doubleArray3[1] = 490.10317607430756;
      doubleArray3[2] = (double) (-2099);
      doubleArray3[3] = (double) (-2099);
      doubleArray3[4] = (double) (-2099);
      doubleArray3[5] = (-3181.5333);
      doubleArray3[6] = (double) (-2099);
      doubleArray3[7] = 490.10317607430756;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 490.10317607430756;
      doubleArray4[1] = (-3181.5333);
      doubleArray4[2] = (double) 523;
      doubleArray4[3] = 490.10317607430756;
      doubleArray4[4] = 3980.271549;
      doubleArray4[5] = (double) 523;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 713.0;
      doubleArray5[1] = 490.10317607430756;
      doubleArray5[2] = (-2164.94178855);
      doubleArray5[3] = (-3181.5333);
      doubleArray5[4] = (-3181.5333);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-2164.94178855);
      doubleArray6[1] = (-2164.94178855);
      doubleArray6[2] = (-687.0);
      doubleArray6[3] = (-3181.5333);
      doubleArray6[4] = 713.0;
      doubleArray6[5] = 713.0;
      doubleArray6[6] = 490.10317607430756;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = (double) 523;
      doubleArray8[1] = (-3181.5333);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (double) (-2099);
      doubleArray9[1] = (-2164.94178855);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2423.579927);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = (-1724.57125);
      doubleArray1[3] = 681.401078331;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-2960.7542018);
      doubleArray1[7] = (-513.646761154);
      doubleArray1[8] = (-4760.99673);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5442.397808330999, range0.getLength(), 0.01);
      assertEquals((-2039.7978258345), range0.getCentralValue(), 0.01);
      assertEquals((-4760.99673), range0.getLowerBound(), 0.01);
      assertEquals(681.401078331, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      String string1 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3942);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3942, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "The number of column keys does not match the number of columns in the data array.", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3942, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NaN;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 625.0732362;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! k8Fq", "DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(625.0732362, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(313.0366181, range0.getCentralValue(), 0.01);
      assertEquals(624.0732362, range0.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[][] doubleArray1 = new double[1][4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 43);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(43, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(categoryToPieDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0, false);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      categoryToPieDataset0.removeChangeListener(intervalXYDelegate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(43, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 24, Integer.MAX_VALUE);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(24, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 24);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(110, 110);
      assertEquals(110.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(110.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate(93, (-9999), (-815), 400, 3, (-12));
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Tue Jul 23 16:02:48 GMT 1157", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1157, week0.getYearValue());
      assertEquals(30, week0.getWeek());
      assertEquals(61351L, week0.getSerialIndex());
      assertEquals((-25637587032000L), week0.getFirstMillisecond());
      assertEquals((-25637587032001L), week0.getLastMillisecond());
      assertNotNull(week0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.0), 957.1020521862, 110, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(110.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(110.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Tue Jul 23 16:02:48 GMT 1157", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1157, week0.getYearValue());
      assertEquals(30, week0.getWeek());
      assertEquals(61351L, week0.getSerialIndex());
      assertEquals((-25637587032000L), week0.getFirstMillisecond());
      assertEquals((-25637587032001L), week0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(110.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(110.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Tue Jul 23 16:02:48 GMT 1157", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1157, week0.getYearValue());
      assertEquals(30, week0.getWeek());
      assertEquals(61351L, week0.getSerialIndex());
      assertEquals((-25637587032000L), week0.getFirstMillisecond());
      assertEquals((-25637587032001L), week0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(105391.225740482, range0.getLength(), 0.01);
      assertEquals(105391.225740482, range0.getUpperBound(), 0.01);
      assertEquals(52695.612870241, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(range1, range0);
      assertEquals(110.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(110.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Tue Jul 23 16:02:48 GMT 1157", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1157, week0.getYearValue());
      assertEquals(30, week0.getWeek());
      assertEquals(61351L, week0.getSerialIndex());
      assertEquals((-25637587032000L), week0.getFirstMillisecond());
      assertEquals((-25637587032001L), week0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(959.1020521862, range1.getLength(), 0.01);
      assertEquals(478.0510260931, range1.getCentralValue(), 0.01);
      assertEquals(957.6020521862, range1.getUpperBound(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[9][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! k8Fq", "+O!A! k8Fq", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-5.263626240002312E13));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-5.263626240002312E13), range0.getLowerBound(), 0.01);
      assertEquals((-5.263626240002312E13), range0.getUpperBound(), 0.01);
      assertEquals((-5.263626240002312E13), range0.getCentralValue(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(range0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotSame(range2, range0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1007, 1007);
      assertEquals(1007, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1007, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 16;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 16;
      doubleArray2[1] = (double) 16;
      doubleArray2[2] = (double) 16;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2448.0);
      doubleArray3[1] = (double) 16;
      doubleArray3[2] = (double) 16;
      doubleArray3[3] = (double) 16;
      doubleArray3[4] = (double) 16;
      doubleArray3[5] = (double) 16;
      doubleArray3[6] = (double) 16;
      doubleArray3[7] = (double) 16;
      doubleArray3[8] = (double) 16;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("PG76'MFr@0", "Pbeo,", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertEquals(3, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 30, 30);
      assertNull(matrixSeries0.getDescription());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeries0.setDescription("");
      assertEquals("", matrixSeries0.getDescription());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getRowCount());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals("", matrixSeries0.getDescription());
      assertEquals(900, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(30, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the ata array.", "The number of column keys does not match the number of columns in the ata array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("-H'csvbG:EkZ");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "-H'csvbG:EkZ", Double.NaN, (-459));
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "-H'csvbG:EkZ", (-461.09175));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(boolean0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[9][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8Fq", "+O!A! 8Fq", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 366);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(366, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 366, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("?-'csvbG:?kZ");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getKeyCount("?-'csvbG:?kZ");
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray4[1] = 1.7976931348623157E308;
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "?-'csvbG:?kZ", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3114);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3114, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3114, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "Null 'data' argument.", 0.0, (-1964));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Null 'data' argument.", 0.0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((XYBarDataset) null);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 72.08136;
      doubleArray3[1] = (-358.8757915759871);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-3125.23387);
      doubleArray5[1] = (-358.8757915759871);
      doubleArray5[2] = (-358.8757915759871);
      doubleArray5[3] = (-358.8757915759871);
      doubleArray5[4] = 72.08136;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("7S8j21>W", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertEquals(5, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "7S8j21>W", 6.283185307179586, 2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertEquals(5, doubleArray0.length);
      assertNotNull(pieDataset2);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset0.equals((Object)pieDataset2));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("g=", 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 871);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(11.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(boolean0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, linkedList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), (-1066.79075949), (-1066.79075949), 523, 489.878829833836);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 489.878829833836);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1066.79075949), range1.getUpperBound(), 0.01);
      assertEquals((-1066.79075949), range1.getCentralValue(), 0.01);
      assertEquals((-1066.79075949), range1.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(mockDate0, object0);
      assertNotSame(range2, range1);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1066.79075949), range2.getLowerBound(), 0.01);
      assertEquals((-1066.79075949), range2.getUpperBound(), 0.01);
      assertEquals((-1066.79075949), range2.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(range2.equals((Object)range1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("?-'csvbG:?kZ");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf("?-'csvbG:?kZ");
      assertEquals(0, int0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, list0, false);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 24;
      doubleArray1[1] = (double) 24;
      doubleArray1[2] = (double) 24;
      doubleArray1[3] = (double) 24;
      doubleArray1[4] = (-855.37093);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-855.37093);
      doubleArray2[1] = (-855.37093);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("$.", "$.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(24.0, range0.getUpperBound(), 0.01);
      assertEquals((-415.685465), range0.getCentralValue(), 0.01);
      assertEquals((-855.37093), range0.getLowerBound(), 0.01);
      assertEquals(879.37093, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals((-807.37093), range1.getCentralValue(), 0.01);
      assertEquals(1806.74186, range1.getLength(), 0.01);
      assertEquals(96.0, range1.getUpperBound(), 0.01);
      assertEquals((-1710.74186), range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, stack0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-855.37093), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), (-1066.79075949), (-1066.79075949), 523, 489.878829833836);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 489.878829833836);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1066.79075949), range1.getUpperBound(), 0.01);
      assertEquals((-1066.79075949), range1.getCentralValue(), 0.01);
      assertEquals((-1066.79075949), range1.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, object0);
      assertNotSame(range2, range1);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-6.70268736E13), range2.getUpperBound(), 0.01);
      assertEquals((-6.70268736E13), range2.getCentralValue(), 0.01);
      assertEquals((-6.70268736E13), range2.getLowerBound(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.data.general.DefaultKeyedValuesDataset");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 55.5;
      doubleArray1[1] = 120.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 2445.79;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-171.4951);
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-171.4951);
      doubleArray2[1] = (-171.4951);
      doubleArray2[2] = (-922.534351876203);
      doubleArray2[3] = 120.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 55.5;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = (-324.334124442);
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k9Wf(,8g1", "_]s.5>)Q_Po`M?a`Y7", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2565.79, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 561, 561);
      assertEquals(561, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(561, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Week week0 = new Week(17, (-1));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(17, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-36L), week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(17, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1), week0.getYearValue());
      assertEquals((-36L), week0.getSerialIndex());
      assertEquals((-37L), week1.getSerialIndex());
      assertEquals((-1), week1.getYearValue());
      assertEquals(16, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) week1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Integer integer0 = new Integer((-4811));
      assertEquals((-4811), (int)integer0);
      assertNotNull(integer0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4811), 2324.951435762);
      assertEquals(2324.951435762, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 56.0, 1090.11, 93, integer0);
      assertEquals(2324.951435762, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(2324.951435762, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1327514.0450205929, range0.getCentralValue(), 0.01);
      assertEquals(2404255.5292358417, range0.getLength(), 0.01);
      assertEquals(2529641.8096385137, range0.getUpperBound(), 0.01);
      assertEquals(125386.28040267201, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals(2324.951435762, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-4811.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1035.11, range1.getLength(), 0.01);
      assertEquals(1090.61, range1.getUpperBound(), 0.01);
      assertEquals(55.5, range1.getLowerBound(), 0.01);
      assertEquals(573.055, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 200.5200764202386;
      double double0 = 1552.173611;
      doubleArray1[1] = 1552.173611;
      doubleArray1[2] = 2989.5905;
      doubleArray1[3] = (-116.92651061490814);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-2759.234);
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValuesDataset", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2989.5905, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Date date0 = null;
      double double1 = 518.6866215896341;
      double double2 = 3354.6231;
      OHLCDataItem oHLCDataItem0 = null;
      try {
        oHLCDataItem0 = new OHLCDataItem((Date) null, 518.6866215896341, 3354.6231, (-1.0), (-537.793535), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.data.xy.OHLCDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1227.32;
      doubleArray1[1] = 1050.5864459426;
      doubleArray1[2] = (-9.806815447);
      doubleArray1[3] = 0.0;
      doubleArray1[5] = 4477.129994;
      doubleArray1[6] = 2.0;
      doubleArray1[7] = (-540.8235609);
      doubleArray1[8] = 1.7976931348623157E308;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-554.2320438);
      doubleArray2[1] = 4477.129994;
      doubleArray2[2] = 1050.5864459426;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`>B@T2x3eKw[", "|A D+2=di'++o)[Q%z", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      List list0 = jDBCCategoryDataset0.getColumnKeys();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(4477.129994, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1091.74;
      doubleArray1[1] = (-150.34);
      doubleArray1[2] = (-1632.757094498);
      doubleArray1[3] = 1193.023431390015;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1197.3094560648146;
      doubleArray2[1] = (-150.34);
      doubleArray2[2] = (-150.34);
      doubleArray2[3] = 1193.023431390015;
      doubleArray2[4] = 380.90109725;
      doubleArray2[5] = 1091.74;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1193.023431390015;
      doubleArray3[1] = 1091.74;
      doubleArray3[2] = (-150.34);
      doubleArray3[3] = 1193.023431390015;
      doubleArray3[4] = (-1632.757094498);
      doubleArray3[5] = 1193.023431390015;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 380.90109725;
      doubleArray4[1] = 380.90109725;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 3530.4528362198;
      doubleArray5[1] = 380.90109725;
      doubleArray5[2] = (-1632.757094498);
      doubleArray5[3] = 0.5;
      doubleArray5[4] = 1193.023431390015;
      doubleArray5[5] = (-1632.757094498);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1632.757094498);
      doubleArray6[1] = 0.5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-1632.757094498);
      doubleArray7[1] = (-3354.04);
      doubleArray7[2] = (-1632.757094498);
      doubleArray7[3] = 1193.023431390015;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.5;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = 1.5;
      doubleArray9[1] = 3530.4528362198;
      doubleArray9[2] = (-150.34);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-2294));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2294), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2190.71, (-2294));
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      PowerFunction2D powerFunction2D1 = new PowerFunction2D(241.27, (-4760.99672994993));
      assertEquals(241.27, powerFunction2D1.getA(), 0.01);
      assertEquals((-4760.99672994993), powerFunction2D1.getB(), 0.01);
      assertNotNull(powerFunction2D1);
      assertFalse(powerFunction2D1.equals((Object)powerFunction2D0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1399.0, Double.POSITIVE_INFINITY, 2, bigInteger0);
      assertNotSame(powerFunction2D0, powerFunction2D1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(powerFunction2D0.equals((Object)powerFunction2D1));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(powerFunction2D0, powerFunction2D1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(double0);
      assertFalse(powerFunction2D0.equals((Object)powerFunction2D1));
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j2W", 24, 24);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("7S8j2W");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, double0, double0);
      assertEquals(0, linkedList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getKeyCount(double0);
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) 0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2099), 523, 523);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals("Fri Jan 05 00:00:00 GMT 155", object0.toString());
      assertNotNull(object0);
      assertTrue(object0.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), (-1066.79075949), (-1066.79075949), 523, 489.878829833836);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)object0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-6.70268736E13), number0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(number0);
      assertTrue(mockDate0.equals((Object)object0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 489.878829833836);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1066.79075949), range1.getUpperBound(), 0.01);
      assertEquals((-1066.79075949), range1.getLowerBound(), 0.01);
      assertEquals((-1066.79075949), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertTrue(mockDate0.equals((Object)object0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(mockDate0, object0);
      assertNotSame(range2, range1);
      assertEquals("Fri Jan 05 00:00:00 GMT 155", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-6.70268736E13), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-6.70268736E13), range2.getUpperBound(), 0.01);
      assertEquals((-6.70268736E13), range2.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range2);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 2686.920614259;
      doubleArray1[2] = (-2716.626289764328);
      doubleArray1[3] = 3221.81;
      doubleArray1[4] = 1944.0;
      doubleArray1[5] = (-654.395202406);
      doubleArray1[6] = (-3908.4230466752206);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3908.4230466752206);
      doubleArray2[1] = 1944.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2716.626289764328);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2686.920614259;
      doubleArray4[1] = (-2716.626289764328);
      doubleArray4[2] = 0.8;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"(Z5}to`", "Null 'seriesKey' argument.", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals((-3908.4230466752206), range0.getLowerBound(), 0.01);
      assertEquals(3221.81, range0.getUpperBound(), 0.01);
      assertEquals(7130.233046675221, range0.getLength(), 0.01);
      assertEquals((-343.3065233376103), range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(613.8406389097258, range1.getCentralValue(), 0.01);
      assertEquals((-3908.4230466752206), range1.getLowerBound(), 0.01);
      assertEquals(5136.104324494672, range1.getUpperBound(), 0.01);
      assertEquals(9044.527371169894, range1.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(3221.81, number0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotSame(range1, range0);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range2.getUpperBound(), 0.01);
      assertEquals(11.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(23.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      PieDataset pieDataset0 = null;
      Comparable<XIntervalSeriesCollection> comparable0 = null;
      double double0 = (-33.66233759966457);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, (-33.66233759966457), (-1964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 2039);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 587;
      doubleArray1[1] = (double) 587;
      doubleArray1[2] = (double) 587;
      doubleArray1[3] = (double) 587;
      doubleArray1[4] = (double) 587;
      doubleArray1[5] = (double) 587;
      doubleArray1[6] = (double) 587;
      doubleArray1[7] = (double) 587;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(1526, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1526, week0.getYearValue());
      assertEquals((-10), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80868L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1526, week0.getYearValue());
      assertEquals((-10), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80868L, week0.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(80869L, week1.getSerialIndex());
      assertEquals((-9), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(587, (-578), week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1526, week0.getYearValue());
      assertEquals((-10), week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80868L, week0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-579), dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(587.0, range0.getUpperBound(), 0.01);
      assertEquals(587.0, range0.getCentralValue(), 0.01);
      assertEquals(587.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(4696.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(4696.0, range1.getUpperBound(), 0.01);
      assertEquals(2348.0, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(587.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      boolean boolean0 = false;
      jDBCXYDataset0.setTimeSeries(false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      String string0 = "java.lang.Class";
      String string1 = "";
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-3810.0);
      doubleArray1[2] = (-436.62277);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3810.0);
      doubleArray2[1] = (-3810.0);
      doubleArray2[2] = (-436.62277);
      doubleArray2[3] = (-436.62277);
      doubleArray2[4] = (-3810.0);
      doubleArray2[5] = (-3810.0);
      doubleArray2[6] = (-436.62277);
      doubleArray2[7] = (-3810.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("lQ", "", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "lQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 24;
      doubleArray1[1] = (double) 24;
      doubleArray1[2] = (double) 24;
      doubleArray1[3] = (double) 24;
      doubleArray1[4] = (double) 24;
      doubleArray1[5] = (double) 24;
      doubleArray1[6] = (double) 24;
      doubleArray1[7] = (double) 24;
      doubleArray1[8] = (double) 24;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 24;
      doubleArray2[1] = (double) 24;
      doubleArray2[2] = (double) 24;
      doubleArray2[3] = (double) 24;
      doubleArray2[4] = (double) 24;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (double) 24;
      doubleArray2[7] = (double) 24;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimeTableXYDataset", "7S8j21>W", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1.0), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(108.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(216.0, range0.getLength(), 0.01);
      assertEquals(216.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 24.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the ata array.", "The number of column keys does not match the number of columns in the ata array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8281W", 24, 24);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries1 = new MatrixSeries("7S8281W", 24, 24);
      assertTrue(matrixSeries1.getNotify());
      assertNull(matrixSeries1.getDescription());
      assertEquals(24, matrixSeries1.getRowCount());
      assertEquals(24, matrixSeries1.getColumnsCount());
      assertEquals(576, matrixSeries1.getItemCount());
      assertNotNull(matrixSeries1);
      assertTrue(matrixSeries1.equals((Object)matrixSeries0));
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "7S8281W");
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(range1, range0);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(11.5, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("org.jfree.data.general.DefaulKeyedValesDataset");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-435.40729988), Double.POSITIVE_INFINITY);
      assertEquals((-435.40729988), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-435.40729988), 24, 24, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-435.40729988), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertEquals((-435.40729988), xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(24.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(24, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(24, 24);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(23, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("R", "R", "6Jz8lO/M|$KY");
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("6Jz8lO/M|$KY", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("R", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("6Jz8lO/M|$KY", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("R", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("6Jz8lO/M|$KY", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("R", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("R", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("6Jz8lO/M|$KY", timeSeries1.getRangeDescription());
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      Float float0 = new Float((double) 587);
      assertEquals(587.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 587;
      doubleArray1[1] = (double) 587;
      doubleArray1[2] = (double) 587;
      doubleArray1[3] = (double) 587;
      doubleArray1[4] = (double) 587;
      doubleArray1[5] = (double) 587;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 587;
      doubleArray2[1] = (double) 587;
      doubleArray2[2] = (double) 587;
      doubleArray2[3] = (double) 587;
      doubleArray2[4] = (double) 587;
      doubleArray2[5] = (double) 587;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.6245792E12);
      doubleArray3[1] = (double) 587;
      doubleArray3[2] = (double) 587;
      doubleArray3[3] = (double) 587;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 587;
      doubleArray4[1] = (double) 587;
      doubleArray4[2] = (double) 587;
      doubleArray4[3] = (double) 587;
      doubleArray4[4] = (double) 587;
      doubleArray4[5] = (double) 587;
      doubleArray4[6] = (-4648.1);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 587;
      doubleArray5[1] = (-1.6245792E12);
      doubleArray5[2] = (-4648.1);
      doubleArray5[3] = (double) 587;
      doubleArray5[4] = (double) 587;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1.6245792E12);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-1.6245792E12);
      doubleArray7[1] = (-1.6245792E12);
      doubleArray7[2] = (-4648.1);
      doubleArray7[3] = (double) 587;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      defaultMultiValueCategoryDataset1.add(linkedList0, bigInteger0, bigInteger0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(0, linkedList0.size());
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, keyToGroupMap0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertNull(range1);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (List) linkedList0, true);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, Double.NEGATIVE_INFINITY);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, range4.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      String string0 = "R";
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[2] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("R", "R", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SCALE_AREA_TO_1";
      stringArray0[1] = "R";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "SCALE_AREA_TO_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-9.806815447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries1 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries1.getRowCount());
      assertEquals(24, matrixSeries1.getColumnsCount());
      assertNull(matrixSeries1.getDescription());
      assertEquals(576, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertNotNull(matrixSeries1);
      assertTrue(matrixSeries1.equals((Object)matrixSeries0));
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, false);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 24;
      doubleArray1[1] = (double) 24;
      doubleArray1[2] = (double) 24;
      doubleArray1[3] = (double) 24;
      doubleArray1[4] = (double) 24;
      doubleArray1[5] = (double) 24;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 24;
      doubleArray3[1] = (double) 24;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 24;
      doubleArray4[1] = 536.0;
      doubleArray4[2] = (double) 24;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[2] = numberArray1;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xIntervalSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("b", 14, 14);
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(14));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertFalse(vector0.contains(true));
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNull(range1);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-1194.23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("h4K2P.q\"S!91", 2488, 1);
      assertEquals(2488, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2488, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2488, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2488, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(2488, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2488, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      SynthViewportUI synthViewportUI0 = new SynthViewportUI();
      assertNotNull(synthViewportUI0);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(synthViewportUI0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(1, 1, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-978.76338525896), 1, 85.0, (-1.0));
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-978.76338525896), 1, 24.0, (-1.312148472E13), 1.5);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1, (-1.0), (-1421.25065761), (-1.312148472E13), 1.5);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1.0), 24.0, (-1.0), (-2193.5873747028), 2046.220909482816);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("The number of column keys does not match the number of columns in the data array.", oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-1421.25065761), (double)double1, 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1492.5807018502;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1584.724081;
      doubleArray1[3] = 8.0;
      doubleArray1[4] = 5200.33;
      doubleArray1[5] = (-74.85369448995);
      doubleArray1[6] = (-100.378686);
      doubleArray1[7] = 452.0063504127;
      doubleArray1[8] = (-785.0952689836);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("~!", "~!", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(5200.33, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("?-'csvbG:?kZ");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-2504.6597);
      doubleArray1[2] = (-3887.988);
      doubleArray1[3] = (-1271.54092828605);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-210.473492);
      doubleArray1[8] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      vector0.clear();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = vector0.add(defaultIntervalXYDataset0);
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      vector0.clear();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = vector0.add(defaultIntervalXYDataset0);
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      vector0.clear();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNull(range1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2.04748992E13, 2.04748992E13);
      assertEquals(2.04748992E13, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2.04748992E13, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-9.806815447), 2.04748992E13, 535, regularTimePeriod0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(2.04748992E13, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2.04748992E13, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2.04748992E13, 3910.36611408737);
      assertEquals(2.04748992E13, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3910.36611408737, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2817.2845649305336), 3910.36611408737, 1178, day0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      vector0.clear();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = vector0.add(defaultIntervalXYDataset0);
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(BGi!#.$R]f.ZJ", "(BGi!#.$R]f.ZJ", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(7, doubleArray0.length);
      assertNotNull(list0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1351.4329216111, (-3131.76812));
      assertEquals(1351.4329216111, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-3131.76812), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-3131.76812), (-1652.44), 93, "(BGi!#.$R]f.ZJ");
      assertEquals(1351.4329216111, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-3131.76812), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-3131.76812), (-1652.44), 93, "(BGi!#.$R]f.ZJ");
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals(1351.4329216111, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-3131.76812), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertNotNull(xYSeriesCollection1);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals(1351.4329216111, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-3131.76812), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertEquals(4632912.645235534, range0.getLength(), 0.01);
      assertEquals(9809322.990369946, range0.getUpperBound(), 0.01);
      assertEquals(5176410.345134412, range0.getLowerBound(), 0.01);
      assertEquals(7492866.667752178, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[9][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8?Fq", "+O!A! 8?Fq", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, double0, double0);
      assertEquals(0, linkedList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("org.jfree.chart.event.DatasetChangeInfo", "cVXuVZ", "", "Null 'seriesKey' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond1.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond1.getSerialIndex());
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      int int0 = timeSeriesCollection0.indexOf(fixedMillisecond0);
      assertEquals(0, int0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNull(range1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(23.0, number1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(11.5, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Minute minute0 = new Minute();
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertNotNull(minute0);
      
      Day day0 = minute0.getDay();
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(8, day0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(8, hour0.getHour());
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(8, hour0.getHour());
      assertEquals(9, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4018, 4018, hour1);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(8, hour0.getHour());
      assertEquals(9, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(4017, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Stack<Long> stack1 = new Stack<Long>();
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      String string1 = "org.jfree.data.general.DefaultKeyedValuesDataset";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "The number of column keys does not match the number of columns in the data array.", 587.0, (-2798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 243);
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-1652), 243);
      assertEquals(243, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1652), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertEquals(243, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1652), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range3, range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Null 'f' argument.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Stack<Object> stack1 = new Stack<Object>();
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = false;
      categoryTableXYDataset0.setAutoWidth(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "[";
      stringArray0[1] = "Null 'f' argument.";
      stringArray0[2] = "EA:m^-X0X-e;g 5";
      stringArray0[3] = "6pwq3EEsIzz";
      stringArray0[4] = "Null 'visibleSeriesKeys' argument.";
      stringArray0[5] = "";
      stringArray0[6] = "Av%8";
      stringArray0[7] = "";
      stringArray0[8] = "vn8rF$R7\"]F1&'6o";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-4.287168E11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      MockDate mockDate0 = new MockDate(2008, 982, 982, 2008, 2008);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2008, 2008, 0.0, Double.NaN, (-1.6245792E12));
      assertEquals("Fri Oct 02 01:28:00 GMT 3992", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.NaN, Double.NaN, (-1.6245792E12), 2008, (-1513.0838));
      assertEquals("Fri Oct 02 01:28:00 GMT 3992", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("R", oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(6.383189328E13, number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1904.283));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.624579202008E12, range1.getLength(), 0.01);
      assertEquals((-8.12289598996E11), range1.getCentralValue(), 0.01);
      assertEquals(2008.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.6245792E12), range1.getLowerBound(), 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockDate mockDate0 = new MockDate(556, 1955, (-32));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1463.39709192), (-4174.677359219), 1955, 2143.9, (-32));
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.04748992E13, range0.getLowerBound(), 0.01);
      assertEquals(2.04748992E13, range0.getUpperBound(), 0.01);
      assertEquals(2.04748992E13, range0.getCentralValue(), 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) oHLCDataItem0, (-2.0596032E12), 0);
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, Double.POSITIVE_INFINITY);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals("Thu Oct 29 00:00:00 GMT 2618", mockDate0.toString());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(pieDataset0.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(212);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(212L, day0.getFirstMillisecond());
      assertEquals(212L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(212, day0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(212L, day0.getFirstMillisecond());
      assertEquals(212L, day0.getLastMillisecond());
      assertEquals((-44), hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.previous();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(212L, day0.getFirstMillisecond());
      assertEquals(212L, day0.getLastMillisecond());
      assertEquals((-44), hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals((-45), hour1.getHour());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) hour1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(212L, day0.getFirstMillisecond());
      assertEquals(212L, day0.getLastMillisecond());
      assertEquals((-44), hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals((-45), hour1.getHour());
      assertNotNull(defaultPieDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 23;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 587, 587);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NaN, (-32), (-178.69), 2455.575524025559, 587);
      assertEquals("Wed Jul 10 00:00:00 GMT 1918", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Wed Jul 10 00:00:00 GMT 1918", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Wed Jul 10 00:00:00 GMT 1918", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.6245792E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.6245792E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.6245792E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 587);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(587, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) oHLCDataItem0, (-2.0596032E12), (-1807));
      assertEquals("Wed Jul 10 00:00:00 GMT 1918", mockDate0.toString());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(587, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, (-2.0596032E12));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals("Wed Jul 10 00:00:00 GMT 1918", mockDate0.toString());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(587, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(587, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-8.07825653E12);
      doubleArray2[1] = (-1675.90514630016);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-4373.8896642874);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-8.07825653E12);
      doubleArray3[1] = (-1675.90514630016);
      doubleArray3[2] = (-4373.8896642874);
      doubleArray3[3] = (-8.07825653E12);
      doubleArray3[4] = (-4373.8896642874);
      doubleArray3[5] = (-4373.8896642874);
      doubleArray3[6] = (-4373.8896642874);
      doubleArray3[7] = (-1.0);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-1.615651306E13), number0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      VectorSeries vectorSeries0 = new VectorSeries((-8.07825653E12), true, true);
      assertNull(vectorSeries0.getDescription());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertTrue(vectorSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertNotNull(vectorSeries0);
      
      boolean boolean0 = vectorSeriesCollection0.removeSeries(vectorSeries0);
      assertFalse(boolean0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(vectorSeries0.getDescription());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertTrue(vectorSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-4.0391282650005E12), range1.getCentralValue(), 0.01);
      assertEquals((-8.07825653E12), range1.getLowerBound(), 0.01);
      assertEquals(8.078256529999E12, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2326.9346);
      doubleArray1[1] = (-383.35036309476504);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1726.9);
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2326.9346);
      doubleArray3[1] = 6.283185307179586;
      doubleArray3[2] = (-383.35036309476504);
      doubleArray3[3] = (-1726.9);
      doubleArray3[4] = (-1.7976931348623157E308);
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-1726.9);
      doubleArray4[1] = (-2326.9346);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1.7976931348623157E308);
      doubleArray5[1] = 2525.3948167064;
      doubleArray5[2] = (-2143.1578834);
      doubleArray5[3] = 6.283185307179586;
      doubleArray5[4] = (-1.7976931348623157E308);
      doubleArray5[5] = (-1.0);
      doubleArray5[6] = 6.283185307179586;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = (-1.7976931348623157E308);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-1.0);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 2525.3948167064;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = (-383.35036309476504);
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = (-1726.9);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-2143.1578834);
      doubleArray8[5] = 0.8;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "nczD+w$o&@8Qw$k30 n", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-743.789556084);
      doubleArray1[1] = 63.357384921;
      doubleArray1[0] = 63.357384921;
      jDBCXYDataset0.setTimeSeries(false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range2, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-3151), 568, (-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      matrixSeries0.setNotify(true);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, false);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "7S8j21>W");
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      String string0 = "nAeqCgJ90xBD`N3)Vd";
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2931.573;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-3361.809648912);
      doubleArray1[4] = (-829.45174);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-3361.809648912);
      doubleArray2[3] = (-829.45174);
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-3361.809648912);
      doubleArray2[6] = (-3361.809648912);
      doubleArray2[7] = (-829.45174);
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("nAeqCgJ90xBD`N3)Vd", "nAeqCgJ90xBD`N3)Vd", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-829.45174));
      assertNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(2931.573, range1.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 558, (-1526));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), 63.357384921, 558, (-1526), 23.0);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      JTable jTable0 = new JTable(xYDatasetTableModel0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 755.40826, (-32.0), (-882.7842), (-569.1609176245), 1957.07979124);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[5] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1957.07979124, 1957.07979124, 0.8, (-882.7842), 1733.337373);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[6] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(jTable0);
      assertFalse(boolean0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals((-1.88352E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.88352E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.88352E12), range0.getCentralValue(), 0.01);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertEquals(537.14779562, range1.getCentralValue(), 0.01);
      assertEquals(2839.8639912400004, range1.getLength(), 0.01);
      assertEquals((-882.7842), range1.getLowerBound(), 0.01);
      assertEquals(1957.07979124, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("r~ HW@IMH", "r~ HW@IMH", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Integer integer0 = new Integer(1076);
      assertEquals(1076, (int)integer0);
      assertNotNull(integer0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 587, (-1526));
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC((-32), 587, (-1), (-229), 587, (-229));
      assertEquals((-1676171809000L), long0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 587);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1699.28980203), 4);
      assertEquals(4.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1699.28980203), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0, 1, 557, 0);
      assertEquals(4.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1699.28980203), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1695.28980203), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1699.28980203), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(557, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(4.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1699.28980203), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1695.28980203), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1699.28980203), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(557, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotSame(week0, week1);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(double0);
      assertFalse(week0.equals((Object)week1));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 587, (-1526));
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC((-32), 587, (-1), (-229), 587, (-229));
      assertEquals((-1676171809000L), long0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 587, 587, 587, (-1526), 23.0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertNotNull(jTable0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(jTable0);
      assertFalse(boolean0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.8071424E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.8071424E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.8071424E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(587.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(587.0, range1.getUpperBound(), 0.01);
      assertEquals(587.0, range1.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      Integer integer0 = new Integer(560);
      assertEquals(560, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      Float float0 = new Float((double) (-1526));
      assertEquals((-1526.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[2] = (Number) float0;
      Byte byte0 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte0);
      assertNotNull(byte0);
      
      numberArray1[3] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) bigInteger0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) byte0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) bigInteger0;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(3233);
      assertEquals(3233, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=3233,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Number number0 = decimalFormat0.parse("org.jfree.data.general.DatasetUtilities", parsePosition0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(3233, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3233,errorIndex=3233]", parsePosition0.toString());
      assertEquals(3233, parsePosition0.getErrorIndex());
      assertNull(number0);
      
      numberArray5[2] = null;
      numberArray5[3] = (Number) byte0;
      numberArray5[4] = (Number) byte0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray5[5] = (Number) integer1;
      numberArray5[6] = (Number) bigInteger0;
      numberArray5[7] = (Number) bigInteger0;
      numberArray5[8] = (Number) byte0;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 558, (-1526));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), 63.357384921, 558, (-1526), 23.0);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals((-1.88352E12), number0);
      assertEquals("Tue Apr 26 00:00:00 GMT 1910", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1230.4088398095798);
      doubleArray1[1] = (-569.1609176245);
      doubleArray1[2] = (double) (-1526);
      doubleArray1[3] = (double) 558;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1526);
      doubleArray2[1] = (-569.1609176245);
      doubleArray2[2] = (double) 558;
      doubleArray2[3] = (double) (-32);
      doubleArray2[4] = (double) (-1526);
      doubleArray2[5] = (double) (-32);
      doubleArray2[6] = (double) 558;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 63.357384921;
      doubleArray3[1] = (-1552.09919);
      doubleArray3[2] = 63.357384921;
      doubleArray3[3] = (-1230.4088398095798);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 558;
      doubleArray4[1] = (-1230.4088398095798);
      doubleArray4[2] = (-569.1609176245);
      doubleArray4[3] = 23.0;
      doubleArray4[4] = (-1230.4088398095798);
      doubleArray4[5] = (-1230.4088398095798);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 63.357384921;
      doubleArray5[1] = (-1552.09919);
      doubleArray5[2] = (-1552.09919);
      doubleArray5[3] = 63.357384921;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-1552.09919);
      doubleArray6[1] = (-1230.4088398095798);
      doubleArray6[2] = (double) (-1526);
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (double) (-1526);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-467.9083);
      doubleArray7[1] = (-1.0);
      doubleArray7[2] = (double) 558;
      doubleArray7[3] = (double) (-32);
      doubleArray7[4] = (double) (-32);
      doubleArray7[5] = (double) 558;
      doubleArray7[6] = (-569.1609176245);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (-467.9083);
      doubleArray8[1] = (double) 558;
      doubleArray8[2] = 63.357384921;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(2110.09919, range0.getLength(), 0.01);
      assertEquals((-1552.09919), range0.getLowerBound(), 0.01);
      assertEquals((-497.04959499999995), range0.getCentralValue(), 0.01);
      assertEquals(558.0, range0.getUpperBound(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(53, (-32), 2224);
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC((-937), (-1388), 530, (-1526), 530, 540);
      assertEquals((-35387470860000L), long0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2224, (-0.11419941661277744), 0.0, (-1028.036860717), (-1388));
      assertEquals("Fri Jun 01 00:00:00 GMT 1956", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Jun 01 00:00:00 GMT 1956", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(jTable0);
      assertFalse(boolean0);
      assertEquals("Fri Jun 01 00:00:00 GMT 1956", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Fri Jun 01 00:00:00 GMT 1956", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-4.287168E11), range0.getLowerBound(), 0.01);
      assertEquals((-4.287168E11), range0.getUpperBound(), 0.01);
      assertEquals((-4.287168E11), range0.getCentralValue(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-0.11419941661277744).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1552.09919));
      assertEquals((-1552.09919), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1.7976931348623157E308), 24, 24, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-1552.09919), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.9958403095347198E292), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(24, xYSeries0.getItemCount());
      assertEquals(3.0977421277981877E295, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-1552.09919), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.9958403095347198E292), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(24, xYSeries0.getItemCount());
      assertEquals(3.0977421277981877E295, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(23.0, number2);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number2);
      assertFalse(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      matrixSeries0.setNotify(true);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, false);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 24;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 24;
      doubleArray2[1] = (double) 24;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 24;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (double) 24;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (double) 24;
      doubleArray6[2] = Double.NaN;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = (-1444.394);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = (-1.0);
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = (-1444.394);
      doubleArray8[1] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = Double.POSITIVE_INFINITY;
      doubleArray9[1] = Double.POSITIVE_INFINITY;
      doubleArray9[2] = Double.POSITIVE_INFINITY;
      doubleArray9[3] = Double.NaN;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("7S8j21>W");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range3, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals((-1447.394), range3.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "r~ HW@IMH";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("r~ HW@IMH", "r~ HW@IMH", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "r~ HW@IMH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 587, (-1495));
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC((-32), 587, (-1), (-229), 587, (-229));
      assertEquals((-1676171809000L), long0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 587, 587, 587, (-1495), 23.0);
      assertEquals("Sun Oct 27 00:00:00 GMT 1912", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Sun Oct 27 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, list0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.isEmpty());
      assertEquals("[null]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add((DefaultHighLowDataset) null);
      assertTrue(boolean1);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.isEmpty());
      assertEquals(2, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals("[null, null]", stack1.toString());
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries1 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries1.getColumnsCount());
      assertEquals(24, matrixSeries1.getRowCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(576, matrixSeries1.getItemCount());
      assertNull(matrixSeries1.getDescription());
      assertNotNull(matrixSeries1);
      assertTrue(matrixSeries1.equals((Object)matrixSeries0));
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, false);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = defaultWindDataset0.hasListener((EventListener) null);
      assertFalse(boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultWindDataset0.getDomainOrder();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-32), 587, (-1526));
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC((-32), 587, (-1), (-229), 587, (-229));
      assertEquals((-1676171809000L), long0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-569.1609176245), 587, 587, (-1526), 23.0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      boolean boolean0 = defaultOHLCDataset0.hasListener(jTable0);
      assertFalse(boolean0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.8071424E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.8071424E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.8071424E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertEquals("Thu Sep 26 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(587.0, range1.getLowerBound(), 0.01);
      assertEquals(587.0, range1.getUpperBound(), 0.01);
      assertEquals(587.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      jDBCXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-743.789556084);
      doubleArray1[1] = 63.357384921;
      doubleArray1[2] = 571.0438241465554;
      jDBCXYDataset0.setTimeSeries(false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8?Fq", "Exception.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      jDBCXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-743.789556084);
      doubleArray1[1] = 63.357384921;
      doubleArray1[2] = 571.0438241465554;
      jDBCXYDataset0.setTimeSeries(false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8?Fq", "Exception.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-743.789556084));
      assertNotSame(range2, range0);
      assertEquals((-743.789556084), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-743.789556084), range2.getUpperBound(), 0.01);
      assertEquals((-743.789556084), range2.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Double double0 = new Double(4322.135098928);
      assertEquals(4322.135098928, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4322.135098928;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-5.26362624E13);
      doubleArray1[6] = 4322.135098928;
      doubleArray2[2] = 4322.135098928;
      doubleArray2[3] = 4322.135098928;
      doubleArray2[4] = 4322.135098928;
      doubleArray2[5] = 4322.135098928;
      doubleArray0[0] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2523.0);
      doubleArray1[1] = 212.5284;
      doubleArray1[2] = 0.8;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-319.168913547748);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 212.5284;
      doubleArray2[1] = (-319.168913547748);
      doubleArray2[2] = 212.5284;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-319.168913547748);
      doubleArray3[1] = 212.5284;
      doubleArray3[2] = (-319.168913547748);
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = 0.8;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = Double.NaN;
      doubleArray3[7] = (-2523.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 5196.63198834;
      doubleArray4[1] = 916.59931237;
      doubleArray4[2] = 0.8;
      doubleArray4[3] = 0.8;
      doubleArray4[4] = 0.8;
      doubleArray4[5] = 0.8;
      doubleArray4[6] = 212.5284;
      doubleArray4[7] = (-319.168913547748);
      doubleArray4[8] = 212.5284;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-319.168913547748);
      doubleArray5[1] = (-319.168913547748);
      doubleArray5[2] = 5196.63198834;
      doubleArray5[3] = 5196.63198834;
      doubleArray5[4] = Double.NaN;
      doubleArray5[5] = (-2523.0);
      doubleArray5[6] = 212.5284;
      doubleArray5[7] = 5196.63198834;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 916.59931237;
      doubleArray6[1] = 916.59931237;
      doubleArray6[2] = 0.8;
      doubleArray6[3] = (-2523.0);
      doubleArray6[4] = 0.8;
      doubleArray6[5] = 0.8;
      doubleArray6[6] = (-319.168913547748);
      doubleArray6[7] = 0.8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 212.5284;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 212.5284;
      doubleArray8[1] = (-2523.0);
      doubleArray8[2] = (-2523.0);
      doubleArray8[3] = 0.8;
      doubleArray8[4] = 212.5284;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = 0.8;
      doubleArray9[1] = 212.5284;
      doubleArray9[2] = 212.5284;
      doubleArray9[3] = 212.5284;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("?-'csvbG:?kZ");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-3887.988);
      doubleArray1[3] = (-1271.8089256953608);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-210.473492);
      doubleArray1[8] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 6.283185307179586);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.5;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-896.3661700403168);
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1.5;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-896.3661700403168), number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      boolean boolean0 = true;
      TimeSeries timeSeries0 = new TimeSeries(1.5);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "Duplicate items in 'rowKeys'.", 2, (-2249), 2, 0, 2, (-2249), 0, 1506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week in month -2249
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      jDBCXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-743.789556084);
      doubleArray1[1] = 63.357384921;
      doubleArray1[2] = 571.0438241465554;
      jDBCXYDataset0.setTimeSeries(false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      doubleArray1[3] = (-178.69);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+O!A! 8?Fq", "+O!A! 8?Fq", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-743.789556084), number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-178.69));
      assertNotSame(range2, range0);
      assertEquals(392.3538241465554, range2.getUpperBound(), 0.01);
      assertEquals((-922.479556084), range2.getLowerBound(), 0.01);
      assertEquals(1314.8333802305553, range2.getLength(), 0.01);
      assertEquals((-265.06286596872235), range2.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(571.0438241465554, range3.getUpperBound(), 0.01);
      assertEquals((-86.3728659687223), range3.getCentralValue(), 0.01);
      assertEquals((-743.789556084), range3.getLowerBound(), 0.01);
      assertEquals(1314.8333802305553, range3.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      Integer integer0 = new Integer(553);
      assertEquals(553, (int)integer0);
      assertNotNull(integer0);
      
      Comparable<Dialog.ModalityType>[] comparableArray0 = (Comparable<Dialog.ModalityType>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[1] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[2] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[3] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[4] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[5] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[6] = (Comparable<Dialog.ModalityType>) hour0;
      comparableArray0[7] = (Comparable<Dialog.ModalityType>) hour0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week0.getYearValue());
      assertEquals(80878L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week0.getYearValue());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1526, week1.getYearValue());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week0.getYearValue());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2403.0));
      assertEquals((-2403.0), range0.getCentralValue(), 0.01);
      assertEquals((-2403.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2403.0), range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      ArrayList<DynamicTimeSeriesCollection> arrayList0 = new ArrayList<DynamicTimeSeriesCollection>();
      assertFalse(arrayList0.contains(dynamicTimeSeriesCollection0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.contains(dynamicTimeSeriesCollection0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotSame(range2, range0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Week week0 = new Week(2415, 2415);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(111, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(128106L, week0.getSerialIndex());
      assertEquals(2415, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((XYBarDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 53;
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2415;
      doubleArray2[1] = (double) 2415;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 53;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 1;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      int int0 = 535;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 535, 535);
      assertEquals(535, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(535, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      taskSeriesCollection0.removeAll();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities");
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number2);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("The number of column keys does not match the number of columns in the data array.", (-1), 24);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-435.40729988), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertEquals((-435.40729988), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-435.40729988), 2, 2, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertEquals((-435.40729988), powerFunction2D0.getA(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals((-435.40729988), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      String string0 = null;
      Number[][] numberArray0 = new Number[7][7];
      Number[] numberArray1 = new Number[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      numberArray1[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[1] = (Number) integer1;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      int int1 = 10;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 2, 10);
      assertEquals(10, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        slidingCategoryDataset0.getValue(1128, 1128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1128, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1, week1.getWeek());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, week0.getWeek());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DatasetGroup datasetGroup0 = new DatasetGroup("org.jfree.data.general.DefaultKeyedValuesDataset");
      assertEquals("org.jfree.data.general.DefaultKeyedValuesDataset", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultPieDataset1.setGroup(datasetGroup0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals("org.jfree.data.general.DefaultKeyedValuesDataset", datasetGroup0.getID());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(".", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 991.09718062);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(991.09718062, range0.getLowerBound(), 0.01);
      assertEquals(991.09718062, range0.getUpperBound(), 0.01);
      assertEquals(991.09718062, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1443.7796850406469), (-1443.7796850406469));
      assertEquals((-1443.7796850406469), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1443.7796850406469), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-4760.99672994993), (-435.40729988), 2, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals((-1443.7796850406469), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1443.7796850406469), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(6872386.579561619, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-435.4072998800002), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(627188.4346001045, xYSeries0.getMinY(), 0.01);
      assertEquals((-4760.99672994993), xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)mockSimpleDateFormat0.getCalendar();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      week1.peg(mockGregorianCalendar0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) week1, (KeyedValues) defaultPieDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      long long0 = hour0.getSerialIndex();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1000436L, long0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][9];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((short)10, short0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2681, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2681,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(2681, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2681,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(2681, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2681,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(2681, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(80879L, week1.getSerialIndex());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2403.0));
      assertEquals((-2403.0), range0.getLowerBound(), 0.01);
      assertEquals((-2403.0), range0.getUpperBound(), 0.01);
      assertEquals((-2403.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(week0, week1);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1526, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      assertFalse(week0.equals((Object)week1));
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 722);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(722, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = null;
      try {
        defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 722, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate((-1338), (-3138), 558);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 552, 1.0, 552, 541.76421, (-1.0));
      assertEquals("Fri Jan 09 00:00:00 GMT 302", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Jan 09 00:00:00 GMT 302", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Fri Jan 09 00:00:00 GMT 302", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-5.26362624E13), range1.getLowerBound(), 0.01);
      assertEquals((-5.26362624E13), range1.getUpperBound(), 0.01);
      assertEquals((-5.26362624E13), range1.getCentralValue(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-1194L));
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertEquals((-1194L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1194L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1194L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1194L), fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) fixedMillisecond0, (double) (-1194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1509);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertNotNull(week0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("[");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, long0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1509, 1);
      assertEquals(1509, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1509, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1509, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1509, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1509, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1509, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1508.0, range0.getLength(), 0.01);
      assertEquals(1508.0, range0.getUpperBound(), 0.01);
      assertEquals(754.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 366, 1955);
      assertEquals(1955, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(366, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1955, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(366, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[", "[", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-3054));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3054), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "[", Double.POSITIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<DefaultHighLowDataset> stream0 = stack0.stream();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      boolean boolean1 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of column keys does not match the number of columns in the data array.");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("The number of column keys does not match the number of columns in the data array.");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 564, 5);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=8,MONTH=564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("xXK29Nk'@7vjT]BK");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Month month0 = new Month(date0, timeZone0, locale0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=8,MONTH=564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(10, month0.getMonth());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(1582, month0.getYearValue());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=8,MONTH=564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(10, month0.getMonth());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(1582, month0.getYearValue());
      assertEquals(11, month1.getMonth());
      assertEquals(18995L, month1.getSerialIndex());
      assertEquals(1582, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertNotNull(month1);
      assertFalse(month1.equals((Object)month0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 8, month1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=8,MONTH=564,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(10, month0.getMonth());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(1582, month0.getYearValue());
      assertEquals(11, month1.getMonth());
      assertEquals(18995L, month1.getSerialIndex());
      assertEquals(1582, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, (double)double1, 0.01);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(24, (-1552.09919));
      assertEquals(24.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1552.09919), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4006.3270631855, (-1552.09919), (-1383), double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (-1351));
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeZone timeZone0 = null;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<XYIntervalSeriesCollection>) day0;
      comparableArray0[1] = (Comparable<XYIntervalSeriesCollection>) day0;
      Class<YIntervalSeriesCollection> class0 = YIntervalSeriesCollection.class;
      Date[] dateArray0 = new Date[2];
      Instant instant0 = MockInstant.ofEpochMilli(999L);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusNanos(instant0, 999L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      dateArray0[0] = date0;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 646.96829099, (-1068.608786544612), Double.POSITIVE_INFINITY, 999L, (-191.5610388));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(oHLCDataItem0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      double double0 = 1.0;
      double double1 = (-636.0);
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, (-191.5610388), 1.0, (-636.0), (-191.5610388));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      int int0 = 0;
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate(0, 23, (-4458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      int int0 = 36;
      Week week0 = new Week(36, (-4067));
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(36, week0.getWeek());
      assertEquals((-4067), week0.getYearValue());
      assertEquals((-215515L), week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(36, week0.getWeek());
      assertEquals((-4067), week0.getYearValue());
      assertEquals((-215515L), week0.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(37, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-4067), week1.getYearValue());
      assertEquals((-215514L), week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-4007.96281660249), 739.0);
      assertEquals(739.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-4007.96281660249), normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Second second0 = Second.parseSecond("2ju;ebb'N");
      assertNull(second0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-4007.96281660249), (-1945.1245), (-1385), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(109, "");
      assertEquals(109, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      String string0 = simpleTimeZone0.getDisplayName();
      assertEquals("GMT+00:00", string0);
      assertEquals(109, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(string0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(109, 499, simpleTimeZone0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(109, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(498, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(Double.NaN, number0);
      assertEquals(109, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(498, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(number0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 109;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      MockDate mockDate0 = new MockDate(558, (-795), 6);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 6, 896.87029038, 896.87029038, 558, 6);
      assertEquals("Sun Oct 06 00:00:00 GMT 2391", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 558, 896.87029038, (-795), 896.87029038, (-795));
      assertEquals("Sun Oct 06 00:00:00 GMT 2391", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 558, 0.0, 0.0, (-96.7459352778), 552);
      assertEquals("Sun Oct 06 00:00:00 GMT 2391", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sun Oct 06 00:00:00 GMT 2391", mockDate0.toString());
      assertEquals(6, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range1 = Range.expandToInclude((Range) null, 558);
      assertEquals(558.0, range1.getUpperBound(), 0.01);
      assertEquals(558.0, range1.getCentralValue(), 0.01);
      assertEquals(558.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Duplicate items in 'rowKeys'.", 1780.4, 24);
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = null;
      Vector<TimeTableXYDataset> vector0 = new Vector<TimeTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      long long0 = hour0.getSerialIndex();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1000436L, long0);
      assertNotSame(hour0, hour1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertFalse(hour0.equals((Object)hour1));
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 23;
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) 0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray1[7] = (Number) 23;
      numberArray1[8] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) float0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-922.534351876203), 23, 152, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-922.534351876203), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(152, xYSeries0.getItemCount());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0, second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      int int0 = timeSeriesCollection0.indexOf(regularTimePeriod0);
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertFalse(vector0.contains(xYSeriesCollection0));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 243);
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-1652), 572);
      assertEquals(572, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1652), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertEquals(572, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1652), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.removeAllElements();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate(549, 549, 549);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotNull(second0);
      
      Second second1 = (Second)second0.previous();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(59, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotNull(second1);
      assertFalse(second1.equals((Object)second0));
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertFalse(arrayList1.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = arrayList1.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(arrayList1.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(arrayList0, arrayList1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) defaultPieDataset0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotNull(defaultCategoryDataset0);
      assertFalse(second0.equals((Object)second1));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 952);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotNull(defaultPieDataset1);
      assertFalse(second0.equals((Object)second1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(59, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotNull(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(second0, second1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(second0.equals((Object)second1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1630));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1426.6997435770186), Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1426.6997435770186), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-4760.99672994993), (-37.13612279671883), 5638, second0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      int int0 = timeSeriesCollection0.indexOf(regularTimePeriod0);
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 665);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.removeAllElements();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate(549, 549, 549);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotNull(second0);
      
      Second second1 = (Second)second0.previous();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(59, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotNull(second1);
      assertFalse(second1.equals((Object)second0));
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      assertNotNull(metalRootPaneUI0);
      
      taskSeriesCollection0.removeAll();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean1 = taskSeriesCollection0.hasListener(metalRootPaneUI0);
      assertFalse(boolean1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-1769.5963597184916));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      System.setCurrentTimeMillis(0L);
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number2);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) integer1;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'xRange' argument", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      MockDate mockDate0 = new MockDate(552, 558, 558);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 552, 552, 558, 552, (-1.0));
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItemArray0[2];
      oHLCDataItemArray0[4] = oHLCDataItemArray0[3];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 30, 24);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(720, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(720, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(720, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 24;
      doubleArray2[1] = (double) 24;
      doubleArray2[2] = (double) 24;
      doubleArray2[3] = (double) 24;
      doubleArray2[4] = (double) 24;
      doubleArray2[5] = (double) 24;
      doubleArray2[6] = (double) 24;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 24;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 24;
      doubleArray4[1] = (double) 24;
      doubleArray4[2] = (double) 24;
      doubleArray4[3] = (double) 24;
      doubleArray4[4] = (-1182.2);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) 24;
      doubleArray5[1] = (double) 24;
      doubleArray5[2] = (double) 24;
      doubleArray5[3] = (-1182.2);
      doubleArray5[4] = (-1182.2);
      doubleArray5[5] = (-1182.2);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 24;
      doubleArray6[1] = (-1182.2);
      doubleArray6[2] = (-1182.2);
      doubleArray6[3] = (-1182.2);
      doubleArray6[4] = (-1182.2);
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("iBvnaY&aG#^ykaf|)Tw", "jNGSA+JUs$$l", doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(552, 558, 558);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 552, 552, 558, 552, (-1.0));
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      boolean boolean1 = arrayList0.add(defaultMultiValueCategoryDataset1);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[1] = (Number) integer1;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'xRange' argument", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      long long0 = new Integer(23);
      assertEquals(23, long0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 937.22190374;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 23.0;
      doubleArray0[7] = 23.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(8, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 23.0, 2.0, 937.22190374, 23.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 23.0, 665.0, 2, comparableArray0[0]);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(665.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(8.17336518369028E10, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.3247439309928407E21, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, comparableArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {0.0, 23.0, 2.0, 937.22190374, 23.0, 0.0, 23.0, 23.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(552, 558, 558);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 552, 552, 558, 552, (-1.0));
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.67259168E13, range1.getLowerBound(), 0.01);
      assertEquals(1.67259168E13, range1.getUpperBound(), 0.01);
      assertEquals(1.67259168E13, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int0 = defaultKeyedValues2DDataset0.getColumnCount();
      assertEquals(0, int0);
      
      stack0.removeAllElements();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Stack<Long> stack1 = new Stack<Long>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      Month month0 = new Month();
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Null 'visibleSeriesKeys' argument.";
      stringArray0[1] = "\"-7Eg}5Nyc@C";
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean1);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1400.2);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1230.6222);
      doubleArray1[3] = 4367.0;
      doubleArray1[4] = (-1744.8294401854478);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 973.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1230.6222);
      doubleArray2[1] = (-1744.8294401854478);
      doubleArray2[2] = (-1744.8294401854478);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1744.8294401854478);
      doubleArray2[5] = (-1230.6222);
      doubleArray2[6] = 4367.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&F(U@%=16g", "&F(U@%=16g", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = new Range((-1744.8294401854478), 4367.0);
      assertEquals(6111.829440185447, range0.getLength(), 0.01);
      assertEquals((-1744.8294401854478), range0.getLowerBound(), 0.01);
      assertEquals(4367.0, range0.getUpperBound(), 0.01);
      assertEquals(1311.0852799072761, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(4367.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(4367.0, number1);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.removeAllElements();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MockDate mockDate0 = new MockDate(549, 549, 549);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotNull(second0);
      
      Second second1 = (Second)second0.previous();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(59, second1.getSecond());
      assertNotNull(second1);
      assertFalse(second1.equals((Object)second0));
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 549;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 549;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(second1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(59, second1.getSecond());
      assertEquals(5, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {549.0, 59.0, 59.0, 0.0}, doubleArray1, 0.01);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = stack0.add(defaultHighLowDataset0);
      assertTrue(stack0.contains(defaultHighLowDataset0));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertTrue(boolean0);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Apr 01 00:00:00 GMT 2496", mockDate0.toString());
      assertEquals(16606857600000L, second0.getFirstMillisecond());
      assertEquals(16606857600999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(59, second1.getSecond());
      assertEquals(5, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {549.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {549.0, 59.0, 59.0, 0.0}, doubleArray1, 0.01);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Stack<Long> stack1 = new Stack<Long>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Month month0 = new Month();
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      vector0.insertElementAt(xYSeriesCollection0, 0);
      assertTrue(vector0.contains(xYSeriesCollection0));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-404.2798450149068));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals((-404.2798450149068), range0.getUpperBound(), 0.01);
      assertEquals((-404.2798450149068), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-404.2798450149068), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("t", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      int int0 = 2015;
      MockDate mockDate0 = new MockDate(2015);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals(2015L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(2014L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals(2015L, week0.getFirstMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(2014L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(104412L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(2, week1.getWeek());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2115.20309567578, 53);
      assertEquals(53.0, powerFunction2D0.getB(), 0.01);
      assertEquals(2115.20309567578, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1022.0, Double.NEGATIVE_INFINITY, 53, week1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1472.833747074), (-1472.833747074));
      assertEquals((-1472.833747074), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1472.833747074), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-4760.99672994993), 23.0, 2, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals((-1472.833747074), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1472.833747074), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals((-35348.009929776), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-4760.99672994993), xYSeries0.getMinX(), 0.01);
      assertEquals(7010683.819832143, xYSeries0.getMaxY(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = null;
      int int0 = 82;
      int int1 = (-1669);
      int int2 = 2;
      int int3 = 1;
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(3170, 82, 3170, (-1669), 2, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("?-'csvbG:?kZ");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf("?-'csvbG:?kZ");
      assertEquals(0, int0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, list0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray0 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.7976931348623157E308;
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 567.232455062898;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray8[3] = 1.7976931348623157E308;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 1.7976931348623157E308;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 0.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      int int0 = timeSeriesCollection0.indexOf(regularTimePeriod0);
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1509);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1509, week1.getYearValue());
      assertEquals(79978L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      Year year0 = new Year(14);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(14, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("org.jfree.data.general.DefaultKeyedValuesDataset"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) year0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DomainOrder domainOrder0 = defaultTableXYDataset0.getDomainOrder();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "<?'wOQ>K@s.VUUpv-", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0, numberArray0.length);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2472));
      assertEquals(0, numberArray0.length);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(7, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(7, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-329));
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, doubleArray0.length);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-447.5926691);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-447.5926691);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Z!", "", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset1, true);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-447.5926691), range0.getUpperBound(), 0.01);
      assertEquals((-447.5926691), range0.getCentralValue(), 0.01);
      assertEquals((-447.5926691), range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-447.5926691), (-447.5926691));
      assertEquals((-447.5926691), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-447.5926691), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double double0 = 1707.0191;
      int int0 = (-1);
      SpreadsheetDate spreadsheetDate0 = null;
      try {
        spreadsheetDate0 = new SpreadsheetDate((-1), 3160, 3160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2, 1399.0);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1399.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Byte byte0 = Byte.valueOf((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) integer1;
      numberArray1[1] = (Number) byte0;
      numberArray0[1] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'xRange' argument", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (int) (byte)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double double0 = (-1469.030131117);
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals((-1L), week0.getLastMillisecond());
      assertEquals(0L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2, week1.getWeek());
      assertEquals(104412L, week1.getSerialIndex());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      double double1 = 1.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0L, 1.0, (-2414), week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-2294));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2294), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2190.71, (-2294));
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      PowerFunction2D powerFunction2D1 = new PowerFunction2D(241.27, (-4760.99672994993));
      assertEquals((-4760.99672994993), powerFunction2D1.getB(), 0.01);
      assertEquals(241.27, powerFunction2D1.getA(), 0.01);
      assertNotNull(powerFunction2D1);
      assertFalse(powerFunction2D1.equals((Object)powerFunction2D0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Qq|t|ZKf!uk$wH!kn", "Null 'hour' argument.", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-957), fixedMillisecond0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-958), dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 665);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(665, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 665);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      vector0.insertElementAt(xYSeriesCollection0, 0);
      assertTrue(vector0.contains(xYSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Week week0 = new Week(8, 3239);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(3239, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(171675L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      long long0 = week0.getFirstMillisecond(calendar0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, long0);
      assertEquals(3239, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(8, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(171675L, week0.getSerialIndex());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 13);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(13, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree.data.general.DefaultKeyedValuesDataset", 1.0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(13, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = stack0.retainAll(linkedList0);
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean1);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.removeAllElements();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      Vector<Long> vector0 = new Stack<Long>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertNotNull(month0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1509);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertNotNull(week0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      arrayList0.ensureCapacity(164);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, vector0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 87.17084512;
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (-2477.86181);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = 87.17084512;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = 87.17084512;
      doubleArray2[5] = (-404.38351);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 87.17084512;
      doubleArray3[1] = (-404.38351);
      doubleArray3[2] = 87.17084512;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2477.86181);
      doubleArray4[1] = (-404.38351);
      doubleArray4[2] = (-404.38351);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 87.17084512;
      doubleArray5[1] = 0.5;
      doubleArray5[2] = (-404.38351);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-404.38351);
      doubleArray6[1] = (-2477.86181);
      doubleArray6[2] = 0.5;
      doubleArray6[3] = (-2477.86181);
      doubleArray6[4] = (-404.38351);
      doubleArray6[5] = 87.17084512;
      doubleArray6[6] = 87.17084512;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (-404.38351);
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = (-2477.86181);
      doubleArray7[3] = 87.17084512;
      doubleArray7[4] = 87.17084512;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 87.17084512;
      doubleArray8[1] = 0.5;
      doubleArray8[2] = 87.17084512;
      doubleArray8[3] = Double.POSITIVE_INFINITY;
      doubleArray8[4] = (-2477.86181);
      doubleArray8[5] = 87.17084512;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 87.17084512;
      doubleArray9[2] = Double.POSITIVE_INFINITY;
      doubleArray9[3] = 87.17084512;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">>ZAzs", "@yYVHy6Te>Q|[:", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 0.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Byte byte0 = Byte.valueOf((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertFalse(vector0.contains(xYSeriesCollection0));
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Stack<Double> stack1 = new Stack<Double>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack1, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean0 = false;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      String string0 = "";
      String string1 = "Duplicate items in 'rowKeys'.";
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) bigInteger0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getX(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate(2015);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(2014L, week0.getLastMillisecond());
      assertEquals(2015L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(2014L, week0.getLastMillisecond());
      assertEquals(2015L, week0.getFirstMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(1970, week1.getYearValue());
      assertEquals(2, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(104412L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, (-1469.030131117), 2015, week1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-680.38300927);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 584.923108467;
      doubleArray1[4] = 1240.364237484911;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (-144.61050659);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z", "aOn/V7SGjcK;Kp", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      XYSeries xYSeries0 = new XYSeries(1240.364237484911);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-2294));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2294), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2190.71, (-2294));
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      PowerFunction2D powerFunction2D1 = new PowerFunction2D(241.27, (-4760.99672994993));
      assertEquals(241.27, powerFunction2D1.getA(), 0.01);
      assertEquals((-4760.99672994993), powerFunction2D1.getB(), 0.01);
      assertNotNull(powerFunction2D1);
      assertFalse(powerFunction2D1.equals((Object)powerFunction2D0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1399.0, Double.POSITIVE_INFINITY, 2, bigInteger0);
      assertNotSame(powerFunction2D0, powerFunction2D1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(powerFunction2D0.equals((Object)powerFunction2D1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, Double.POSITIVE_INFINITY);
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(powerFunction2D0, powerFunction2D1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-2294.0), powerFunction2D0.getB(), 0.01);
      assertEquals(2190.71, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(double0);
      assertFalse(powerFunction2D0.equals((Object)powerFunction2D1));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Duplicate items in 'rowKeys'.", 1780.4, 24);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Minute minute0 = Minute.parseMinute("S,`?e0dN#}");
      assertNull(minute0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0, 1293.3, 6.283185307179586, 0, 59);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      int int0 = timeSeriesCollection0.indexOf(regularTimePeriod0);
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      categoryTableXYDataset0.add((Number) bigInteger0, (Number) bigInteger0, "org.jfree.data.gantt.TaskSeries", true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1723.0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1723.0), range0.getUpperBound(), 0.01);
      assertEquals((-1723.0), range0.getCentralValue(), 0.01);
      assertEquals((-1723.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 14);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(552, 558, 558);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 552, 552, 558, 552, (-1.0));
      assertEquals("Sat Jan 09 00:00:00 GMT 2500", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 558);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack1.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertEquals("[null]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.equals((Object)stack0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertNotSame(stack0, stack1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      assertFalse(stack0.equals((Object)stack1));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNotSame(stack0, stack1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      assertFalse(stack0.equals((Object)stack1));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      vector0.insertElementAt(xYSeriesCollection0, 0);
      assertTrue(vector0.contains(xYSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Stack<TimeTableXYDataset> stack0 = new Stack<TimeTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNull(range0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        Year.parseYear("Null 'dataset' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1526, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(80879L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.xy.DefaultHighLowDataset");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.addAll((Collection<? extends XYSeriesCollection>) arrayList0);
      assertFalse(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      int int0 = (-294);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "Duplicate items in 'rowKeys'.", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertNull(number0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      boolean boolean0 = defaultCategoryDataset0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, numberArray0.length);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.xy.DefaultHighLowDataset");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 18);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(18, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      double double0 = 665.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-4760.99672994993), Double.POSITIVE_INFINITY);
      assertEquals((-4760.99672994993), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      PowerFunction2D powerFunction2D1 = new PowerFunction2D((-680.38300927), (-680.38300927));
      assertEquals((-680.38300927), powerFunction2D1.getA(), 0.01);
      assertEquals((-680.38300927), powerFunction2D1.getB(), 0.01);
      assertNotNull(powerFunction2D1);
      assertFalse(powerFunction2D1.equals((Object)powerFunction2D0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D1, 458.556030011, Double.POSITIVE_INFINITY, (-1183), mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.xy.DefaultHighLowDataset");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Month month0 = new Month(mockDate0, timeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertNotNull(month1);
      assertFalse(month1.equals((Object)month0));
      
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) arrayList0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      assertFalse(month0.equals((Object)month1));
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) month0;
      comparableArray0[1] = (Comparable<TimeSeriesCollection>) month1;
      comparableArray0[2] = (Comparable<TimeSeriesCollection>) month1;
      comparableArray0[3] = (Comparable<TimeSeriesCollection>) month1;
      comparableArray0[4] = (Comparable<TimeSeriesCollection>) month0;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (double) (-237);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue((-1733.28), (Comparable) "org.jfree.data.general.DefaultKeyedValuesDataset", (Comparable) "org.jfree.data.general.DefaultKeyedValuesDataset");
      assertEquals(2, doubleArray0.length);
      
      Week week0 = new Week(0, 1526);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(80878L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1526, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, week1.getWeek());
      assertEquals(1526, week1.getYearValue());
      assertEquals(80879L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 2);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1509);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1509, week1.getYearValue());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(79978L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      Year year0 = new Year(14);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("The number of column keys does not match the number of columns in the data array."));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains("The number of column keys does not match the number of columns in the data array."));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range0);
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<Long>) week0;
      comparableArray0[1] = (Comparable<Long>) year0;
      comparableArray0[2] = (Comparable<Long>) year0;
      comparableArray0[3] = (Comparable<Long>) week0;
      Year year1 = (Year)year0.next();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(15, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("15", year1.toString());
      assertEquals(15L, year1.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(14, year0.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      
      comparableArray0[4] = (Comparable<Long>) year1;
      comparableArray0[5] = (Comparable<Long>) week1;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1, "", 2337, 0, 8, 1509, 4, 4, 23, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end day of week 23
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(0, 1509);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1509, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(79978L, week1.getSerialIndex());
      assertEquals(1, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      Year year0 = new Year(14);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(14, year0.getYear());
      assertNotNull(year0);
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("14", year0.toString());
      assertEquals(14L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(14, year0.getYear());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(14));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(14));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotSame(week0, week1);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(79977L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(7, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNull(range1);
      assertFalse(week0.equals((Object)week1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "The number of column keys does not match the number of columns in the data array.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Byte byte0 = Byte.valueOf((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Number[] numberArray0 = new Number[2];
      numberArray0[0] = (Number) byte0;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-680.38300927);
      doubleArray2[1] = (double) 2122848305;
      doubleArray2[2] = (double) 2122848305;
      doubleArray2[3] = (double) 2122848305;
      doubleArray2[4] = (double) 2122848305;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 2122848305;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValuesDataset", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Week week0 = new Week(2122848305, 1509);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(80026L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(49, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(80026L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(49, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1509, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(50, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(80027L, week1.getSerialIndex());
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(5, 53, week0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(52, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(80026L, week0.getSerialIndex());
      assertEquals(1509, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(49, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(week0.equals((Object)week1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(2.122848305E9, range0.getUpperBound(), 0.01);
      assertEquals(1.0614238123084954E9, range0.getCentralValue(), 0.01);
      assertEquals(2.1228489853830092E9, range0.getLength(), 0.01);
      assertEquals((-680.38300927), range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      int int0 = 0;
      Week week0 = new Week(0, 1509);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1509, week0.getYearValue());
      assertEquals(79977L, week0.getSerialIndex());
      assertNotNull(week0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      int int0 = hour0.getMonth();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, int0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(93, 30.83749100036455);
      assertEquals(30.83749100036455, lineFunction2D0.getSlope(), 0.01);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 30.83749100036455, 93, 93, "");
      assertEquals(30.83749100036455, lineFunction2D0.getSlope(), 0.01);
      assertEquals(93.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 30.83749100036455;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 93;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 93;
      doubleArray3[1] = 30.83749100036455;
      doubleArray3[2] = (double) 93;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 108.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 93;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = (double) 93;
      doubleArray4[5] = 30.83749100036455;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 93;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 2928.68717041973;
      doubleArray6[1] = 30.83749100036455;
      doubleArray6[2] = 30.83749100036455;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 1.0;
      doubleArray0[7] = doubleArray8;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("O.=wdB|R%AK ", "The 'data' array must contain three arrays all having the same length.7", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 966);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(966, categoryToPieDataset0.getExtractIndex());
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) Double.NEGATIVE_INFINITY, 4560.18748584);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 966, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      defaultMultiValueCategoryDataset0.add(arrayList0, bigInteger0, bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryDataset categoryDataset0 = null;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 665);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(665, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(665.0, 0.0);
      assertEquals(665.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-680.38300927), (-680.38300927), 665, zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      stack0.removeAllElements();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 665);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(665, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 665);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(665.0, range0.getUpperBound(), 0.01);
      assertEquals(665.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(665.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 9);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 1.0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9);
      assertEquals(9L, fixedMillisecond0.getSerialIndex());
      assertEquals(9L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), 9, 2, (-1));
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(mockDate0);
      assertEquals("Fri Dec 09 01:59:00 GMT 1898", mockDate0.toString());
      assertEquals((-2242504860000L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-2242504860000L), fixedMillisecond1.getFirstMillisecond());
      assertEquals((-2242504860000L), fixedMillisecond1.getSerialIndex());
      assertEquals((-2242504860000L), fixedMillisecond1.getMiddleMillisecond());
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond1.previous();
      assertNotSame(fixedMillisecond1, regularTimePeriod0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod0, fixedMillisecond1);
      assertEquals("Fri Dec 09 01:59:00 GMT 1898", mockDate0.toString());
      assertEquals((-2242504860000L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-2242504860000L), fixedMillisecond1.getFirstMillisecond());
      assertEquals((-2242504860000L), fixedMillisecond1.getSerialIndex());
      assertEquals((-2242504860000L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-2242504860001L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2242504860001L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2242504860001L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2242504860001L), regularTimePeriod0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond1));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(304, 2, fixedMillisecond0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(9L, fixedMillisecond0.getSerialIndex());
      assertEquals(9L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(9L, fixedMillisecond0.getSerialIndex());
      assertEquals(9L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNull(range1);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      
      Number[][] numberArray0 = new Number[8][1];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = null;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = (Number) 2;
      numberArray2[4] = (Number) 2;
      numberArray2[5] = (Number) 1;
      numberArray2[6] = (Number) 0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray2[7] = (Number) integer0;
      numberArray2[8] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = null;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) 0;
      numberArray3[4] = (Number) 1;
      numberArray3[5] = (Number) 2;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) 1;
      numberArray4[1] = (Number) 2;
      numberArray4[2] = (Number) 1;
      numberArray4[3] = (Number) 2;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) 1;
      numberArray5[1] = (Number) 2;
      numberArray5[2] = (Number) 0;
      numberArray5[3] = (Number) 1;
      numberArray5[4] = (Number) 0;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) 0;
      numberArray5[7] = null;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray3));
      
      numberArray6[0] = (Number) 0;
      numberArray6[1] = (Number) 2;
      numberArray6[2] = (Number) 1;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray6[3] = (Number) bigInteger0;
      numberArray6[4] = (Number) 1;
      numberArray6[5] = (Number) 1;
      numberArray6[6] = null;
      numberArray6[7] = (Number) 1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[3];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray4));
      
      numberArray7[0] = null;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray7[1] = (Number) integer1;
      numberArray7[2] = (Number) 2;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[7];
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray5));
      
      Byte byte0 = Byte.valueOf((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      numberArray8[0] = (Number) byte0;
      numberArray8[1] = (Number) 0;
      numberArray8[2] = (Number) 1;
      numberArray8[3] = (Number) integer0;
      numberArray8[4] = (Number) bigInteger0;
      numberArray8[5] = (Number) 0;
      numberArray8[6] = (Number) bigInteger0;
      numberArray0[7] = numberArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "Null 'rowKey' argument.", numberArray0);
      assertEquals(8, numberArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<XYIntervalSeriesCollection>) day0;
      comparableArray0[1] = (Comparable<XYIntervalSeriesCollection>) day0;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 664.0;
      doubleArray1[1] = 1434.629308719;
      doubleArray1[2] = 2809.6667714;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2809.6667714;
      doubleArray2[1] = 664.0;
      doubleArray2[2] = 2809.6667714;
      doubleArray2[3] = 1434.629308719;
      doubleArray2[4] = 664.0;
      doubleArray2[5] = 664.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 664.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 63.357384921;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-922.534351876203);
      doubleArray4[1] = 664.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 63.357384921;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-922.534351876203);
      doubleArray5[3] = 548.06166461;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 1434.629308719;
      doubleArray6[1] = 548.06166461;
      doubleArray6[2] = 1434.629308719;
      doubleArray6[3] = 548.06166461;
      doubleArray6[4] = (-2493.3916);
      doubleArray6[5] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 63.357384921;
      doubleArray7[1] = (-2493.3916);
      doubleArray7[2] = (-2493.3916);
      doubleArray7[3] = (-922.534351876203);
      doubleArray7[4] = 63.357384921;
      doubleArray7[5] = 664.0;
      doubleArray7[6] = 63.357384921;
      doubleArray7[7] = 2809.6667714;
      doubleArray7[8] = 2809.6667714;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = 1434.629308719;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = (-922.534351876203);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = 2809.6667714;
      doubleArray9[1] = 63.357384921;
      doubleArray9[2] = 63.357384921;
      doubleArray9[3] = 2809.6667714;
      doubleArray9[4] = 548.06166461;
      doubleArray9[5] = 63.357384921;
      doubleArray9[6] = (-922.534351876203);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(9943.306930079998, range1.getUpperBound(), 0.01);
      assertEquals(2802.423313163796, range1.getCentralValue(), 0.01);
      assertEquals(14281.767233832405, range1.getLength(), 0.01);
      assertEquals((-4338.460303752406), range1.getLowerBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("7S8j21>W", 24, 24);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(576, matrixSeries0.getItemCount());
      assertEquals(24, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(24, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(11.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) hour0;
      long long0 = hour0.getSerialIndex();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1000436L, long0);
      assertNotSame(hour0, hour1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertFalse(hour0.equals((Object)hour1));
      
      double[][] doubleArray0 = new double[0][9];
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 23;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) 0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray1[7] = (Number) 23;
      numberArray1[8] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) float0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray3[2] = (Number) integer1;
      MockDate mockDate0 = (MockDate)hour0.getEnd();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      assertFalse(hour0.equals((Object)hour1));
      
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2026.7345258937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      String string1 = "org.jfree.data.general.DefaultKeyedValuesDataset";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      Week week0 = new Week(0, 1509);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      Object[][][] objectArray0 = new Object[1][9][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1509, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      String string0 = "The number of column keys does not match the number of columns in the data array.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      int int0 = 0;
      Week week0 = new Week(0, 1509);
      Object[][][] objectArray0 = new Object[1][9][2];
      Object[][] objectArray1 = new Object[0][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1509, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      defaultBoxAndWhiskerCategoryDataset0.getColumnCount();
      int int0 = 0;
      // Undeclared exception!
      try { 
        Year.parseYear((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1400.2);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1230.6222);
      doubleArray1[3] = 4367.0;
      doubleArray1[4] = (-1744.8294401854478);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 973.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1230.6222);
      doubleArray2[1] = (-1744.8294401854478);
      doubleArray2[2] = (-1744.8294401854478);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1744.8294401854478);
      doubleArray2[5] = (-1230.6222);
      doubleArray2[6] = 4367.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("&F(U@%=16g", "&F(U@%=16g", doubleArray0);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6111.829440185447, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      Week week0 = new Week(0, 1526);
      week0.next();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-2294));
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2190.71, (-2294));
      PowerFunction2D powerFunction2D1 = new PowerFunction2D(241.27, (-4760.99672994993));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, 1399.0, Double.POSITIVE_INFINITY, 2, bigInteger0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(xYDataset0);
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      defaultMultiValueCategoryDataset0.add(arrayList0, bigInteger0, bigInteger0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Week week0 = new Week(1691, 1691);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      Calendar calendar0 = MockCalendar.getInstance();
      regularTimePeriod0.getFirstMillisecond(calendar0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) regularTimePeriod0, 0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1691);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      jDBCCategoryDataset0.addValue((double) 1392409281320L, (Comparable) "", (Comparable) calendar0);
      VectorSeries vectorSeries0 = new VectorSeries(calendar0);
      // Undeclared exception!
      try { 
        vectorSeries0.getDataItem(1600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1600, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      stack0.removeAllElements();
      stack0.add((DefaultHighLowDataset) null);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValuesDataset", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      Week week0 = new Week((-254), (-254));
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1645, 0, week0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 0);
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(1971L);
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1855L);
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(zoneOffset0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      stack0.add(defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1610L));
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
      fixedMillisecond1.getTime();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(7, 7, fixedMillisecond1);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) fixedMillisecond0);
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) zoneOffset0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Week week0 = new Week(2122848305, 191);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 2);
      DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) categoryToPieDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(bigInteger0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1610L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(7, 7, regularTimePeriod0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
      
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      fixedMillisecond0.previous();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      timeSeries0.clone();
      fixedMillisecond0.previous();
      timeSeriesCollection0.indexOf(fixedMillisecond0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      int int0 = 2122848305;
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 2);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0);
      intervalXYDelegate0.getDomainBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      String string0 = "";
      Week week0 = new Week(1691, 1691);
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      Calendar calendar0 = MockCalendar.getInstance();
      regularTimePeriod0.getFirstMillisecond(calendar0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) regularTimePeriod0, 0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1691);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = "A8gG";
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("A8gG", "A8gG", numberArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      int int0 = 0;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      int int1 = (-341);
      // Undeclared exception!
      try { 
        DateTimeFormatter.ofPattern("A8gG", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pattern letter: g
         //
         verifyException("java.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      defaultMultiValueCategoryDataset0.add(linkedList0, double0, double0);
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      Double double1 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      MockDate mockDate0 = new MockDate((-3476), (-4347), (-1), 2, (-4347), (-4347));
      Month month0 = new Month(mockDate0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Week week0 = new Week(191, 191);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      BigInteger bigInteger0 = BigInteger.TEN;
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) bigInteger0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 665);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.indexOf((Comparable) null);
      timeTableXYDataset0.validateObject();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      timeTableXYDataset0.validateObject();
      doubleArray1[2] = 2746.32999;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = 2746.32999;
      doubleArray3[3] = 2746.32999;
      doubleArray3[4] = 0.0;
      Stack<Short> stack0 = new Stack<Short>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-309));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 224.1295690380266);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1400.2393060592306);
      doubleArray1[1] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "org.jfree.data.general.DefaultKeyedValuesDataset", doubleArray0);
      Week week0 = new Week(0, 1509);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4, 8, week0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValuesDataset", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Duplicate items in 'rowKeys'.", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      double double0 = 2129.894;
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 2129.894);
      matrixSeriesCollection0.addChangeListener(xYBarDataset0);
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, false);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      vector0.addAll((Collection<? extends XYSeriesCollection>) arrayList0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-275));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Duplicate items in 'rowKeys'.", (double) (-275));
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection1, (List) vector0, true);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeriesKey((-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1567.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      defaultIntervalXYDataset0.hasListener((EventListener) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        Month.parseMonth("yR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(151, (-925.10568987605));
      MockDate mockDate0 = new MockDate(151, 151, 25, (-2040), (-2040));
      Millisecond millisecond0 = new Millisecond(mockDate0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1039.96557462793), (-1.0), 151, millisecond0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      DatasetUtilities.iterateDomainBounds(xYDataset0, false);
      DatasetUtilities.iterateRangeBounds(xYDataset0, false);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, (-2043.019308262));
      // Undeclared exception!
      try { 
        xYBarDataset0.getXValue((-2630), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1567.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 1.0;
      doubleArray0[4] = doubleArray5;
      DatasetUtilities.createCategoryDataset("o>r3%,2>Wx", "", doubleArray0);
      Week week0 = new Week(480, 0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(480, 480, week0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = 0;
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ENGLISH;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((-123.1F));
      stack0.add(float0);
      timeZone0.setID("0R@ n0F)I:<G+Z6]~l");
      String string0 = "l6.mT$#SP/*PQk";
      String string1 = "gb19ck%z4q={p_Uj";
      Locale locale1 = Locale.GERMANY;
      Locale.setDefault(locale1);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("0R@ n0F)I:<G+Z6]~l", "l6.mT$#SP/*PQk", "gb19ck%z4q={p_Uj", "l6.mT$#SP/*PQk");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("_=bXk(2v2!0v]", "_=bXk(2v2!0v]", "/zZ$u!?D6lH2aG* ", "Xbf<s~Q");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Comparable<String> comparable0 = null;
      timeTableXYDataset0.indexOf((Comparable) null);
      timeTableXYDataset0.validateObject();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 2746.32999;
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = 2746.32999;
      doubleArray3[2] = 2746.32999;
      doubleArray3[3] = 2746.32999;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2746.32999;
      doubleArray3[6] = (double) (-1);
      doubleArray3[7] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Duplicate items in 'rowKeys'.", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      double double0 = 2129.894;
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 2129.894);
      matrixSeriesCollection0.addChangeListener(xYBarDataset0);
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, false);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-275));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Duplicate items in 'rowKeys'.", (double) (-275));
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection1, (List) vector0, true);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        matrixSeriesCollection1.getSeriesKey((-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = 1691;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1691);
      String string0 = "";
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      stack0.removeAllElements();
      stack0.add((DefaultHighLowDataset) null);
      Vector<Long> vector0 = new Vector<Long>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 7, 7);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      arrayList0.add(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      double double0 = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1567.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clearSelection();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-1582));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      linkedList0.add(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      arrayList0.add(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
      try { 
        Month.parseMonth("yR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 87.17084512, 1.0, (-100), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(yIntervalSeriesCollection0, 0.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-309));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Second second0 = null;
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond(167, (Second) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Millisecond", e);
      }
  }
}
