/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 23:25:03 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.WindowStateListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthProgressBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.remove(3366.1805848858, "");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 5017);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-754.89), (-1717.10080981), "NRB0KFI~c%_R");
      int int0 = 2958465;
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2958465);
      Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[19];
      dateArray0[14] = date0;
      dateArray0[1] = date0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 52, (double) 4, "");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2015.8086083085864, 2015.8086083085864);
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 2015.8086083085864, 2015.8086083085864, 400, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 278.034;
      doubleArray0[4] = 0.0;
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      double double1 = (-1001.5165065068);
      doubleArray0[6] = (-1001.5165065068);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 278.034, 0.0, 1, Double.NEGATIVE_INFINITY);
      XYDataset xYDataset1 = null;
      DatasetUtilities.findMinimumRangeValue(xYDataset1);
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      Range range0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(xYDataset0, (List) linkedList0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DatasetUtilities.findRangeBounds((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      double double0 = 1916.3689441894808;
      Range.expand(range0, 1916.3689441894808, 1916.3689441894808);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float0 = new Float(1916.3689441894808);
      arrayList0.add(float0);
      float float1 = (-10.395025F);
      int int0 = (-944);
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getRowKey((-944));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -944
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      DatasetUtilities.createCategoryDataset("\"&'", "\"&'", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset((-1L));
      Locale locale0 = Locale.ROOT;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (double) (-1L);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(")eLEPBDiRp^W=C0H", ")eLEPBDiRp^W=C0H", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      MockDate mockDate0 = new MockDate((-1481), 1684, (-5848));
      MockDate mockDate1 = new MockDate(60L);
      mockDate1.before(mockDate0);
      Minute minute0 = new Minute(mockDate1);
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      defaultMultiValueCategoryDataset0.equals(xYIntervalSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-1));
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) list0, (Range) null, true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("_-D-#X[g&[e", "_-D-#X[g&[e", doubleArray0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      categoryDataset0.setGroup(datasetGroup0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 6.283185307179586);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("_-D-#X[g&[e");
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 1);
      MockDate mockDate1 = new MockDate((-1), 332, 0);
      mockDate0.before(mockDate1);
      MockDate mockDate2 = new MockDate(191, (-2261), 181, (-1630), (-1), 0);
      mockDate2.before(mockDate1);
      Minute minute0 = new Minute(mockDate2);
      XYSeries xYSeries0 = new XYSeries(mockDate2, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumDomainValue(histogramDataset0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      XYSeries xYSeries0 = new XYSeries("", false);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYTaskDataset0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2130.629098302;
      doubleArray0[2] = 278.034;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 278.034;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 278.034;
      doubleArray0[7] = (-3209.03);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 9999;
      numberArray0[1] = (Number) (-9999);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-9999));
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, (Range) null, true);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7, 7);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 53;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("@x&<t|rl");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1102), (-1102));
      Week week0 = new Week(46, 2);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (Number) 1);
      timePeriodValues1.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1782.92159), 1141.0635037010945, false, false);
      defaultIntervalCategoryDataset0.getColumnIndex(simpleHistogramBin0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate((-768L));
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      defaultMultiValueCategoryDataset0.equals(intervalXYDelegate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Number[][] numberArray0 = new Number[1][9];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = number0;
      numberArray1[2] = (Number) 59;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ws7]L%zu", "", numberArray0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2074);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-2.147483648E9);
      doubleArray3[1] = (double) 295;
      doubleArray3[2] = (-2.147483648E9);
      doubleArray3[3] = (double) 295;
      doubleArray3[4] = (double) 295;
      doubleArray3[5] = (double) 295;
      doubleArray3[6] = (-2.147483648E9);
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 295;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      boolean boolean0 = true;
      DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainLowerBound(true);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) null, true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Day.parseDay("");
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 3102.237212736, 4265);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2263.4357188266;
      doubleArray1[1] = (double) 4265;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 4265;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 3102.237212736;
      doubleArray3[1] = 2263.4357188266;
      doubleArray3[2] = (double) 4265;
      doubleArray3[3] = (double) 4265;
      doubleArray3[4] = 3102.237212736;
      doubleArray3[5] = 3102.237212736;
      doubleArray3[6] = 278.034;
      doubleArray3[7] = 3102.237212736;
      doubleArray3[8] = 3102.237212736;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 278.034;
      doubleArray4[1] = 2263.4357188266;
      doubleArray4[2] = 3102.237212736;
      doubleArray4[3] = (double) 4265;
      doubleArray4[4] = 3102.237212736;
      doubleArray4[5] = 2263.4357188266;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 278.034;
      doubleArray5[1] = 278.034;
      doubleArray5[2] = 2263.4357188266;
      doubleArray5[3] = 2263.4357188266;
      doubleArray5[4] = (double) 4265;
      doubleArray5[5] = (double) 4265;
      doubleArray5[6] = (double) 4265;
      doubleArray5[7] = 3102.237212736;
      doubleArray5[8] = 278.034;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds(categoryDataset1, boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) year0, (double) 9999);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Year year0 = new Year();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) year0, (double) 9999, (-9999));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.event.DatasetChangeEvent", (KeyedValues) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 449.040024430991;
      doubleArray1[2] = 963.77779353;
      doubleArray1[3] = 4517.0631;
      doubleArray1[4] = (-131.5068866986);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 4517.0631;
      doubleArray2[2] = 449.040024430991;
      doubleArray2[3] = 4517.0631;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-1517.710666251);
      doubleArray3[2] = 963.77779353;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-131.5068866986);
      doubleArray3[5] = 963.77779353;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 963.77779353;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 4517.0631;
      doubleArray5[1] = (-131.5068866986);
      doubleArray5[2] = 963.77779353;
      doubleArray5[3] = (-131.5068866986);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 4);
      double[][] doubleArray0 = new double[18][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      XYDataset xYDataset0 = null;
      Object object0 = new Object();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 0, 650);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(object0, seriesChangeInfo0);
      taskSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.findDomainBounds((XYDataset) null, false);
      int int0 = 0;
      taskSeriesCollection0.getSubIntervalCount(int0, int0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DatasetUtilities.findDomainBounds((XYDataset) null, false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 8);
      Day day0 = null;
      try {
        day0 = new Day();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("$IU}`#Ja3Q?E%b", "$IU}`#Ja3Q?E%b", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<Long> stack0 = new Stack<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 9999;
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) 9999;
      numberArray1[3] = (Number) (-9999);
      numberArray1[4] = (Number) 9999;
      numberArray1[5] = (Number) (-9999);
      numberArray1[6] = (Number) 9999;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      int int0 = 875;
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("361{\"%|vHb4 A:\"|X");
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2.147483648E9);
      doubleArray0[0] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2.147483648E9), (-2.147483648E9), 0, (-2.147483648E9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((byte) (-3), 295);
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 295, 1268.02490646, (byte) (-3), bigInteger0);
      xYSeries1.getItems();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.5, 0.5);
      Year year0 = new Year(352);
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.5, 0.5, 352, year0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DatasetUtilities.findMaximumDomainValue((XYDataset) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = null;
      try {
        defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "", "");
      Quarter quarter0 = Quarter.parseQuarter("");
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (-1881));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("5}4WEQ*l*", 5, 5);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 29);
      Stack<Byte> stack0 = null;
      try {
        stack0 = new Stack<Byte>();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 274);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DatasetUtilities.iterateDomainBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double double0 = Double.POSITIVE_INFINITY;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = 2255;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("HymE7t1$");
      String string0 = ",6Yz$&Y14NE";
      ParsePosition parsePosition0 = null;
      try {
        parsePosition0 = new ParsePosition(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainLowerBound(true);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2015.8086083085864, 2015.8086083085864);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1861.74), 682.11968661, 400, "");
      DatasetUtilities.isEmptyOrNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      String string0 = "Null 'rowKeys' argument.";
      Number[][] numberArray0 = new Number[7][6];
      Number[] numberArray1 = new Number[9];
      int int0 = (-345);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-345));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      int int1 = 1119;
      Number number0 = timeTableXYDataset0.getX(1119, (-249));
      numberArray1[0] = number0;
      BigInteger bigInteger0 = null;
      try {  
      bigInteger0 = BigInteger.TEN;
      } catch(ArrayIndexOutOfBoundsException e) {}
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      mockDate0.before(mockDate0);
      mockDate0.before(mockDate0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 59, (Number) 0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      minute0.next();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) yIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      MockDate mockDate0 = new MockDate(60L);
      Minute minute0 = new Minute(mockDate0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset1, 30);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) null, true);
      boolean boolean0 = false;
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("@x&<l|rl");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      Vector<Integer> vector0 = new Vector<Integer>();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1513, "H-m21");
      simpleTimeZone0.getOffset(2727L);
      Locale locale0 = Locale.ROOT;
      locale0.getUnicodeLocaleAttributes();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      double[][] doubleArray0 = new double[0][0];
      DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "HLbU&/<Xk{|db+YKA", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 1513, 0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1093);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[11][3];
      DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("The number of row keys does not match the number of rows in the data array.");
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DatasetUtilities.findMaximumRangeValue((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double double0 = Double.POSITIVE_INFINITY;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-3741));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 9999;
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) 9999;
      numberArray1[0] = (Number) (-9999);
      numberArray1[4] = (Number) 9999;
      numberArray1[5] = (Number) (-9999);
      numberArray1[6] = (Number) 9999;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      int int0 = 875;
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate((-768L));
      boolean boolean0 = mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      defaultMultiValueCategoryDataset0.equals(intervalXYDelegate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, (Range) null, false);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Day.parseDay("");
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 3102.237212736, 4265);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GXF+.", "GXF+.", numberArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GXF+.", "GXF+.", numberArray0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1341);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(44, 44);
      DatasetUtilities.findDomainBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Inyex qutsnde ali: range.", 37, 37);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3268.6856469), 356.5937974192, "za*8X:gaCFk");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 181.70002);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NaN, "Y*p#.-033B02");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-3886.494250428));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      boolean boolean0 = true;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 3417.35762);
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) null);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 3417.35762, (-2659));
      DefaultHighLowDataset[] defaultHighLowDatasetArray0 = null;
      linkedList0.toArray(defaultHighLowDatasetArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-200.6864036901), (-200.6864036901), " ");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) arrayList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.5, (-883.543398123), "Null 'f' argument.");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 1020, 9, 9, 1020, 9);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1020;
      doubleArray1[3] = (double) 9;
      doubleArray1[5] = (double) 1020;
      doubleArray1[6] = (-661.29998);
      doubleArray1[7] = (double) 1020;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-661.29998), (double) 1020, 2646);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (double) 9);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) locale_FilteringMode0, 1709.9, 778);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindDomainBounds(xIntervalSeriesCollection0, linkedList0, false);
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2099.818);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2099.818);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2099.818);
      doubleArray3[1] = 3063.08648;
      doubleArray3[2] = (-2099.818);
      doubleArray3[3] = (-2099.818);
      doubleArray3[4] = (-2099.818);
      doubleArray3[5] = (-2099.818);
      doubleArray3[6] = (-2099.818);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 3063.08648;
      doubleArray4[1] = (-2099.818);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 3063.08648;
      doubleArray5[1] = 3063.08648;
      doubleArray5[2] = 3063.08648;
      doubleArray5[3] = 3063.08648;
      doubleArray5[4] = 3063.08648;
      doubleArray5[5] = (-3493.5750456);
      doubleArray5[6] = 3063.08648;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-2099.818);
      doubleArray6[2] = (-3493.5750456);
      doubleArray6[3] = (-3493.5750456);
      doubleArray6[4] = 3063.08648;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("values.length", "values.length", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 9999;
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) 9999;
      numberArray1[0] = (Number) (-9999);
      numberArray1[4] = (Number) 9999;
      numberArray1[5] = (Number) (-9999);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, linkedList0, false);
      numberArray1[6] = (Number) 9999;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      int int0 = 875;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, int0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) year0, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.pollLast();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.add((DefaultOHLCDataset) null);
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, false);
      DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1194.060158139, 1194.060158139);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1287.0), (-6211.87284989), 419, (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Year year0 = new Year();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = (-401);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0, (-9999.0), (-401), (Comparable) null);
      String string0 = "'vL>USJWy";
      String string1 = ";ud?o$ex&JlIg6<MEs";
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) locale_FilteringMode0, (Comparable) locale_FilteringMode0);
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 731);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Instant instant0 = MockInstant.ofEpochMilli((byte)1);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte)1, (byte)1, 295, 295, Double.NEGATIVE_INFINITY);
      oHLCDataItem0.getLow();
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2130.629098302;
      doubleArray0[2] = 278.034;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 278.034;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 278.034;
      doubleArray0[7] = (-3209.03);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DatasetUtilities.createCategoryDataset("", "@RD+V?S", doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(linkedList0);
      vectorSeriesCollection0.seriesChanged(seriesChangeEvent0);
      LinkedList<DefaultOHLCDataset> linkedList1 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList1, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Instant instant0 = MockInstant.ofEpochMilli(59L);
      Date.from(instant0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("-=ZU;_+\u0000<zOw");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 3190, 3190);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList2, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1641.34839));
      linkedList0.add(xYBarDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, true);
      Connection connection0 = null;
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 278.034;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 32, 278.034);
      DatasetUtilities.findMinimumRangeValue(xYDataset0);
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, true);
      Comparable<TimeTableXYDataset>[] comparableArray0 = null;
      double[][] doubleArray2 = new double[8][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray2[5];
      doubleArray2[7] = doubleArray0;
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = new Range((-2396.562681544847), (-2396.562681544847));
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      Stack<Byte> stack0 = new Stack<Byte>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DatasetUtilities.findMinimumDomainValue((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainLowerBound(true);
      DatasetUtilities.findMinimumDomainValue((XYDataset) null);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", "Requires 'samples' > 1", (double[][]) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      Byte byte0 = new Byte((byte)1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Instant instant0 = MockInstant.ofEpochMilli((byte)1);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte)1, (byte)1, 295, 295, Double.NEGATIVE_INFINITY);
      oHLCDataItem0.getLow();
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, boolean0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DatasetUtilities.findRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("]2qo=B4v,3!");
      timePeriodValues0.setDomainDescription((String) null);
      Hour hour0 = new Hour();
      timePeriodValues0.setDescription("Requires 'start' < 'end'.");
      timePeriodValues0.add((TimePeriod) hour0, (Number) null);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((XYDataset) null, false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      stack0.add(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultIntervalXYDataset0, stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset((-1L));
      Locale locale0 = Locale.ROOT;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 0;
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      xYSeries0.add((Number) integer0, (Number) 9999);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 9999);
      year0.next();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      Range range0 = Range.scale((Range) null, 1470.0601);
      double double0 = 1916.3689441894808;
      double double1 = 171.97904;
      // Undeclared exception!
      try { 
        Range.expand(range0, double1, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      linkedList0.add(xYIntervalSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) linkedList0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(xYIntervalSeriesCollection0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, false);
      LinkedList<DefaultOHLCDataset> linkedList1 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, linkedList1, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "L`#`'uy]";
      stringArray0[2] = "";
      stringArray0[3] = ";OBXnV1!/; NaGtQ";
      stringArray0[4] = "w~";
      stringArray0[5] = "XIEY#S5KeL.|BDTH";
      stringArray0[6] = "";
      stringArray0[7] = "w~";
      stringArray0[8] = "b=EEDv?fOq9I{TJA3";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "w~", (Number[][]) null);
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, int0);
      DatasetUtilities.createCategoryDataset((Comparable) stringArray0[2], (KeyedValues) pieDataset0);
      DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      LinkedList<DefaultStatisticalCategoryDataset> linkedList2 = new LinkedList<DefaultStatisticalCategoryDataset>();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList2, boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Year year0 = new Year();
      DatasetUtilities.createCategoryDataset("f2", "f2", (Number[][]) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("@x&<l|rl");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate((-768L));
      MockDate.UTC(332, 0, (-9), 1981, 0, (-195));
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      intervalXYDelegate0.getDomainBounds(true);
      intervalXYDelegate0.getStartXValue(0, 0);
      defaultMultiValueCategoryDataset0.equals(intervalXYDelegate0);
      double double0 = 2371.0704267088;
      Float float0 = new Float(double0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.add(float0);
      int int0 = (-944);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset1.getRowKey(int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      intervalXYDelegate0.getDomainBounds(false);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate1);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 9999;
      numberArray0[1] = (Number) (-9999);
      numberArray0[2] = (Number) 9999;
      numberArray0[0] = (Number) (-9999);
      numberArray0[4] = (Number) 9999;
      numberArray0[5] = (Number) (-9999);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Float float0 = new Float(2371.0704267088);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      Float float1 = new Float(0.0F);
      arrayList0.add(float1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKey(1046);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1641.34839));
      linkedList0.add(xYBarDataset0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Instant instant0 = MockInstant.ofEpochSecond((-1L), (-1L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 645.1169174789592, Double.NEGATIVE_INFINITY, (-1641.34839), (-1641.34839), (-1L));
      Number number0 = oHLCDataItem0.getLow();
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = number0;
      numberArray1[3] = (Number) bigInteger0;
      numberArray1[4] = (Number) bigInteger0;
      numberArray1[5] = number0;
      numberArray1[6] = (Number) bigInteger0;
      numberArray1[7] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) bigInteger0;
      numberArray0[1] = numberArray1;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray3[2] = number0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "]^X>Ze", numberArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 604);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1138);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(vectorSeriesCollection0, (-1641.34839));
      Object object0 = new Object();
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1641.34839);
      doubleArray1[1] = (-1641.34839);
      doubleArray1[2] = (-1641.34839);
      doubleArray1[3] = (-1641.34839);
      doubleArray1[4] = 1157.62;
      doubleArray1[5] = (-1641.34839);
      doubleArray1[6] = (-1641.34839);
      doubleArray1[7] = (-1641.34839);
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1641.34839);
      doubleArray2[1] = (-1641.34839);
      doubleArray2[2] = 1157.62;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      int int0 = 1;
      int int1 = 3;
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getX(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Second second0 = new Second();
      second0.next();
      DatasetUtilities.sampleFunction2D((Function2D) null, 59, 0, 0, second0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate((-768L));
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      MockDate mockDate2 = new MockDate(59);
      Week week0 = new Week(mockDate2);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) null, (-2169.4105), 3417.35762, 2, week0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, week0.LAST_WEEK_IN_YEAR);
      linkedList0.add(xYBarDataset0);
      boolean boolean0 = true;
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) linkedList0, boolean0);
      Connection connection0 = null;
      String string0 = null;
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2099L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2099L, (-1887.47446521736), 0.8);
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<JDBCXYDataset>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<JDBCXYDataset>) oHLCDataItem0;
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1887.47446521736);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1887.47446521736);
      doubleArray3[1] = (double) 2099L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2099L;
      doubleArray4[1] = 0.8;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1887.47446521736);
      doubleArray4[4] = (double) 2099L;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, int0);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) pieDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.add((Number) 0, (Number) 0);
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) second0;
      comparableArray0[1] = (Comparable<TimeSeriesCollection>) second0;
      comparableArray0[2] = (Comparable<TimeSeriesCollection>) second0;
      double[][] doubleArray0 = new double[0][3];
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getEndX((-1), (-1));
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[10][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(60L);
      mockDate1.before(mockDate0);
      Minute minute0 = new Minute(mockDate1);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainBounds(true);
      xYSeries0.getItems();
      xYSeriesCollection0.getRangeBounds(true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-135.266);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-291.37592998);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 2517.5943320149;
      doubleArray0[5] = 2130.629098302;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 278.034;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-3209.03), 278.034, 30, 2130.629098302);
      DatasetUtilities.findMaximumDomainValue(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset((-1L));
      Locale locale0 = Locale.ROOT;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      timeTableXYDataset0.indexOf((-1.0));
      doubleArray0[3] = (double) 0;
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 2130.629098302;
      doubleArray0[2] = 278.034;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 278.034;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 278.034;
      doubleArray0[7] = (-3209.03);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 907, 907);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0, 0, 0, "");
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      boolean boolean0 = true;
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      List list0 = new Vector<Byte>();
      xYSeriesCollection0.getDomainBounds(false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) mockDate1);
      DatasetUtilities.createCategoryDataset((Comparable) mockDate1, (KeyedValues) pieDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainLowerBound(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("s", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      mockDate1.before(mockDate0);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 59, (Number) 0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "VXWS$Z{H");
      double double0 = (-1458.84);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, double0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(60L);
      mockDate1.before(mockDate0);
      Minute minute0 = new Minute(mockDate1);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(60L);
      mockDate1.before(mockDate0);
      Minute minute0 = new Minute(mockDate1);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.1474836497403855E9);
      Object object0 = new Object();
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2015.8086083085864, 844.0);
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 477.200574712272, 844.0, 4211, "");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, true);
      String string0 = "L`#\\`'uy]";
      Number[][] numberArrayArray0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "w~";
      stringArray0[2] = "y ||";
      stringArray0[3] = ";OBXnV1!/; NaGtQ";
      stringArray0[4] = ";OBXnV1!/; NaGtQ";
      stringArray0[5] = "XIEY#S5KeL.|BDTH";
      stringArray0[6] = "b=EEDv?fOq9I{TJA3";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.Week", "UIZZV", (Number[][]) null);
      int int0 = 1945;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, int0);
      DatasetUtilities.createCategoryDataset((Comparable) stringArray0[2], (KeyedValues) pieDataset0);
      DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.createCategoryDataset(stringArray0[1], string0, numberArrayArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Comparable<TimeSeriesCollection> comparable0 = null;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2.147483648E9));
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      XYSeries xYSeries0 = new XYSeries((-2.147483648E9), false);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-2.147483648E9));
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 2130.629098302;
      doubleArray0[2] = 278.034;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 278.034;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 278.034;
      doubleArray0[7] = (-3238.2701466910153);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) arrayList0, range0, true);
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1969, 1969);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 1);
      mockDate0.setTime(9);
      MockDate mockDate1 = new MockDate((-1), 332, 0);
      mockDate0.before(mockDate1);
      MockDate mockDate2 = new MockDate(191, (-2261), 181, (-1630), (-1), 0);
      mockDate2.before(mockDate1);
      Minute minute0 = new Minute(mockDate2);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 9);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1.0), (-1.0), "i3!w");
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2284.4936606));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Instant instant0 = MockInstant.ofEpochMilli((byte)1);
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte)1, (byte)1, 295, 295, Double.NEGATIVE_INFINITY);
      oHLCDataItem0.getLow();
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 1068.991201293787);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, locale_FilteringMode0, locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<DynamicTimeSeriesCollection> vector0 = new Stack<DynamicTimeSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset((-1L));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (-789.77371);
      doubleArray0[3] = (double) 0;
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      Number[][] numberArray0 = new Number[0][4];
      DatasetUtilities.createCategoryDataset("", "Duplicate items in 'rowKeys'.", numberArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1485.29205);
      doubleArray0[2] = 683.90188001681;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[11][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@x&<l|rl", "@x&<l|rl", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(9999.0, 9999.0, "TG{Cn/IX#ea~Zo");
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 295;
      doubleArray1[1] = (double) 295;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 295;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) arrayList0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-135.266);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 2517.5943320149;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = (-1510);
      MockDate mockDate0 = new MockDate(1L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1L, (-1887.47446521736), (-1510), 295.0, 1L);
      double[][] doubleArrayArray0 = null;
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Object>) oHLCDataItem0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, int0);
      DatasetUtilities.createCategoryDataset((Comparable) comparableArray0[0], (KeyedValues) pieDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2130.629098302;
      doubleArray0[2] = 278.034;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 278.034;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 278.034;
      doubleArray0[7] = (-3209.03);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 2);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 2130.629098302, 0.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset1);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) defaultPieDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      Integer integer0 = new Integer(2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@RD+V?S", "", doubleArray1);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@RD+V?S", "Null 'columnKeys' argument.", doubleArray1);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, false);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1845.33, 2208.227186153607);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1733.7708), 1205.93221511141, 174, "Null 'columnKeys' argument.");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 92);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-1759));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Null 'columnKeys' argument.", 0.0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector1 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      vector1.add(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, true);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1, 1.6938310818007885);
      boolean boolean0 = true;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, false);
      DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.fireSelectionEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 914.643109706;
      doubleArray0[2] = (-2577.33878300968);
      doubleArray0[3] = 914.643109706;
      doubleArray0[4] = (-3282.579);
      doubleArray0[5] = (-3282.579);
      doubleArray0[6] = (-3282.579);
      doubleArray0[7] = (-3282.579);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      defaultStatisticalCategoryDataset0.validateObject();
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      arrayList1.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 1);
      MockDate mockDate1 = new MockDate((-1), 332, 0);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 9;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("@RD+V?S", "@RD+V?S", doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)1064);
      vector0.add(short0);
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) mockDate0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Week week0 = new Week((-2146669172), (-2146669172));
      XYSeries xYSeries0 = new XYSeries(week0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 53, (Number) 1);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      xYSeriesCollection0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate(2128, 53, 53, (-151), 1932735283);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 1, (Number) 1, (Comparable) week0, (Comparable) week0);
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      Object object0 = new Object();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1485.29205);
      doubleArray0[2] = 683.90188001681;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      MockDate mockDate0 = new MockDate(12, 12, (-2146867982));
      Year year0 = new Year(mockDate0);
      year0.getStart();
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2045.90878, 3102.237212736, 12, year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(12, 12);
      xYSeries1.getItems();
      boolean boolean0 = false;
      DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, boolean0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(histogramDataset0);
      HistogramDataset histogramDataset1 = new HistogramDataset();
      DefaultXYDataset defaultXYDataset0 = null;
      try {
        defaultXYDataset0 = new DefaultXYDataset();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 12
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      mockDate1.before(mockDate0);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 59, (Number) 0);
      MockDate mockDate2 = new MockDate((-944), 0, (-310), 45, (-310), 0);
      mockDate2.before(mockDate1);
      Minute minute1 = new Minute(mockDate1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 0);
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.createCategoryDataset((Comparable) mockDate2, (KeyedValues) defaultPieDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.5, 492.8219176402);
      Month month0 = new Month();
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 1296.02, 3405, month0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, (List) null, false);
      String string0 = "NX=\\.Non@dcK";
      MockDate mockDate1 = new MockDate(string0);
      double double0 = 6.283185307179586;
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = null;
      stack0.add((DefaultIntervalXYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(xYDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      boolean boolean0 = mockDate1.before(mockDate0);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      MockDate mockDate2 = new MockDate(1069, 1, (-2145452601), 3037, 952, 1090);
      mockDate0.before(mockDate2);
      Minute minute1 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(mockDate1, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      Minute.parseMinute(";qx/?j");
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 0, (Number) 59);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0);
      TimeSeries timeSeries0 = new TimeSeries(mockDate2, "}9<[4p", "Z7z?[z03A/=2S5u ");
      TimeZone timeZone0 = TimeZone.getTimeZone("}9<[4p");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeZone0.getDisplayName(false, (-4378));
      boolean boolean1 = false;
      Range range0 = timeSeriesCollection0.getDomainBounds(list0, boolean1);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, range0, boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1L, (-1887.47446521736), (-1510), 295.0, 1L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      MockDate mockDate1 = new MockDate(949L);
      mockDate0.before(mockDate1);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 295.0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]2qo=B4v,3!", "]2qo=B4v,3!", doubleArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      defaultCategoryDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) "]2qo=B4v,3!");
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("There is no existing value for the specified 'period'.", "&g!;", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 1);
      MockDate mockDate1 = new MockDate((-1), 332, 0);
      mockDate0.before(mockDate1);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) (-1));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1155.3479617571172);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1528.0));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, true);
      double double0 = (-3282.579);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 914.643109706;
      double double1 = (-2577.33878300968);
      doubleArray0[2] = (-2577.33878300968);
      doubleArray0[3] = 914.643109706;
      doubleArray0[4] = (-3282.579);
      doubleArray0[5] = (-3282.579);
      doubleArray0[6] = (-3282.579);
      DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 914.643109706);
      DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, false);
      DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
      String string0 = ";!}Imgxpc:M\\*#r;*?6";
      String string1 = "";
      double[][] doubleArray1 = new double[4][1];
      double[] doubleArray2 = new double[9];
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("oR\" 2i");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.pollLast();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.add((DefaultOHLCDataset) null);
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, true);
      double double0 = (-3282.579);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jVaj*rvKI[", "jVaj*rvKI[", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      stack0.add(defaultIntervalXYDataset0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate();
      mockDate0.before(mockDate1);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) 0L);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 614.563752;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 2285.083679;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Oz.\"`{", "Oz.\"`{", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.addChangeListener((DatasetChangeListener) null);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) (-1.0), 672.7026451737, 100);
      DatasetUtilities.createCategoryDataset((Comparable) "Oz.\"`{", (KeyedValues) pieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainUpperBound(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) 2285.083679, (-1.0), 100);
      System.setCurrentTimeMillis(100);
      System.setCurrentTimeMillis(0L);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List list0 = new Vector<DefaultHighLowDataset>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) locale_FilteringMode0, (Comparable) locale_FilteringMode0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "org.jfree.data.event.DatasetChangeEvent");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1, 1.6938310818);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1, 1.6938310818, 1, "");
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[1][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      defaultCategoryDataset0.setValue((Number) bigInteger1, (Comparable) bigInteger0, (Comparable) "org.jfree.data.event.DatasetChangeEvent");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      defaultCategoryDataset0.hasListener(histogramDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      List list0 = xYSeries0.getItems();
      xYSeries0.add((Number) integer0, (Number) 9999);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(8, 8, year0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, false);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      defaultCategoryDataset0.hasListener(histogramDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.pollLast();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 6905.2732;
      doubleArray1[1] = 2094.25;
      doubleArray1[2] = (-1733.7708);
      doubleArray1[3] = 330.08839463;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 1.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1733.7708);
      doubleArray2[1] = 2094.25;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) null, true);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Day.parseDay("");
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 3102.237212736, 4265);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, true);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 2202.8);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getTime();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-208.16586));
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(date0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = null;
      try {
        defaultTableXYDataset0 = new DefaultTableXYDataset();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1061, 332, (-145));
      MockDate mockDate1 = new MockDate(332, 332, 46);
      mockDate1.before(mockDate0);
      boolean boolean0 = mockDate1.before(mockDate0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(mockDate1, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, 1.7976931348623157E308);
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-145), 0.8, 46, regularTimePeriod0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries1.add((Number) 59, (Number) 0);
      XYSeries xYSeries2 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 2585.0, 1061, 8, mockDate0);
      xYSeries2.getItems();
      Range.expandToInclude(range0, minute0.FIRST_MINUTE_IN_HOUR);
      boolean boolean1 = false;
      boolean boolean2 = false;
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, boolean2);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, boolean0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MatrixSeries matrixSeries0 = null;
      MatrixSeriesCollection matrixSeriesCollection0 = null;
      try {
        matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.getRowCount();
      List list0 = defaultCategoryDataset0.getRowKeys();
      Integer integer0 = new Integer(274);
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) "");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      timeSeriesCollection0.equals(range0);
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, list0, true);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(0.5);
      stack0.removeAllElements();
      stack0.add(float0);
      defaultMultiValueCategoryDataset0.add(stack0, locale_FilteringMode0, locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("jVaj*rvKI[", "jVaj*rvKI[", doubleArray0);
      defaultCategoryDataset0.setValue(3695.85540452, (Comparable) "jVaj*rvKI[", (Comparable) "jVaj*rvKI[");
      List list0 = defaultCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      linkedList0.pollLast();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.add((DefaultOHLCDataset) null);
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, linkedList0, false);
      double double0 = (-3282.579);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("s", 21, 21);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultBoxAndWhiskerXYDataset0);
      defaultStatisticalCategoryDataset0.addChangeListener(intervalXYDelegate0);
      Integer integer0 = new Integer(1578);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) null, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      linkedList0.addAll((Collection<? extends DefaultOHLCDataset>) stack0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      stack1.add(defaultBoxAndWhiskerCategoryDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "Null 'seriesKey' argument.", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Number[][] numberArray0 = new Number[20][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("V72V$I.=RzQ", "V72V$I.=RzQ", numberArray0);
      defaultCategoryDataset0.addValue((-2604.0), (Comparable) "V72V$I.=RzQ", (Comparable) "V72V$I.=RzQ");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Year year0 = new Year();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 307.34;
      doubleArray1[1] = (-4040.3509061);
      doubleArray1[2] = (-4040.3509061);
      doubleArray1[3] = 5004.165;
      doubleArray1[4] = (-1327.336534399718);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 3615.7853119339;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "lEr3XT", doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Vector<MockDate> vector0 = new Vector<MockDate>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, false);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.clear();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 14);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D(3417.35762, 4102.9125);
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GXF+.", "GXF+.", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("GXF+.");
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("B", "B", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Second second0 = new Second();
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, (OHLCDataItem[]) null);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      MockDate mockDate0 = new MockDate(2, 2, 2);
      Hour hour0 = new Hour(mockDate0);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries(regularTimePeriod0, true, true);
      yIntervalSeriesCollection0.addSeries(yIntervalSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-654), (-654));
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (-654));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (KeyToGroupMap) null);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4265, 4265);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1117.0830707561383;
      doubleArray1[1] = 3102.237212736;
      doubleArray1[2] = (double) 4265;
      doubleArray1[3] = 3102.237212736;
      doubleArray1[4] = 3102.237212736;
      doubleArray1[5] = 1.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 769.8602792307856;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1805.7408562714);
      doubleArray4[1] = 1117.0830707561383;
      doubleArray4[2] = (double) 2029;
      doubleArray4[3] = 1117.0830707561383;
      doubleArray4[4] = 477.200574712272;
      doubleArray4[5] = 769.8602792307856;
      doubleArray4[6] = (double) 2029;
      doubleArray4[7] = 1.5;
      doubleArray4[8] = (double) 4265;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 4265;
      doubleArray5[1] = 3102.237212736;
      doubleArray5[2] = 92.7060962983;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1117.0830707561383;
      doubleArray6[1] = 769.8602792307856;
      doubleArray6[2] = 3102.237212736;
      doubleArray6[3] = 1117.0830707561383;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 4265;
      doubleArray7[1] = 1.5;
      doubleArray7[2] = 3102.237212736;
      doubleArray7[3] = 769.8602792307856;
      doubleArray7[4] = 769.8602792307856;
      doubleArray7[5] = 477.200574712272;
      doubleArray7[6] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (double) 2029;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q@", "Q@", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 92.7060962983);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TimeZone.getTimeZone("");
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      Quarter quarter0 = new Quarter();
      comparableArray0[0] = (Comparable<Double>) quarter0;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1085);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      TimeZone.getTimeZone("");
      Quarter quarter0 = new Quarter();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getRowCount();
      defaultCategoryDataset0.getColumnKeys();
      Integer integer0 = new Integer((-1717));
      defaultCategoryDataset0.addValue((Number) integer0, (Comparable) "", (Comparable) "");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", " ;mwM#$.S<eZ{sK$", "(P4JE/");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((float) 7);
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(float0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 5);
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 295);
      BigInteger bigInteger0 = BigInteger.ONE;
      Comparable<XYDatasetTableModel>[] comparableArray0 = (Comparable<XYDatasetTableModel>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 295;
      doubleArray1[1] = (double) 295;
      doubleArray1[2] = (double) 295;
      doubleArray1[3] = (double) 295;
      doubleArray1[4] = (double) 295;
      doubleArray1[5] = (double) 295;
      doubleArray1[6] = (double) 295;
      doubleArray1[7] = (double) 295;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 295;
      doubleArray2[1] = (double) 295;
      doubleArray2[2] = (double) 295;
      doubleArray2[3] = (double) 295;
      doubleArray2[4] = (double) 295;
      doubleArray2[5] = (double) 295;
      doubleArray2[6] = (double) 295;
      doubleArray2[7] = (double) 295;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 295;
      doubleArray3[1] = (double) 295;
      doubleArray0[2] = doubleArray3;
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2015.8086083085864, 2015.8086083085864);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1861.74), 682.11968661, 400, "");
      DatasetUtilities.iterateRangeBounds(xYDataset0, true);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 682.11968661);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimeZone.getTimeZone("");
      Quarter quarter0 = new Quarter();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      mockDate1.before(mockDate0);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeries0.add(2999.06, (double) 0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 59, (Number) 0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 332);
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(9999.0, 9999.0, "TG{Cn/IX#ea~Zo");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("%Ixd] xE(X#Q*|s?S'", 29, 29);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-5799.32), 0.0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(lineFunction2D0, 400, 1342.40977306082, 400, "");
      DatasetUtilities.iterateRangeBounds(xYDataset0, true);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 400);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      WindowStateListener windowStateListener0 = mock(WindowStateListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowStateListener0, windowStateListener0);
      AWTEventMulticaster.add((WindowStateListener) null, (WindowStateListener) null);
      defaultStatisticalCategoryDataset0.hasListener((EventListener) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1342.40977306082, 1342.40977306082, 400, "");
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      MockDate mockDate1 = new MockDate(332, 0, 332);
      mockDate1.before(mockDate0);
      mockDate0.before(mockDate1);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 59, (Number) 0);
      xYSeries0.getItems();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[11];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray3[5] = (Number) integer0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("m|EIReA_So')4&o", "", numberArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      numberArray3[6] = number0;
      numberArray3[7] = (Number) bigInteger0;
      numberArray3[8] = (Number) integer0;
      numberArray0[2] = numberArray3;
      DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", (String) null, numberArray0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1553.04571101814));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "org.jfree.data.event.DatasetChangeEvent", (-1553.04571101814));
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@x&<l|rl", "@x&<l|rl", doubleArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[11];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultIntervalXYDataset0, 1.0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 4);
      Instant instant0 = MockInstant.ofEpochSecond((-1833L));
      Date date0 = Date.from(instant0);
      Week week0 = new Week(date0);
      comparableArray0[0] = (Comparable<JDBCXYDataset>) week0;
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      comparableArray0[1] = (Comparable<JDBCXYDataset>) regularTimePeriod0;
      XYDataItem xYDataItem0 = new XYDataItem((double) (-1833L), (double) 0);
      comparableArray0[2] = (Comparable<JDBCXYDataset>) xYDataItem0;
      Year year0 = new Year(date0);
      comparableArray0[3] = (Comparable<JDBCXYDataset>) year0;
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Number[][] numberArray0 = new Number[20][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("V72V$I.=RzQ", "V72V$I.=RzQ", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1085;
      doubleArray1[1] = (double) 1085;
      doubleArray1[2] = (double) 1085;
      doubleArray1[3] = (double) 1085;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1085;
      doubleArray2[1] = (double) 1085;
      doubleArray2[2] = (double) 1085;
      doubleArray2[3] = (double) 1085;
      doubleArray2[4] = (double) 1085;
      doubleArray2[5] = (double) 1085;
      doubleArray2[6] = (double) 1085;
      doubleArray2[7] = (double) 1085;
      doubleArray2[8] = (double) 1085;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("O;t!+^3L(c9H%3A", ".1R[^JM]i}pPsa", doubleArray0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1085, 1058);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 1085.0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(1655.7905F);
      defaultKeyedValues2DDataset0.addValue((Number) float0, (Comparable) float0, (Comparable) float0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      int int0 = 1093;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1093);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) bigInteger0, (double) int0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull(pieDataset1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1093, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-1881));
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Number[][] numberArray0 = new Number[15][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("V72V$I.=RzQ", "V72V$I.=RzQ", numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[11];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TimeZone.getTimeZone("");
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      Quarter quarter0 = new Quarter();
      comparableArray0[0] = (Comparable<Double>) quarter0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(28, 470, 286, 1, 4);
      dateArray0[0] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(quarter0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, arrayList0, false);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("w?I", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "@Z";
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "@Z");
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) string0, (KeyedValues) pieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@x&<l|rl", "@x&<l|rl", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      stack0.add(defaultIntervalXYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "w2zn|oIp($C<{b='Y~", "w2zn|oIp($C<{b='Y~");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2170.9);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 1);
      SerialDate serialDate0 = SerialDate.createInstance(142);
      comparableArray0[0] = (Comparable<Float>) serialDate0;
      Comparable<Byte>[] comparableArray1 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 2);
      comparableArray1[0] = (Comparable<Byte>) serialDate0;
      comparableArray1[1] = (Comparable<Byte>) serialDate0;
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TimeZone.getTimeZone("");
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      Quarter quarter0 = new Quarter();
      comparableArray0[0] = (Comparable<Double>) quarter0;
      quarter0.getMiddleMillisecond();
      Comparable<TimeSeriesCollection>[] comparableArray1 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 8);
      comparableArray1[0] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[1] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[2] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[3] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[4] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[5] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[6] = (Comparable<TimeSeriesCollection>) quarter0;
      comparableArray1[7] = (Comparable<TimeSeriesCollection>) quarter0;
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1392409281320L;
      doubleArray2[2] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1392409281320L;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (-2.147483648E9);
      doubleArray3[3] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 1392409281320L;
      doubleArray4[1] = (double) 4;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.DataUtilities", (KeyedValues) null);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.toString();
      fixedMillisecond0.getStart();
      fixedMillisecond0.previous();
      DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) null);
      int int0 = 2538;
      // Undeclared exception!
      try { 
        Random.setNextRandom(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GXF+.", "GXF+.", numberArray0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "GXF+.");
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Year year0 = new Year();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) year0, (double) 9999, (-2256));
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) year0, (double) 9999);
      DatasetUtilities.isEmptyOrNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(bigInteger0, "org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2170.9);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-3016);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-3016));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree.data.event.DatasetChangeEvent", (double) (-3016), 153);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) bigInteger1, (double) int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[11][3];
      String string0 = "361{\"9|PHb4 A:\"|X";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-35));
      double double0 = 2.0;
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "361{\"9|PHb4 A:\"|X", 2.0, (-35));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) string0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Year year0 = new Year();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) (-9999);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      String string0 = "]es]l[]%rm|rA/d:";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]es]l[]%rm|rA/d:", "]es]l[]%rm|rA/d:", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2157);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "]es]l[]%rm|rA/d:", (double) 2157, 2157);
      double double0 = 3173.78944176744;
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.event.DatasetChangeEvent", (KeyedValues) defaultKeyedValuesDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1446.3653880098, 1.7976931348623157E308);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-566.0), 1.7976931348623157E308, 7, "org.jfree.data.event.DatasetChangeEvent");
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYDataset0, 0.0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) bigInteger0, (Number) null);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset1.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) list0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("s", 21, 21);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, arrayList0, true);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.fireSelectionEvent();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector1 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      vector0.add((DefaultBoxAndWhiskerCategoryDataset) null);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[0][0];
      DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2170.9);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      Long long0 = new Long((-2446L));
      numberArray1[1] = (Number) long0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("yDD$WbQ{sD[a4i1we.", "yDD$WbQ{sD[a4i1we.", numberArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0, "yDD$WbQ{sD[a4i1we.");
      int int0 = 1535;
      int int1 = 12;
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1946, 1946);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, false);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1946, 1946);
      dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(locale_FilteringMode0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.8699455019547521, 0.8699455019547521, "x[!2@s<AHs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "I6x[!2@s<A!Hs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, false);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Inyex qutsnde ali: range.", 37, 37);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3268.6856469), 356.5937974192, "za*8X:gaCFk");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 181.70002);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 1020);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1020;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      doubleArray1[4] = 1974.3450123;
      doubleArray1[5] = (double) 1020;
      doubleArray1[6] = (-661.29998);
      doubleArray1[7] = (double) 1020;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-661.29998), Double.NaN, 2659);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 9.0, 1946.599);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultKeyedValuesDataset0.setValue((Comparable) regularTimePeriod0, (-1631.482691587716));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) regularTimePeriod0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      MockDate mockDate0 = new MockDate();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = new Integer((-1032));
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) mockDate0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) mockDate0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (double) (-1032), (-2448));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date[] dateArray0 = new Date[2];
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Number[][] numberArray0 = new Number[20][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("V72V$I.=RzQ", "V72V$I.=RzQ", numberArray0);
      DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2144));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      DatasetUtilities.createCategoryDataset("Rh", "Rh", doubleArray0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 332, 332);
      mockDate0.before(mockDate0);
      mockDate0.before(mockDate0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeBounds(true);
      xYSeries0.add((Number) 59, (Number) 0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1020, 1020, 9, 9, 9);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 52;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.fireSelectionEvent();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("s", 21, 21);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(2, 2, 2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2, 2, 2285.18976698741, 1558.31043708, 1558.31043708);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2285.18976698741, 2285.18976698741, Double.NEGATIVE_INFINITY, (-2039.001172185209), (-973.291227287495));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[19][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone("NG>AC8+;EHy^@w");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 2631.000871963);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(2, 2, 2);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2, 2, 2285.18976698741, 1558.31043708, 1558.31043708);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(2344L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1886.5, 424.094, 1.5, 424.094, (-2984.1188134055383));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      defaultOHLCDataset0.addChangeListener(intervalXYDelegate0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1.0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("nL:(+KWn", "nL:(+KWn", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      stack0.add(defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "sgQGG*gCkV,~");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      XYSeries xYSeries0 = new XYSeries("sgQGG*gCkV,~", true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      xYSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack1, (Range) null, true);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y=={J*D=M#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = null;
      try {
        stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1020, 1020, 9, 9, 9);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      int int0 = mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 52;
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      linkedList0.add(xYSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7, 7);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 53;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[0][9];
      DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      TimeZone.getTimeZone("");
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      XYDataset xYDataset0 = null;
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jVaj*rvKI[", "jVaj*rvKI[", doubleArray0);
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-172));
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, 0.5);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(44, 44);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Second second0 = new Second();
      second0.getMinute();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) second0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1233L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2984.1188134055383), (-1233L), (-1233L), (-2865.99749), 1691.26524);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2168, 2168);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 1857);
      defaultOHLCDataset0.addChangeListener(categoryToPieDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2903));
      DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) categoryToPieDataset0);
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull(categoryDataset1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      defaultKeyedValues0.setValue((Comparable) "", 124.53161191183369);
      DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.DatasetChangeEvent", "org.jfree.data.event.DatasetChangeEvent", numberArray0);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.event.DatasetChangeEvent", (KeyedValues) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      stack0.add(defaultIntervalXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, range0, false);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Inyexqtsnde li: rnge.", 37, 37);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) 9999);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@x&<l|rl", "@x&<l|rl", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      stack0.subList(8, 8);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, range0, boolean0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(2344L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1886.5, 1886.5, 1.5, 1886.5, (-2984.1188134055383));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 29;
      doubleArray1[1] = (double) 29;
      doubleArray1[2] = (double) 29;
      doubleArray1[3] = (double) 29;
      doubleArray1[4] = (double) 29;
      doubleArray1[5] = (double) 29;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 29;
      doubleArray2[1] = (double) 29;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Week week0 = new Week((-2146669172), (-2146669172));
      MockDate mockDate0 = new MockDate(1, 53, 2128, 2128, 1, 53);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 1, (Number) 1, (Comparable) week0, (Comparable) week0);
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-2146669172), 2128);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 9, 9, 9, 9);
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (-1594.484163);
      doubleArray1[4] = (double) 9;
      doubleArray1[5] = (double) 9;
      doubleArray1[6] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 9;
      doubleArray3[1] = (double) 9;
      doubleArray1[6] = (double) 9;
      doubleArray3[3] = 644.0279;
      doubleArray3[4] = (-1594.484163);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (-1594.484163);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Range[", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xYSeriesCollection0);
      xYSeriesCollection0.setAutoWidth(false);
      xYSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = Double.NEGATIVE_INFINITY;
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = Double.NEGATIVE_INFINITY;
      doubleArray5[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = Double.NEGATIVE_INFINITY;
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = 105.90538;
      doubleArray6[6] = Double.NEGATIVE_INFINITY;
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      LocalDate localDate0 = MockLocalDate.now();
      XYSeries xYSeries0 = new XYSeries(localDate0, true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      xYSeriesCollection0.getRangeBounds(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getItems();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(bigInteger0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultMultiValueCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, 1020);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1020;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      doubleArray1[4] = 1974.3450123;
      doubleArray1[5] = (double) 1020;
      doubleArray1[6] = (-661.29998);
      doubleArray1[7] = (double) 1020;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-661.29998), Double.NaN, 2659);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 9.0, (double) 1020);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray1);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D1, 1, 53, 32, "");
      DatasetUtilities.findRangeBounds(xYDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainBounds(false);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds(xYDataset0, (List) arrayList0, (Range) null, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, false);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1462);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1020);
      double[][] doubleArray0 = new double[7][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      Vector<String> vector0 = new Vector<String>();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 1, Double.NaN, 2659);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 1020, 1946.599);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1361.1518404;
      doubleArray1[1] = 306.51;
      doubleArray1[2] = (-267.40373766376);
      doubleArray1[3] = (-2860.45450726);
      doubleArray1[4] = 1842.1795586162139;
      doubleArray1[5] = 2.5;
      doubleArray1[6] = 2200.56;
      doubleArray1[7] = (-699.5825148437228);
      doubleArray1[8] = (-661.29998);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 2.5;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("jVaj*rvKI[", "jVaj*rvKI[", doubleArray0);
      defaultCategoryDataset0.addValue((-355.68079239), (Comparable) "jVaj*rvKI[", (Comparable) "jVaj*rvKI[");
      List list0 = defaultCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, true);
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset("jVaj*rvKI[", "jVaj*rvKI[", "jVaj*rvKI[", "jVaj*rvKI[");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-3090.22));
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 85;
      doubleArray1[1] = (double) 85;
      doubleArray1[2] = (double) 85;
      doubleArray1[3] = (double) 85;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 85;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(2344L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1659.4927339;
      doubleArray1[1] = (double) 2344L;
      doubleArray1[2] = (double) 2344L;
      doubleArray1[3] = (double) 2344L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1659.4927339;
      doubleArray2[1] = 1659.4927339;
      doubleArray2[2] = 1659.4927339;
      doubleArray2[3] = (double) 2344L;
      doubleArray2[4] = 1659.4927339;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 2344L;
      doubleArray3[2] = 1659.4927339;
      doubleArray3[3] = (double) 2344L;
      doubleArray3[4] = (double) 2344L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1499.5403386;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X5", "361{\"9|PHb4 A:\"|X5", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(2344L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1886.5, 1886.5, 1.5, 1886.5, (-2984.1188134055383));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset1.getRangeBounds(false);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.setValue((-2646.7), (Comparable) "@x&<l|rl", (Comparable) "@x&<l|rl");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1.7976931348623157E308);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.clearSelection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      dateArray0[0] = date0;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(23);
      Date date1 = spreadsheetDate0.toDate();
      dateArray0[1] = date1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      spreadsheetDate0.setDescription("}");
      doubleArray0[1] = (-846.4658);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 9999;
      doubleArray0[4] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("}", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.clearSelection();
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      List list0 = xYSeries0.getItems();
      xYSeries0.add((Number) integer0, (Number) 9999);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(integer0, oHLCDataItemArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset1, false);
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 1020, 9, 9, 1020, 9);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1020;
      doubleArray1[3] = (double) 9;
      doubleArray1[5] = (double) 1020;
      doubleArray1[6] = (-661.29998);
      doubleArray1[7] = (double) 1020;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 1020.0, 1020.0, (-36));
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 843.0);
      Range.expandToInclude(range0, (-661.29998));
      Object[][][] objectArray0 = new Object[0][1][2];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(list0, objectArray0);
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) vector0, range0, boolean0);
      DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.add((Number) 0, (Number) 0);
      List list0 = xYSeries0.getItems();
      MockDate mockDate0 = new MockDate(59, 0, 0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 59, (Number) 59, (Comparable) second0, (Comparable) second0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Week week0 = new Week();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.getKeys();
      defaultKeyedValuesDataset0.setValue((Comparable) week0, (double) 53);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]2qo=B4v,3!", "]2qo=B4v,3!", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 30);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Week week0 = new Week((-2146669172), (-2146669172));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (Number) 1);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      timePeriodValues0.setKey(week0);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("XOwR_Hys?k#I");
      Hour hour0 = new Hour();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 23);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[1];
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'columnKeys' argument.", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MockDate mockDate0 = new MockDate(7, 7, 7, 7, 7);
      int int0 = new Integer(7);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Float float0 = new Float(7.0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(43, 43);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      xYSeries0.getItems();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7, 7);
      mockGregorianCalendar0.getGregorianChange();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-729.78601379523);
      doubleArray1[3] = 0.5;
      doubleArray1[5] = (double) 7;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?6", "?6", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-2.147483648E9));
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("xG7/+>DK", "xG7/+>DK", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'columnKeys' argument.", 302, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeries0.removeChangeListener(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      MockDate mockDate0 = new MockDate(60, 60, 60, 1800, 60);
      Month month0 = new Month(mockDate0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2226.4305701526), 100.0, 60, month0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(14);
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 14;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(xYDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 33);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.event.SeriesChangeEvent", (OHLCDataItem[]) null);
      DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      double[][] doubleArray0 = new double[15][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 9999;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 2047.46;
      doubleArray1[2] = 634.80198250518;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 634.80198250518;
      doubleArray2[1] = 2047.46;
      doubleArray2[2] = 2047.46;
      doubleArray2[3] = 634.80198250518;
      doubleArray2[4] = 1324.600974439828;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1324.600974439828;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 1324.600974439828;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Year year0 = new Year();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      xYSeries0.getItems();
      xYSeries0.add((Number) integer0, (Number) 9999);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = null;
      try {
        defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      DatasetUtilities.iterateRangeBounds((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Week week0 = new Week();
      MatrixSeries matrixSeries0 = new MatrixSeries("k| Z", 1, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Week week0 = new Week((-2146669172), (-2146669172));
      XYSeries xYSeries0 = new XYSeries(week0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.removeSeries(xYSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeries0.add((Number) 53, (Number) 1);
      xYSeries0.getItems();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      xYSeriesCollection0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate(2128, 53, 53, (-2146669172), 1932735283);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 1, (Number) 1, (Comparable) week0, (Comparable) week0);
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]es]l[]%rm|rA/d:", "]es]l[]%rm|rA/d:", doubleArray0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) "]es]l[]%rm|rA/d:", (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      double[][] doubleArray0 = new double[11][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X", "361{\"9|PHb4 A:\"|X", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 0);
      defaultCategoryDataset0.setValue((-1.0), (Comparable) "361{\"9|PHb4 A:\"|X", (Comparable) "361{\"9|PHb4 A:\"|X");
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "361{\"9|PHb4 A:\"|X", 2.0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "361{\"9|PHb4 A:\"|X", 2.0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[4] = (-2313.55);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2313.55);
      doubleArray2[0] = (-2313.55);
      doubleArray2[2] = (-3115.2821);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-3115.2821);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-9998.750550256787);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("?", "?", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      Day day0 = new Day();
      Year year0 = new Year();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) year0, 1020.0);
      DatasetUtilities.createCategoryDataset((Comparable) (-2313.55), (KeyedValues) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, false);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(47, 1204, 0, (-3228), 0, 1204);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1204;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = (double) 1204;
      doubleArray0[4] = (double) 52;
      doubleArray0[5] = (double) 52;
      doubleArray0[6] = (double) 52;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1204;
      doubleArray1[2] = (double) 52;
      doubleArray1[3] = (double) 1204;
      doubleArray1[4] = (double) 52;
      doubleArray1[5] = (double) (-3228);
      doubleArray1[6] = (double) (-3228);
      doubleArray1[7] = (double) 47;
      doubleArray1[8] = (double) (-3228);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, false);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.event.SeriesChangeEvent", "org.jfree.data.event.SeriesChangeEvent", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2202.8);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 9999);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree.data.event.SeriesChangeEvent", 2202.8);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (Number) 1);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (-9998.750550256787);
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-9998.750550256787);
      doubleArray1[5] = (double) 53;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (-1057.063);
      doubleArray1[8] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1057.063);
      doubleArray3[1] = (-1057.063);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("f", "f", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      Day day0 = new Day();
      Year year0 = new Year();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-1057.063), (double) 0);
      Second second0 = new Second((-2336), 4379, 53, (-2336), 34, 37);
      DatasetUtilities.createCategoryDataset((Comparable) second0, (KeyedValues) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1252.62, 1252.62, "");
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("@x&<l|rl");
      timePeriodValues0.setDomainDescription("@x&<l|rl");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7, 7);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Integer integer0 = new Integer(7);
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[2][3];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2291.29489351503);
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-2291.29489351503);
      doubleArray3[1] = (-771.49781932);
      doubleArray3[2] = (-2291.29489351503);
      doubleArray3[3] = (-2291.29489351503);
      doubleArray1[1] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Negative 'maximum' argument.", "Negative 'maximum' argument.", doubleArray1);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-2291.29489351503), (-2291.29489351503), 0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-2291.29489351503), (-771.49781932));
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      Number[][] numberArray0 = new Number[5][4];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) (-2291.29489351503);
      numberArray1[1] = (Number) (-771.49781932);
      numberArray1[2] = (Number) (-2291.29489351503);
      numberArray1[3] = (Number) (-2291.29489351503);
      numberArray1[4] = (Number) (-2291.29489351503);
      numberArray1[5] = (Number) (-2291.29489351503);
      numberArray1[6] = (Number) (-2291.29489351503);
      numberArray1[7] = (Number) (-2291.29489351503);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) (-2291.29489351503);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) (-771.49781932);
      numberArray3[1] = (Number) (-771.49781932);
      numberArray3[2] = (Number) (-771.49781932);
      numberArray3[3] = (Number) (-2291.29489351503);
      numberArray3[4] = (Number) (-771.49781932);
      numberArray3[5] = (Number) (-2291.29489351503);
      numberArray3[6] = (Number) (-2291.29489351503);
      numberArray3[7] = (Number) (-2291.29489351503);
      numberArray3[8] = (Number) (-2291.29489351503);
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      numberArray4[0] = (Number) (-2291.29489351503);
      numberArray4[1] = (Number) (-2291.29489351503);
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      numberArray5[0] = (Number) (-771.49781932);
      numberArray5[1] = (Number) (-2291.29489351503);
      numberArray5[2] = (Number) (-2291.29489351503);
      numberArray5[3] = (Number) (-2291.29489351503);
      numberArray5[4] = (Number) (-2291.29489351503);
      numberArray5[5] = (Number) (-2291.29489351503);
      numberArray0[4] = numberArray5;
      DatasetUtilities.createCategoryDataset("BD.ulRCUk,o", "Untitled", numberArray0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1946, 1946);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2344L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[17];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, oHLCDataItemArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      vector0.add(locale_FilteringMode0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) vector0, range0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      jDBCXYDataset0.clone();
      int int0 = 47;
      timeSeriesCollection0.getEndYValue(47, 47);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(22, (-1292));
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, false);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 76, 29);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", doubleArray0);
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'start' < 'end'.", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1942, 1942);
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, false);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      LinkedHashSet<DefaultHighLowDataset> linkedHashSet0 = new LinkedHashSet<DefaultHighLowDataset>();
      linkedHashSet0.add(defaultHighLowDataset0);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>(linkedHashSet0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 53, 53, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[3] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[19];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0[0], doubleArray1, doubleArray0[0], doubleArray1, doubleArray0[0]);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0[0]);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4, 52, 52, date0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = new Range(4, 52);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Week week0 = new Week();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (-85.449075142);
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 53;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      boolean boolean0 = false;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Object[][][] objectArray0 = new Object[3][0][3];
      Object[][] objectArray1 = new Object[9][4];
      objectArray1[0] = (Object[]) doubleArray0;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray1[2] = (Object[]) doubleArray0;
      objectArray1[3] = (Object[]) doubleArray0;
      objectArray1[4] = (Object[]) doubleArray0;
      Object[] objectArray2 = new Object[0];
      objectArray1[5] = objectArray2;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray1[7] = (Object[]) doubleArray0;
      objectArray1[8] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray3 = new Object[0][7];
      objectArray0[1] = objectArray3;
      Object[][] objectArray4 = new Object[1][0];
      objectArray4[0] = (Object[]) doubleArray0;
      objectArray0[2] = objectArray4;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) list0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      mockGregorianCalendar0.getTimeZone();
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, false);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) list0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0, (String) null);
      double double0 = (-3065.5679369);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, double0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7, 7);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Integer integer0 = new Integer(7);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(7, (-343.657928073259));
      int int0 = 82;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-343.657928073259), (-301.42627751911647), 82, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "Period:", "?6");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      int int1 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "Null 'columnKeys' argument.", 1301, (-135), 82, 1301, (-1050), 22, (-135), 1170);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int1, simpleTimeZone0);
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, range0, boolean0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("$IU}`#Ja3Q?E%b", "$IU}`#Ja3Q?E%b", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-32));
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[8];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("@x&<l|rl");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1863, 40, 40, (-393), 1863, 1565);
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-393);
      doubleArray0[1] = (double) (-393);
      doubleArray0[2] = (double) 40;
      doubleArray0[3] = (double) (-393);
      doubleArray0[4] = (double) (-393);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("@x&<l|rl", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Null 'rowKey' argument.", "Null 'rowKey' argument.");
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (-9999);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) (-9999);
      doubleArray3[1] = (double) (-9999);
      doubleArray3[2] = (double) 9999;
      doubleArray3[3] = (double) (-9999);
      doubleArray3[4] = (double) 9999;
      doubleArray3[5] = (double) 9999;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, list0, true);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 4);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, range0, false);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MatrixSeries matrixSeries0 = new MatrixSeries("KwY9?", 15, 31);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection1);
      Object[][][] objectArray0 = new Object[1][4][1];
      Object[][] objectArray1 = new Object[7][3];
      objectArray1[0] = (Object[]) doubleArray0;
      Object[] objectArray2 = new Object[4];
      objectArray2[0] = (Object) matrixSeriesCollection1;
      objectArray2[1] = (Object) matrixSeriesCollection1;
      objectArray2[2] = (Object) range0;
      objectArray2[3] = (Object) matrixSeriesCollection0;
      objectArray1[1] = objectArray2;
      objectArray1[2] = (Object[]) doubleArray0;
      objectArray1[3] = (Object[]) doubleArray0;
      objectArray1[4] = (Object[]) doubleArray0;
      objectArray1[5] = (Object[]) doubleArray0;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      boolean boolean0 = false;
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]2qo=B4v,3!", "]2qo=B4v,3!", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 798.541352042743);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2042));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "]2qo=B4v,3!", (double) (-2042));
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Null 'rowKey' argument.", "Null 'rowKey' argument.");
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-9999);
      doubleArray2[1] = (double) (-9999);
      doubleArray2[2] = (double) 9999;
      doubleArray2[3] = (double) (-9999);
      doubleArray2[4] = (double) 9999;
      doubleArray2[5] = (double) 9999;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "361{\"9|PHb4 A:\"|X2";
      stringArray0[1] = "Null 'rowKey' argument.";
      stringArray0[2] = "Null 'rowKey' argument.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 9999);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      double[][] doubleArray0 = new double[12][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 59);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      arrayList0.add(locale_FilteringMode0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(locale_FilteringMode0);
      Range range0 = new Range(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      Range.shift(range0, (double) (-9999));
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Year year0 = new Year();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(year0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Range.shift(range0, 1816.0);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(arrayList0, locale_FilteringMode0, locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 439.977684;
      doubleArray0[3] = (-2086.481974);
      doubleArray0[4] = (-1500.637058264065);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Year year0 = new Year();
      Week week0 = new Week((-619), year0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.146669172E9), 1.0, 578, week0);
      DatasetUtilities.iterateXYRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(locale_FilteringMode0);
      Range range0 = new Range(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Date[] dateArray0 = new Date[19];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-566.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]2qo=B4v,3!", "]2qo=B4v,3!", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={J*D=#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 85;
      doubleArray1[1] = (double) 85;
      doubleArray1[2] = (double) 85;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 85;
      doubleArray2[1] = (double) 85;
      doubleArray2[2] = (double) 85;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 85;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 85;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 85;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 6.283185307179586;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 85;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("aa", 1, 1);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 2133.79;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = 2.0;
      doubleArray1[8] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 2133.79;
      doubleArray2[5] = 2133.79;
      doubleArray2[6] = 2133.79;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = 2133.79;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2133.79;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = (double) 1;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aa", "Requires 'start' < 'end'.", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      MockDate mockDate0 = new MockDate((-286), (-1254), (-1045), 471, 16);
      Year year0 = new Year(mockDate0);
      Week week0 = new Week((-286), year0);
      defaultKeyedValuesDataset0.setValue((Comparable) week0, (Number) 53);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.6938310818, 1.0);
      Day day0 = new Day();
      Hour hour0 = new Hour(2, day0);
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-3891.5798308475514), 1.6938310818, 2, hour0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) list0, range0, false);
      ArrayList<DynamicTimeSeriesCollection> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<DynamicTimeSeriesCollection>();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 21;
      doubleArray1[1] = (double) 21;
      doubleArray1[2] = (double) 21;
      doubleArray1[3] = (double) 21;
      doubleArray1[4] = (double) 21;
      doubleArray1[5] = (double) 21;
      doubleArray1[6] = (double) 21;
      doubleArray1[7] = (double) 21;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0, 1348.75416079, 53, date0);
      List list0 = xYSeries0.getItems();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultHighLowDataset0.removeChangeListener(xYDatasetTableModel0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, list0, true);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("aa", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[6] = 154.2314991;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-9999.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[1] = 5065.232762819;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getColumnIndex(5065.232762819);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "{:qw");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1));
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "{:qw");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 22);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 41);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("361{\"9|PHb4 A:\"|X53", (String) null, numberArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) null);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      arrayList0.add(locale_FilteringMode0);
      MockDate mockDate0 = new MockDate((-1637), (-1508), (-1637));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(421, "`0[");
      MockDate mockDate1 = new MockDate(420, 894, 894, (-3079), (-1637), (-1088));
      mockDate1.getTime();
      Quarter quarter0 = new Quarter(mockDate1, simpleTimeZone0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(420, (-1088), quarter0, simpleTimeZone0);
      simpleTimeZone0.getOffset((long) 0);
      Instant instant0 = MockInstant.now();
      Date.from(instant0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumDomainValue((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      defaultOHLCDataset0.clone();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2096, 2096);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) locale_FilteringMode0, (Comparable) locale_FilteringMode0);
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1946, 1946);
      boolean boolean0 = true;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
      XYDatasetTableModel xYDatasetTableModel0 = null;
      try {
        xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Year year0 = new Year();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(year0);
      year0.previous();
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      double[][] doubleArray0 = new double[15][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 9999;
      doubleArray0[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) (-9999));
      timePeriodValue0.clone();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      timePeriodValues0.add(timePeriodValue0);
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      timePeriodValues0.removePropertyChangeListener(synthProgressBarUI0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4, 4);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[19];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4, 52, 52, date0);
      List list0 = xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, false);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[19];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0[0], doubleArray1, doubleArray0[0], doubleArray1, doubleArray0[0]);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0[0]);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4, 52, 52, date0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = new Range(4, 52);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, false);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-339.12330557);
      doubleArray1[1] = (-4472.156482819089);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-339.12330557);
      doubleArray2[1] = (-339.12330557);
      doubleArray2[2] = (-339.12330557);
      doubleArray2[3] = (-4472.156482819089);
      doubleArray2[4] = (-339.12330557);
      doubleArray2[5] = (-339.12330557);
      doubleArray2[6] = (-339.12330557);
      doubleArray2[7] = (-4472.156482819089);
      doubleArray2[8] = (-2492.8890311029);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-4472.156482819089);
      doubleArray3[1] = (-4472.156482819089);
      doubleArray3[2] = (-2492.8890311029);
      doubleArray3[4] = (-4472.156482819089);
      doubleArray3[5] = (-2492.8890311029);
      doubleArray3[6] = (-2492.8890311029);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1946, 1946);
      dynamicTimeSeriesCollection0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      arrayList0.spliterator();
      defaultBoxAndWhiskerCategoryDataset0.add((List) list0, (Comparable) locale_FilteringMode0, (Comparable) locale_FilteringMode0);
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = (-2.147483648E9);
      doubleArray1[2] = (-480.720699851);
      doubleArray1[3] = (-0.5);
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1890.0;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-3109.9214);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-3109.9214);
      doubleArray2[1] = (-0.5);
      doubleArray2[2] = (-480.720699851);
      doubleArray2[3] = 1890.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 1348.75416079, 53, date0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      Range.expandToInclude(range1, 1348.75416079);
      Stack<JDBCXYDataset> stack0 = new Stack<JDBCXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("QG", "QG", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4, 4);
      MockDate mockDate0 = new MockDate();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0[0], doubleArray1, doubleArray0[0], doubleArray1, doubleArray0[0]);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0[0]);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4, 52, 52, dateArray0[1]);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4, 4, 4);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      mockGregorianCalendar0.getWeeksInWeekYear();
      Date[] dateArray0 = new Date[19];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4, 52, 52, date0);
      xYSeries0.getItems();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0, "", "");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.isWeekDateSupported();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      defaultHighLowDataset0.clearSelection();
      Number[][] numberArray0 = new Number[0][7];
      DatasetUtilities.createCategoryDataset("u;C.~Hl[v", "u;C.~Hl[v", numberArray0);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((float) 7);
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      arrayList0.add(locale_FilteringMode0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(locale_FilteringMode0);
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "Gk");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(4127.316998178661, 4127.316998178661, "?3");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 4127.316998178661);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-0.7314686884014654), (-0.7314686884014654), "Y*p#.-033B01");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-0.7314686884014654));
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 52.0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 1397.4037974192, "Nullw'visibleSeriesKMysD argument.");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 52.0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3885.994250428), (-3885.994250428), "JL]");
      Range range0 = new Range((-3885.994250428), (-3885.994250428));
      Range.expand(range0, 2181.3047935, 3414.2715);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Year year0 = new Year();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-3885.994250428), (-3885.994250428), "Null 'visibleSeriesKeys' arguent.");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Range range1 = Range.combine(range0, range0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range1, boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "{:qw");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1345.3);
      doubleArray0[2] = (-1415.4727017942);
      doubleArray0[3] = 3050.20269;
      doubleArray0[4] = 890.346956532255;
      doubleArray0[5] = (-2269.50688923962);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(locale_FilteringMode0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1415.4727017942), 0.0, 11, 3050.20269);
      XYSeries xYSeries0 = new XYSeries(0.0);
      List list0 = xYSeries0.getItems();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset1.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) list0, range0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float((float) 7);
      stack0.add(float0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      histogramDataset0.indexOf(float0);
      DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) (-1));
      DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.8699455019547521, 0.8699455019547521, "x[!2@s<AHs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 1247.86278);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) linkedList0, false);
      DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 13);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 13;
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = 1974.3450123;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (-661.29998);
      doubleArray1[7] = (double) 13;
      doubleArray0[0] = doubleArray1;
      MatrixSeries matrixSeries0 = new MatrixSeries("361{\"9|PHb4 A:\"|X", 13, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(false);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-661.29998));
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[2];
      DatasetUtilities.createCategoryDataset("UQG", "UQG", doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(3961.108474201, (-410.2680964541434), "UQG");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 3961.108474201);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)5085);
      stack0.add(short0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Year year0 = new Year();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(2997.60655663, 2997.60655663, "Null 'visibleSeriesKeys' arguent.");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Range.combine(range0, range0);
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultKeyedValuesDataset0.setValue((Comparable) regularTimePeriod0, (-1633.0401));
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      defaultIntervalCategoryDataset0.hasListener(categoryTableXYDataset0);
      categoryTableXYDataset0.add(1.0, 1294.526389963129, "$-Tc,*hiT&");
      categoryTableXYDataset0.add((-1058.5), Double.POSITIVE_INFINITY, "361{\"9|PHb4 A:\"|X52");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1058.5));
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2593);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y=_{J*D=M#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "Y=_{J*D=M#'1");
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "Y=_{J*D=M#'1", (-3886.741927453902));
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "I6x[!2@s<A!Hs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.add(0.0, 0.0, "I6x[!2@s<A!Hs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      linkedList0.add((XYIntervalSeriesCollection) null);
      linkedList0.add((XYIntervalSeriesCollection) null);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-2791.931578166);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-1182.965907024008);
      doubleArray1[5] = (-3565.3624047538565);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-1182.965907024008);
      doubleArray2[3] = (-3565.3624047538565);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-3565.3624047538565);
      doubleArray2[6] = (-1182.965907024008);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y=={J*D=M#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-5646.53);
      doubleArray1[4] = 200.0;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = (-1034.69800065);
      doubleArray1[7] = 1.0;
      doubleArray1[8] = 2870.387385649;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z'H@T48O&:`qW^%,l@", "361{\"9|PHb4 A:\"|X57", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "x[!2@s<AHs^1W+=";
      categoryTableXYDataset0.add(0.8699455019547521, 0.8699455019547521, "x[!2@s<AHs^1W+=");
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      linkedList0.add((XYIntervalSeriesCollection) null);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Connection connection0 = null;
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, string0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={J*D=#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={^D='1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={^D='1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={J*D=#'1", 85, 85);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Y={^D='1", 85, 85);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "Y={^D='1");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }
}
