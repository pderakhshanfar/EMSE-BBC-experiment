/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 20:36:24 GMT 2020
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.MultipleGradientPaint;
import java.awt.event.KeyListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryDatasetSelectionState;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.pie.PieDatasetSelectionState;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("d6h>gE|Iqiz^T!@", 1, 1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1);
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-195.0);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[4] = (-2658.9785234);
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-195.0);
      doubleArray3[1] = (-2.147483648E9);
      doubleArray3[2] = (-2658.9785234);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-4352.802);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-2.147483648E9);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (-195.0);
      doubleArray4[4] = (-4352.802);
      doubleArray4[5] = (-4352.802);
      doubleArray4[6] = (-195.0);
      doubleArray4[7] = (-4352.802);
      doubleArray4[8] = 1500.28975634434;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("^;f6,05iMx5");
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-140.76258346008));
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-140.76258346008), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.add((-563.6650535003273), (-563.6650535003273), false);
      assertEquals((-563.6650535003273), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-563.6650535003273), xYSeries0.getMinX(), 0.01);
      assertEquals((-563.6650535003273), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-563.6650535003273), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals((-563.6650535003273), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-563.6650535003273), xYSeries0.getMinX(), 0.01);
      assertEquals((-563.6650535003273), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-563.6650535003273), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-563.6650535003273), range0.getLowerBound(), 0.01);
      assertEquals((-563.6650535003273), range0.getUpperBound(), 0.01);
      assertEquals((-563.6650535003273), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals((-563.6650535003273), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-563.6650535003273), xYSeries0.getMinX(), 0.01);
      assertEquals((-563.6650535003273), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-563.6650535003273), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-563.6650535003273), range1.getUpperBound(), 0.01);
      assertEquals((-563.6650535003273), range1.getCentralValue(), 0.01);
      assertEquals((-563.6650535003273), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(2055.68066, 572.0, (Comparable) byte0, (Comparable) byte0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-1)));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-1)));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1483.68066, range1.getLowerBound(), 0.01);
      assertEquals(2055.68066, range1.getCentralValue(), 0.01);
      assertEquals(1144.0, range1.getLength(), 0.01);
      assertEquals(2627.68066, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((byte) (-1)));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(2055.68066, range2.getCentralValue(), 0.01);
      assertEquals(1483.68066, range2.getLowerBound(), 0.01);
      assertEquals(1144.0, range2.getLength(), 0.01);
      assertEquals(2627.68066, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(0.0, 318.25074331, (Comparable) byte0, (Comparable) byte0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(636.50148662, range1.getLength(), 0.01);
      assertEquals((-318.25074331), range1.getLowerBound(), 0.01);
      assertEquals(318.25074331, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(arrayList0.contains(byte0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(318.25074331, range2.getUpperBound(), 0.01);
      assertEquals((-318.25074331), range2.getLowerBound(), 0.01);
      assertEquals(636.50148662, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add(4206.05, 4206.05, (Comparable) byte0, (Comparable) byte0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-1)));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(8412.1, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(4206.05, range1.getCentralValue(), 0.01);
      assertEquals(8412.1, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((byte) (-1)));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(8412.1, range2.getUpperBound(), 0.01);
      assertEquals(4206.05, range2.getCentralValue(), 0.01);
      assertEquals(8412.1, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Class<YIntervalSeriesCollection> class0 = YIntervalSeriesCollection.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertFalse(class1.isInterface());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Range range0 = new Range((-411.70069608302424), 2023.390423);
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Short short0 = new Short((short)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[10]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(short0));
      
      Range range1 = Range.shift(range0, (-2.147483648E9), true);
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertEquals((-2.147484059700696E9), range1.getLowerBound(), 0.01);
      assertEquals((-2.147481624609577E9), range1.getUpperBound(), 0.01);
      assertEquals(2435.0911190509796, range1.getLength(), 0.01);
      assertEquals((-2.1474828421551366E9), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range3);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Short short0 = new Short((short)842);
      assertNotNull(short0);
      assertEquals((short)842, (short)short0);
      
      Short short1 = stack0.push(short0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[842]", stack0.toString());
      assertNotNull(short1);
      assertEquals((short)842, (short)short1);
      assertTrue(stack0.contains(short1));
      
      Short short2 = new Short((short)842);
      assertNotNull(short2);
      assertEquals((short)842, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      boolean boolean0 = stack0.add(short2);
      assertEquals("[842, 842]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains((short)842));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Range range0 = new Range((-411.70069608302424), 0.0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-205.85034804151212), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals(411.70069608302424, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Short short3 = new Short((short)4);
      assertNotNull(short3);
      assertEquals((short)4, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      assertFalse(stack1.contains((short)842));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(short3);
      assertEquals("[4]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertNotSame(stack1, stack0);
      assertTrue(boolean1);
      assertFalse(stack1.contains((short)842));
      assertTrue(stack1.contains((short)4));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      Range range1 = Range.shift(range0, (double) (short)4, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-205.85034804151212), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals(411.70069608302424, range0.getLength(), 0.01);
      assertEquals(411.70069608302424, range1.getLength(), 0.01);
      assertEquals((-407.70069608302424), range1.getLowerBound(), 0.01);
      assertEquals((-201.85034804151212), range1.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(305, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=305,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(305, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 305);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(305.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(doubleArray0);
      
      xYSeries0.add((-1.0), (-282.864), true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-282.864), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-282.864), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      
      xYSeries0.setKey(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-282.864), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-282.864), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      
      Range range0 = new Range((-1541.292052), (-526.173957192));
      assertEquals(1015.118094808, range0.getLength(), 0.01);
      assertEquals((-1033.733004596), range0.getCentralValue(), 0.01);
      assertEquals((-526.173957192), range0.getUpperBound(), 0.01);
      assertEquals((-1541.292052), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-282.864), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-282.864), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-0.5), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 618.75, 2077.3579, 2077.3579, 2077.3579, 618.75);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-710.07341552749), (-1099.6460497444), 1123.6273253111035, 1939.771175237, 1.5);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-710.07341552749), 4269.4736370185, 1939.771175237, 1.0, 1.5);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date1 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      assertNotNull(date1);
      assertNotSame(date1, date0);
      assertFalse(date1.equals((Object)date0));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date1, 0.8, 1939.771175237, 979.0, 1.0, 4269.4736370185);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(date1.equals((Object)date0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(3, 3);
      assertEquals(3, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, true);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 605.232142;
      doubleArray1[1] = 1032.092061556;
      doubleArray1[2] = (-665.5364971544);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-291.137917783);
      doubleArray1[5] = 0.5;
      doubleArray1[6] = 111.8461;
      doubleArray1[7] = 2892.2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-665.5364971544);
      doubleArray3[1] = 0.5;
      doubleArray3[2] = 605.232142;
      doubleArray3[3] = 0.5;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][1][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("PieDatasetChangeType.ADD_AND_REMOVE", 7, 7);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(6.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-660.511459);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 2866.5001232543;
      doubleArray1[3] = 988.49805;
      doubleArray1[4] = (-2682.0);
      doubleArray1[5] = 988.49805;
      doubleArray1[6] = (-1940.25671);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 988.49805;
      doubleArray2[1] = (-2682.0);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1958.24813361214);
      doubleArray3[1] = 2866.5001232543;
      doubleArray3[2] = (-2682.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-411.70069608302424));
      assertNotNull(double0);
      assertEquals((-411.70069608302424), (double)double0, 0.01);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-411.70069608302424);
      doubleArray1[1] = (-411.70069608302424);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-411.70069608302424);
      doubleArray2[1] = (-411.70069608302424);
      doubleArray2[2] = (-411.70069608302424);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-4073));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-4073), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-4073), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      assertFalse(arrayList0.contains(0));
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-411.70069608302424), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-411.70069608302424), range1.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("d6h>gE|Iqiz^T!@", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = 2136.115982700606;
      Range range0 = new Range(2136.115982700606, 2136.115982700606);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2136.115982700606, range0.getLowerBound(), 0.01);
      assertEquals(2136.115982700606, range0.getUpperBound(), 0.01);
      assertEquals(2136.115982700606, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      double double1 = defaultTableXYDataset0.getDomainLowerBound(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(2139494972, 2139494972, 2139494972);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2077.3579, 1345.914628432, (-227.3), 1345.914628432, 1345.914628432);
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1837.2988513867), Double.POSITIVE_INFINITY, (-1837.2988513867), 2.0, (-104.064344));
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-654.613835917707), Double.POSITIVE_INFINITY, (-654.613835917707));
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1.5, 991.13960085793, 2139494972, Double.NEGATIVE_INFINITY, 1234.0);
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-1837.2988513867), (-227.3), 2127.8, (-1.0), (-139.37092563));
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem4;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem3, oHLCDataItemArray0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals((-6.8700071558473452E18), range0.getUpperBound(), 0.01);
      assertEquals((-6.8700071558473452E18), range0.getCentralValue(), 0.01);
      assertEquals((-6.8700071558473452E18), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Dec 05 19:17:34 GMT 217695422", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(range0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem4);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(274, "^;f6,05iMx5");
      assertEquals("^;f6,05iMx5", simpleTimeZone0.getID());
      assertEquals(274, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=^;f6,05iMx5,offset=274,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      XYSeries xYSeries0 = new XYSeries("^;f6,05iMx5");
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 274);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.add((double) 274, 1143.57037196787, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      Range range0 = new Range(1143.57037196787, 1143.57037196787);
      assertEquals(1143.57037196787, range0.getLowerBound(), 0.01);
      assertEquals(1143.57037196787, range0.getUpperBound(), 0.01);
      assertEquals(1143.57037196787, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1143.57037196787, range1.getUpperBound(), 0.01);
      assertEquals(1143.57037196787, range1.getCentralValue(), 0.01);
      assertEquals(1143.57037196787, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2000);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(2000, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertNotNull(spreadsheetDate0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(2000, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1, 7, 2000, 1579.30802, Double.NaN);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(2000, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      MockDate mockDate0 = new MockDate(2670, 3, (-1));
      assertNotNull(mockDate0);
      
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = date0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = Double.NaN;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(6, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(22, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getMonth());
      assertEquals(1905, spreadsheetDate0.getYYYY());
      assertEquals(2000, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("A5PX|g)h\"?", 1, 1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      XYSeries xYSeries0 = new XYSeries("A5PX|g)h\"?");
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      xYSeries0.add((double) 1, (double) 1, false);
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      
      Range range1 = new Range((-2.147483648E9), 9.0);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(2.147483657E9, range1.getLength(), 0.01);
      assertEquals(9.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.0737418195E9), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-4154.8));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-4154.8), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      xYSeries0.add((double) 23, (-834.75163604), true);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-834.75163604), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-834.75163604), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-834.75163604), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-834.75163604), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-4154.8), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-834.75163604), range0.getLowerBound(), 0.01);
      assertEquals((-834.75163604), range0.getUpperBound(), 0.01);
      assertEquals((-834.75163604), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0.0, number0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Range range1 = Range.expandToInclude(range0, (-2572.7461755));
      assertEquals(4, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1286.37308775), range1.getCentralValue(), 0.01);
      assertEquals(2572.7461755, range1.getLength(), 0.01);
      assertEquals((-2572.7461755), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertFalse(range1.equals((Object)range0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = Range.shift(range2, 0.0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertNotSame(range2, range3);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 23, 0);
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)84);
      assertNotNull(byte0);
      assertEquals((byte)84, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)84));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("DefaultIntervalCategoryDataset.setValue: series outside valid range.", "[B5n#Sku<", "]G8?()EeJ Dkot");
      assertEquals("]G8?()EeJ Dkot", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("[B5n#Sku<", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[1];
      Byte byte0 = new Byte((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      numberArray1[0] = (Number) byte0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(113.0, range1.getUpperBound(), 0.01);
      assertEquals(113.0, range1.getCentralValue(), 0.01);
      assertEquals(113.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate((-2475), (-2475), 1014, 866, 927, 927);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.8, 866, 971.0, 971.0, 5.22469778);
      assertEquals("Sat Aug 15 17:42:27 GMT 780", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("Sat Aug 15 17:42:27 GMT 780", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("Sat Aug 15 17:42:27 GMT 780", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("Sat Aug 15 17:42:27 GMT 780", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(866.0, number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("nyX[B0/{;", 14, 639);
      assertNull(matrixSeries0.getDescription());
      assertEquals(639, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8946, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(639, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8946, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      matrixSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(639, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8946, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      System.setCurrentTimeMillis((-3055L));
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(639, matrixSeries0.getColumnsCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8946, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(638.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 821.575281642, 669.4442, 669.4442, 1732.137, 821.575281642);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2173.189734509), 3293.3554119051, 979.0, (-101.11798827369749), 817.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 3293.3554119051, 0.0, (-101.11798827369749), Double.NEGATIVE_INFINITY, 821.575281642);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Vector<Quarter> vector0 = new Vector<Quarter>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, false);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3394.4734001787974, range1.getLength(), 0.01);
      assertEquals(3293.3554119051, range1.getUpperBound(), 0.01);
      assertEquals((-101.11798827369749), range1.getLowerBound(), 0.01);
      assertEquals(1596.1187118157013, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("0CfeB=G", 14, 1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getItemCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getItemCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getItemCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(13.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(14, matrixSeries0.getItemCount());
      assertEquals(14, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) mockDate0, (-1041.41425));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      jDBCPieDataset0.clearSelection();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 2.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(boolean0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1341.858207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 13, 13);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(12.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(12.0, range0.getUpperBound(), 0.01);
      assertEquals(6.0, range0.getCentralValue(), 0.01);
      assertEquals(12.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-983));
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(12.0, range1.getUpperBound(), 0.01);
      assertEquals(6.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(12.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range1, true);
      assertEquals(13, matrixSeries0.getColumnsCount());
      assertEquals(169, matrixSeries0.getItemCount());
      assertEquals(13, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(12.0, range1.getUpperBound(), 0.01);
      assertEquals(6.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(12.0, range1.getLength(), 0.01);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range2);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-43)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-449.668826);
      doubleArray2[1] = (-1739.4668398);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1739.4668398);
      doubleArray3[1] = (-449.668826);
      doubleArray3[2] = (-1739.4668398);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-449.668826);
      doubleArray4[1] = (-1739.4668398);
      doubleArray4[2] = (-449.668826);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-449.668826);
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-449.668826);
      doubleArray6[3] = (-449.668826);
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-449.668826);
      doubleArray7[4] = (-1.0);
      doubleArray7[5] = 0.0;
      doubleArray7[6] = (-449.668826);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = (-1.0);
      doubleArray8[4] = (-1739.4668398);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = (-1.0);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-449.668826);
      doubleArray9[3] = (-1.0);
      doubleArray9[4] = Double.NEGATIVE_INFINITY;
      doubleArray9[5] = (-1.0);
      doubleArray9[6] = 0.0;
      doubleArray9[7] = (-1739.4668398);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      assertFalse(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, 1.5);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Object object0 = jDBCPieDataset0.clone();
      assertNotNull(object0);
      assertNotSame(jDBCPieDataset0, object0);
      assertNotSame(object0, jDBCPieDataset0);
      assertTrue(object0.equals((Object)jDBCPieDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, 1.5, 0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
      assertNotSame(jDBCPieDataset0, object0);
      assertTrue(jDBCPieDataset0.equals((Object)object0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertNotSame(jDBCPieDataset0, object0);
      assertEquals(1.5, double0, 0.01);
      assertTrue(jDBCPieDataset0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(84.0);
      assertNotNull(double0);
      assertEquals(84.0, (double)double0, 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Double double1 = new Double(84.0);
      assertNotNull(double1);
      assertEquals(84.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      jDBCPieDataset0.setValue((Comparable) double1, (Number) null);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      MockDate mockDate0 = new MockDate(866, 866, 866, 1547, 858);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Sun Sep 16 01:18:00 GMT 2840", mockDate0.toString());
      assertEquals(27476932680000L, day0.getLastMillisecond());
      assertEquals(27476932680000L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertEquals("Sun Sep 16 01:18:00 GMT 2840", mockDate0.toString());
      assertEquals(27476932680000L, day0.getLastMillisecond());
      assertEquals(27476932680000L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotNull(regularTimePeriod0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (Number) null);
      assertEquals("Sun Sep 16 01:18:00 GMT 2840", mockDate0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) regularTimePeriod0, (Number) integer0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertNotNull(categoryDataset0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Float>) regularTimePeriod0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Object[][][] objectArray0 = new Object[4][2][8];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[3] = (Object[][]) numberArray0;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 362);
      assertEquals(1, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(362, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 2.0056289419238906, (-4627));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 362, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)84);
      assertNotNull(byte0);
      assertEquals((byte)84, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYSeries xYSeries0 = new XYSeries("^;f6,05iMx5");
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 274);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.add((double) 274, 1143.57037196787, true);
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1143.57037196787, range0.getUpperBound(), 0.01);
      assertEquals(1143.57037196787, range0.getCentralValue(), 0.01);
      assertEquals(1143.57037196787, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(137.0, range1.getLowerBound(), 0.01);
      assertEquals(274.0, range1.getCentralValue(), 0.01);
      assertEquals(274.0, range1.getLength(), 0.01);
      assertEquals(411.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1143.57037196787, range2.getUpperBound(), 0.01);
      assertEquals(1143.57037196787, range2.getLowerBound(), 0.01);
      assertEquals(1143.57037196787, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      xYSeries0.add((double) 23, 314.552336055, true);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(314.552336055, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(314.552336055, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(314.552336055, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(314.552336055, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(314.552336055, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(314.552336055, range0.getUpperBound(), 0.01);
      assertEquals(314.552336055, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 151;
      doubleArray1[1] = (double) (byte)21;
      doubleArray1[2] = (double) (byte)21;
      doubleArray1[3] = (double) (byte)21;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = (double) (byte)21;
      doubleArray1[6] = (double) (byte)21;
      doubleArray1[7] = (double) (byte)21;
      doubleArray1[8] = (double) (byte)21;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertNotNull(tableOrder1);
      assertNotSame(tableOrder1, tableOrder0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder1, (byte)21);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertEquals(21, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertNotNull(byte0);
      assertEquals((byte) (-25), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-25)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-25)));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte) (-1), (byte) (-1), (byte) (-1), 2077.3579, 2077.3579);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (byte) (-1), 0.8, 2077.3579, (-1059.01), 2077.3579);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 2077.3579, 0.8, (-1059.01), Double.NEGATIVE_INFINITY, 1143.57037196787);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 2127.8, 2077.3579, (-2173.189734509), 979.0, 1143.57037196787);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 2127.8, (-139.37092563), 5.22469778, (byte) (-1), Double.POSITIVE_INFINITY);
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-1)));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, false);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains((byte) (-1)));
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 9);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(9, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 151);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(151, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-411.70069608302424));
      assertNotNull(double0);
      assertEquals((-411.70069608302424), (double)double0, 0.01);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "N?QGupqJi$", "i}WRRP7c<ljd");
      assertTrue(timeSeries0.getNotify());
      assertEquals("i}WRRP7c<ljd", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("N?QGupqJi$", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("i}WRRP7c<ljd", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("N?QGupqJi$", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("N?QGupqJi$");
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(true);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
      assertTrue(timeSeries0.getNotify());
      assertEquals("i}WRRP7c<ljd", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("N?QGupqJi$", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Double double0 = new Double((-412.4024));
      assertNotNull(double0);
      assertEquals((-412.4024), (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) day0, (Number) double0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1118), 151);
      assertEquals(151, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1118), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = 16.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-1569.737997);
      doubleArray1[2] = (-2158.0);
      doubleArray1[5] = (-9.131459124469746);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1829.91494763;
      doubleArray2[1] = 3199.494;
      doubleArray2[2] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.828999328E13;
      doubleArray3[1] = 1829.91494763;
      doubleArray3[2] = (-772.15377903459);
      doubleArray3[3] = 979.0;
      doubleArray3[4] = (-2158.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, 1.5);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-2121.3050040750704));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2121.3050040750704), range1.getUpperBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getCentralValue(), 0.01);
      assertEquals((-2121.3050040750704), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte)2, (byte)2, (byte)2, (byte)2, (-915.3739584083));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2526.9814727235507), 2694.253264488488, (-1883.40107), 2694.253264488488, (-406.70103428262973));
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 435.46269632689, (-2526.9814727235507), (-1883.40107), (-915.3739584083), 1123.6273253111035);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, (-139.37092563), (byte)2, 0.8, 0.8);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem2;
      oHLCDataItemArray0[4] = oHLCDataItem3;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(range0);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertTrue(arrayList0.contains(byte0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1));
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, (byte) (-1), Double.NEGATIVE_INFINITY, 979.0, 1123.6273253111035);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, Double.NEGATIVE_INFINITY, (-139.37092563), 979.0, (byte) (-1), Double.NEGATIVE_INFINITY);
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      assertNotNull(byte0);
      assertEquals((byte) (-46), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(byte0, "DefaultIntervalCategoryDataset.setValue: series outside valid range.", "DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)71);
      assertNotNull(byte0);
      assertEquals((byte)71, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Minute> stack0 = new Stack<Minute>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-275.6300257426);
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-275.6300257426);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("A5PX|g)h\"?", "d63(.GnbQs1klWEB", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(Double.NEGATIVE_INFINITY, number1);
      assertFalse(number1.equals((Object)number0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultIntervalCategoryDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "'d9v^`I29k4FWxP p!u", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-426), (-426));
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-426), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-426), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Byte) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 9, 9);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(9, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries(",Lyh<\"qSeC7", 9, 16);
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(16, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(16, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(9, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2015), "", (-1696), (-1696), 2454, 2454, 36, 9, (-1696), 811, 39, 1048, 2114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1696
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-426), (-426));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-426), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-426), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-426), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-426), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = null;
      boolean boolean0 = linkedList0.offerFirst((DefaultTableXYDataset) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, list0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, Double.NEGATIVE_INFINITY);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, Double.NEGATIVE_INFINITY, 0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1604);
      assertNotNull(pieDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1604, 3404);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(3403, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      int int0 = (-1209);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, (double) (-1209), (-1209));
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[20][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertEquals(20, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 868);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Object[][][] objectArray0 = new Object[4][2][8];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      objectArray0[2] = (Object[][]) numberArray0;
      objectArray0[3] = (Object[][]) numberArray0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[][][] objectArray0 = new Object[4][2][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 0.0;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 362);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(362, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (-1137.747), (-18));
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(362, categoryToPieDataset0.getExtractIndex());
      assertNotNull(defaultPieDataset0);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(362, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Byte byte0 = new Byte((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Byte byte0 = new Byte((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("A5PX|g)h\"?", 1, 1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      MatrixSeries matrixSeries1 = new MatrixSeries("", 1, 1100);
      assertEquals(1100, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(1, matrixSeries1.getRowCount());
      assertNull(matrixSeries1.getDescription());
      assertEquals(1100, matrixSeries1.getColumnsCount());
      assertNotNull(matrixSeries1);
      assertFalse(matrixSeries1.equals((Object)matrixSeries0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = matrixSeries1.equals(xYSeriesCollection0);
      assertEquals(1100, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(1, matrixSeries1.getRowCount());
      assertNull(matrixSeries1.getDescription());
      assertEquals(1100, matrixSeries1.getColumnsCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotSame(matrixSeries1, matrixSeries0);
      assertFalse(boolean0);
      assertFalse(matrixSeries1.equals((Object)matrixSeries0));
      
      matrixSeries1.addChangeListener(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1100, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(1, matrixSeries1.getRowCount());
      assertNull(matrixSeries1.getDescription());
      assertEquals(1100, matrixSeries1.getColumnsCount());
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(matrixSeries1, matrixSeries0);
      assertFalse(matrixSeries0.equals((Object)matrixSeries1));
      assertFalse(matrixSeries1.equals((Object)matrixSeries0));
      
      matrixSeriesCollection0.addSeries(matrixSeries1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1100, matrixSeries1.getItemCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(1, matrixSeries1.getRowCount());
      assertNull(matrixSeries1.getDescription());
      assertEquals(1100, matrixSeries1.getColumnsCount());
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(matrixSeries1, matrixSeries0);
      assertFalse(matrixSeries0.equals((Object)matrixSeries1));
      assertFalse(matrixSeries1.equals((Object)matrixSeries0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertFalse(matrixSeries0.equals((Object)matrixSeries1));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1099.0, range1.getLength(), 0.01);
      assertEquals(1099.0, range1.getUpperBound(), 0.01);
      assertEquals(549.5, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(range1, range0);
      assertFalse(matrixSeries0.equals((Object)matrixSeries1));
      assertFalse(range1.equals((Object)range0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.0216966686E14));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      ArrayList<YIntervalSeriesCollection> arrayList1 = new ArrayList<YIntervalSeriesCollection>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Year year0 = new Year(2);
      assertEquals(2L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2", year0.toString());
      assertEquals(2, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-9999));
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(874, 74, year0, timeZone0);
      assertEquals(2L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2", year0.toString());
      assertEquals(2, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(73, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(2L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2", year0.toString());
      assertEquals(2, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(73, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 776.492542396767;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 776.492542396767;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 776.492542396767;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 140);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(double1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(0.0, (double)double1, 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)15));
      
      Byte byte1 = new Byte((byte)20);
      assertNotNull(byte1);
      assertEquals((byte)20, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte1));
      assertFalse(arrayList0.contains((byte)15));
      assertFalse(byte1.equals((Object)byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Byte byte0 = new Byte((byte)62);
      assertNotNull(byte0);
      assertEquals((byte)62, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Month month0 = new Month();
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, (-1222), (-9999), 14);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1222);
      doubleArray0[1] = (double) (-1222);
      doubleArray0[2] = (double) (-1222);
      doubleArray0[3] = (double) (-1222);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (-5654.704);
      doubleArray0[6] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1222.0), (-1222.0), (-1222.0), (-1222.0), 1.5, (-5654.704), 2.0}, doubleArray0, 0.01);
      assertEquals("Thu Sep 02 09:14:00 GMT 1897", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(3, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1222.0), (-1222.0), (-1222.0), (-1222.0), 1.5, (-5654.704), 2.0}, doubleArray0, 0.01);
      assertEquals("Thu Sep 02 09:14:00 GMT 1897", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-2.28248196E12), number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(3, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1222.0), (-1222.0), (-1222.0), (-1222.0), 1.5, (-5654.704), 2.0}, doubleArray0, 0.01);
      assertEquals((-1222.0), range0.getUpperBound(), 0.01);
      assertEquals((-1222.0), range0.getCentralValue(), 0.01);
      assertEquals((-1222.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Sep 02 09:14:00 GMT 1897", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 14);
      assertEquals(3, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1222.0), (-1222.0), (-1222.0), (-1222.0), 1.5, (-5654.704), 2.0}, doubleArray0, 0.01);
      assertEquals((-1222.0), range0.getUpperBound(), 0.01);
      assertEquals((-1222.0), range0.getCentralValue(), 0.01);
      assertEquals((-1222.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Sep 02 09:14:00 GMT 1897", mockDate0.toString());
      assertEquals(1236.0, range1.getLength(), 0.01);
      assertEquals((-604.0), range1.getCentralValue(), 0.01);
      assertEquals(14.0, range1.getUpperBound(), 0.01);
      assertEquals((-1222.0), range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, range0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1222.0), (-1222.0), (-1222.0), (-1222.0), 1.5, (-5654.704), 2.0}, doubleArray0, 0.01);
      assertEquals((-1222.0), range0.getUpperBound(), 0.01);
      assertEquals((-1222.0), range0.getCentralValue(), 0.01);
      assertEquals((-1222.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Thu Sep 02 09:14:00 GMT 1897", mockDate0.toString());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      
      double[][] doubleArray1 = new double[6][9];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 1.5;
      doubleArray2[3] = (double) (-1222);
      doubleArray2[4] = 1.5;
      doubleArray2[5] = (double) (-1222);
      doubleArray2[6] = 1.5;
      doubleArray2[7] = Double.NaN;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      Byte byte0 = new Byte((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 3705.8032741598454);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.8, 0.8);
      assertEquals(0.8, powerFunction2D0.getB(), 0.01);
      assertEquals(0.8, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.0216966686E14), 0.8, 1062, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.8, powerFunction2D0.getB(), 0.01);
      assertEquals(0.8, powerFunction2D0.getA(), 0.01);
      assertEquals(1062, xYSeries0.getItemCount());
      assertEquals(0.6671172163681672, xYSeries0.getMinY(), 0.01);
      assertEquals(0.796875, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.6671172163681672, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1.0216966686E14), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0216966686E14);
      doubleArray1[1] = (double) 1062;
      doubleArray1[2] = 0.8;
      doubleArray1[3] = (double) 1062;
      doubleArray1[4] = 0.8;
      doubleArray1[5] = (double) 1062;
      doubleArray1[6] = (-1069.502522796568);
      doubleArray1[7] = (-2195.99826121387);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0216966686E14);
      doubleArray2[1] = (-1069.502522796568);
      doubleArray2[2] = (double) 164;
      doubleArray2[3] = (-1069.502522796568);
      doubleArray2[4] = (-1069.502522796568);
      doubleArray2[5] = (double) 1062;
      doubleArray2[6] = (double) 1062;
      doubleArray2[7] = (-2195.99826121387);
      doubleArray2[8] = (-1.0216966686E14);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2.0433933372E14), range0.getLowerBound(), 0.01);
      assertEquals(2.04339333722124E14, range0.getLength(), 0.01);
      assertEquals(2124.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.02169666858938E14), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      byte[] byteArray0 = bigInteger0.toByteArray();
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, 1.5);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, 1.5, 0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(pieDataset0);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      Date[] dateArray0 = new Date[19];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(19, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = false;
      defaultHighLowDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(19, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2406.0;
      doubleArray1[3] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2406.0, range0.getUpperBound(), 0.01);
      assertEquals(1203.0, range0.getCentralValue(), 0.01);
      assertEquals(2406.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2406.0, range1.getUpperBound(), 0.01);
      assertEquals(1203.0, range1.getCentralValue(), 0.01);
      assertEquals(2406.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[1];
      Double double0 = new Double((-252.94785060616));
      assertNotNull(double0);
      assertEquals((-252.94785060616), (double)double0, 0.01);
      
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, keyToGroupMap0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-126.47392530308), range0.getCentralValue(), 0.01);
      assertEquals((-252.94785060616), range0.getLowerBound(), 0.01);
      assertEquals(252.94785060616, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-499.245005);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2042.0);
      doubleArray1[3] = 349.691;
      doubleArray1[4] = (-2568.635700853963);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 349.691;
      doubleArray2[2] = (-2042.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-2568.635700853963);
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = (-499.245005);
      doubleArray2[7] = 1884.480886164067;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2568.635700853963), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-5137.271401707926), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(range2, range0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      double[] doubleArray0 = new double[6];
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1014, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      boolean boolean0 = stack0.add(xYDatasetTableModel0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(xYDatasetTableModel0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 144);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("674b84:?4qF 8e");
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 68.5;
      doubleArray1[1] = 1799.1837883126045;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1856.489473284657;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1827.816;
      doubleArray2[1] = 68.5;
      doubleArray2[2] = 1799.1837883126045;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1224.2995117040762);
      doubleArray1[2] = 1.5;
      doubleArray1[3] = 2183.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(479.3502441479619, range0.getCentralValue(), 0.01);
      assertEquals(2183.0, range0.getUpperBound(), 0.01);
      assertEquals((-1224.2995117040762), range0.getLowerBound(), 0.01);
      assertEquals(3407.2995117040764, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = Range.combine(range0, range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(479.3502441479619, range0.getCentralValue(), 0.01);
      assertEquals(2183.0, range0.getUpperBound(), 0.01);
      assertEquals((-1224.2995117040762), range0.getLowerBound(), 0.01);
      assertEquals(3407.2995117040764, range0.getLength(), 0.01);
      assertEquals(2183.0, range1.getUpperBound(), 0.01);
      assertEquals(3407.2995117040764, range1.getLength(), 0.01);
      assertEquals(479.3502441479619, range1.getCentralValue(), 0.01);
      assertEquals((-1224.2995117040762), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range1.equals((Object)range0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1.5);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range2 = Range.shift(range1, 1.5, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(3407.2995117040764, range2.getLength(), 0.01);
      assertEquals(480.8502441479619, range2.getCentralValue(), 0.01);
      assertEquals((-1222.7995117040762), range2.getLowerBound(), 0.01);
      assertEquals(2184.5, range2.getUpperBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(479.3502441479619, range0.getCentralValue(), 0.01);
      assertEquals(2183.0, range0.getUpperBound(), 0.01);
      assertEquals((-1224.2995117040762), range0.getLowerBound(), 0.01);
      assertEquals(3407.2995117040764, range0.getLength(), 0.01);
      assertEquals(2183.0, range1.getUpperBound(), 0.01);
      assertEquals(3407.2995117040764, range1.getLength(), 0.01);
      assertEquals(479.3502441479619, range1.getCentralValue(), 0.01);
      assertEquals((-1224.2995117040762), range1.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(479.3502441479619, range0.getCentralValue(), 0.01);
      assertEquals(2183.0, range0.getUpperBound(), 0.01);
      assertEquals((-1224.2995117040762), range0.getLowerBound(), 0.01);
      assertEquals(3407.2995117040764, range0.getLength(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range3);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultMultiValueCategoryDataset0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      MockDate mockDate0 = new MockDate(28, 1484, (-2293), 1864, 1484);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2293);
      doubleArray0[1] = (double) (-1724);
      doubleArray0[2] = 3090.3068529505;
      doubleArray0[3] = (double) (-1724);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3090.3068529505;
      doubleArray1[1] = (double) 1484;
      doubleArray1[2] = 3090.3068529505;
      doubleArray1[3] = 3090.3068529505;
      doubleArray1[4] = (double) 1484;
      doubleArray1[5] = (double) 28;
      doubleArray1[6] = (double) 1864;
      doubleArray1[7] = (double) (-1724);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3090.3068529505, 1484.0, 3090.3068529505, 3090.3068529505, 1484.0, 28.0, 1864.0, (-1724.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2293.0), (-1724.0), 3090.3068529505, (-1724.0)}, doubleArray0, 0.01);
      assertEquals("Mon Aug 07 16:44:00 GMT 2045", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(8, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3090.3068529505, 1484.0, 3090.3068529505, 3090.3068529505, 1484.0, 28.0, 1864.0, (-1724.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2293.0), (-1724.0), 3090.3068529505, (-1724.0)}, doubleArray0, 0.01);
      assertEquals("Mon Aug 07 16:44:00 GMT 2045", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.38573704E12, number0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(8, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3090.3068529505, 1484.0, 3090.3068529505, 3090.3068529505, 1484.0, 28.0, 1864.0, (-1724.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2293.0), (-1724.0), 3090.3068529505, (-1724.0)}, doubleArray0, 0.01);
      assertEquals("Mon Aug 07 16:44:00 GMT 2045", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.38573704E12, range0.getLowerBound(), 0.01);
      assertEquals(2.38573704E12, range0.getCentralValue(), 0.01);
      assertEquals(2.38573704E12, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1870, 1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1870, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1870, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1870, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1870, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1870, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1870, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1869.0, range0.getUpperBound(), 0.01);
      assertEquals(934.5, range0.getCentralValue(), 0.01);
      assertEquals(1869.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1870, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1870, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Series ", "Series ", "^3d2RyB*\"`^/'{$s&&8", (String) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = 162;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 162);
      assertEquals(5, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(162, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 162, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-2));
      assertNotNull(byte0);
      assertEquals((byte) (-2), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-2)));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-2)));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultWindDataset defaultWindDataset1 = (DefaultWindDataset)defaultWindDataset0.clone();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, defaultWindDataset1.getSeriesCount());
      assertNotNull(defaultWindDataset1);
      assertNotSame(defaultWindDataset0, defaultWindDataset1);
      assertNotSame(defaultWindDataset1, defaultWindDataset0);
      assertTrue(defaultWindDataset1.equals((Object)defaultWindDataset0));
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) byte0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "RJ1;PK4g", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertEquals(1, numberArray0.length);
      assertEquals((-2.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.0), range0.getCentralValue(), 0.01);
      assertEquals((-2.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(1));
      
      boolean boolean0 = vector0.add((Object) number0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.0]", vector0.toString());
      assertTrue(boolean0);
      assertFalse(vector0.contains(1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1349.287975;
      doubleArray1[2] = (-442.441461712337);
      doubleArray1[3] = 2735.503566;
      doubleArray1[4] = 69.0;
      doubleArray1[5] = (-2746.329);
      doubleArray1[6] = (-1741.6502411019);
      doubleArray1[7] = 2706.07623;
      doubleArray1[8] = (-4352.802);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-442.441461712337);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      MockDate mockDate0 = new MockDate(1, (-3135), 2, 971, 971);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[19];
      dateArray0[3] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(19, dateArray0.length);
      assertEquals("Sat Nov 12 03:11:00 GMT 1639", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-2121.3050040750704));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2121.3050040750704), range1.getLowerBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getUpperBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range1, true);
      assertEquals(15, doubleArray0.length);
      assertEquals(19, dateArray0.length);
      assertEquals("Sat Nov 12 03:11:00 GMT 1639", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2121.3050040750704), range1.getLowerBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getUpperBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getCentralValue(), 0.01);
      assertNull(range2);
      
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      MockRandom mockRandom0 = new MockRandom(971);
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(2, mockRandom0);
      assertEquals((short)2, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = number0;
      numberArray2[3] = (Number) 0.0;
      numberArray2[4] = (Number) bigInteger0;
      numberArray2[5] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) 0.0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) 0.0;
      numberArray4[1] = number0;
      numberArray4[2] = (Number) 0.0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = number0;
      numberArray6[1] = (Number) 0.0;
      numberArray6[2] = (Number) 0.0;
      numberArray6[3] = number0;
      numberArray6[4] = (Number) bigInteger0;
      numberArray6[5] = (Number) 0.0;
      numberArray6[6] = (Number) 0.0;
      numberArray6[7] = (Number) 0.0;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "Null 'columnKeys' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-35));
      assertNotNull(byte0);
      assertEquals((byte) (-35), (byte)byte0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains((byte) (-35)));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = arrayList1.add((Byte) null);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertFalse(arrayList1.contains((byte) (-35)));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1137.747), (-1069.502522796568));
      assertEquals((-1137.747), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1069.502522796568), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1069.502522796568), 1493.9917669822, (byte) (-20), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, Double.POSITIVE_INFINITY, (-356.27234700611547), 1359, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-583.85149));
      assertNotNull(double0);
      assertEquals((-583.85149), (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      BigInteger bigInteger1 = bigInteger0.negate();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short) (-10), bigInteger1.shortValue());
      assertEquals((byte) (-10), bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, 1.5);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, 1.5, 0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(pieDataset0);
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-1417.502403105166));
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, range1, false);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      assertSame(range0, range1);
      assertSame(range1, range0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-583.85149));
      assertNotNull(double0);
      assertEquals((-583.85149), (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) bigInteger0, 1.5);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, 1.5, 0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertNotNull(byte0);
      assertEquals((byte) (-25), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 2214.63373484814);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) byte0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][1][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1, 1);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1536, "EHAGWgU,");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1536, 1792);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1791, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate(11, 11, (-18), 11, (-18));
      assertNotNull(mockDate0);
      
      mockDate0.setTime(11);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-0.040369680744569036), (-9.844368672E13));
      assertEquals((-0.040369680744569036), powerFunction2D0.getA(), 0.01);
      assertEquals((-9.844368672E13), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1161.96493501, 1827.816, 162, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals((-0.040369680744569036), powerFunction2D0.getA(), 0.01);
      assertEquals((-9.844368672E13), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(-0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1827.816, xYSeries0.getMaxX(), 0.01);
      assertEquals(-0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1161.96493501, xYSeries0.getMinX(), 0.01);
      assertEquals(162, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockDate mockDate0 = new MockDate((-3045), 1, (-1724), 971, 28);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("674b84:?4qF e", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9.844368672E13), number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-9.844368672E13), range0.getUpperBound(), 0.01);
      assertEquals((-9.844368672E13), range0.getCentralValue(), 0.01);
      assertEquals((-9.844368672E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-9.844368672E13), range0.getUpperBound(), 0.01);
      assertEquals((-9.844368672E13), range0.getCentralValue(), 0.01);
      assertEquals((-9.844368672E13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-9999));
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Year year0 = new Year((-406));
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0);
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNotNull(timePeriodValues0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      TimeSeries timeSeries0 = new TimeSeries(year0, "E;,?|$:)><5c5", "!Nd)R}Y");
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("E;,?|$:)><5c5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("!Nd)R}Y", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertEquals((-406L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-406", year0.toString());
      assertEquals((-406), year0.getYear());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("E;,?|$:)><5c5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("!Nd)R}Y", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        stack0.setElementAt(timeSeriesCollection0, 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9999 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 361.2397837352422;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 4358.2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(4358.2, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) integer0, 270.01355896180183, (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) jDBCPieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      String string0 = bigInteger0.toString();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(string0);
      assertEquals("10", string0);
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 1143.57037196787;
      doubleArray1[1] = 301.933;
      doubleArray1[2] = 301.933;
      doubleArray1[3] = 2276.77132;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 2915.0;
      doubleArray1[6] = (-2026.28411708711);
      doubleArray1[7] = 979.0;
      doubleArray1[8] = (-13.14151592394706);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1143.57037196787;
      doubleArray3[1] = 301.933;
      doubleArray3[2] = 979.0;
      doubleArray3[3] = 2276.77132;
      doubleArray3[4] = (-13.14151592394706);
      doubleArray3[5] = 301.933;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), 11, 2, 11, 6);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) (-3456L);
      doubleArray0[3] = (double) (-18);
      doubleArray0[4] = (double) (-18);
      doubleArray0[5] = (double) 11;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 11.0, (-3456.0), (-18.0), (-18.0), 11.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 11.0, (-3456.0), (-18.0), (-18.0), 11.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(2.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 11.0, (-3456.0), (-18.0), (-18.0), 11.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 11.0, (-3456.0), (-18.0), (-18.0), 11.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Double double0 = new Double(4785);
      assertNotNull(double0);
      assertEquals(4785.0, (double)double0, 0.01);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4785;
      doubleArray1[1] = (double) 4785;
      doubleArray1[2] = (-1069.502522796568);
      doubleArray1[3] = (double) 4785;
      doubleArray1[4] = (double) 4785;
      doubleArray1[5] = (double) 4785;
      doubleArray1[6] = (double) 4785;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1069.502522796568);
      doubleArray2[1] = (double) 4785;
      doubleArray2[2] = (-1069.502522796568);
      doubleArray2[3] = (-1069.502522796568);
      doubleArray2[4] = (double) 4785;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      assertEquals((-1069.502522796568), number1);
      assertFalse(number1.equals((Object)double0));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 263, 4785);
      assertEquals(2, doubleArray0.length);
      assertEquals(263, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4785, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(263, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4785, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(number2);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 4785.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8500.497477203433, range1.getCentralValue(), 0.01);
      assertEquals(2645.994954406864, range1.getLowerBound(), 0.01);
      assertEquals(11709.005045593136, range1.getLength(), 0.01);
      assertEquals(14355.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setSelectionState((CategoryDatasetSelectionState) null);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(6);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertNotNull(spreadsheetDate0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3, 7, 1245.36146731, 3, (-3975.3803322970325));
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Number number0 = defaultOHLCDataset0.getX(0, 1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1392409281320L, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1245.36146731) <= upper (7.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 2.1387653774201056;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[2] = numberArray1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(197, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(197, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(197, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate(2332, 186, (-831), 2635, (-2139530404), 2);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(792, (-2139530404), 2226, 2226, (-439));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate1;
      dateArray0[5] = (Date) mockDate1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 186;
      doubleArray0[1] = (double) (-2139530404);
      doubleArray0[2] = (double) 792;
      doubleArray0[3] = (-2446.0546217);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(6, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {186.0, (-2.139530404E9), 792.0, (-2446.0546217)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(197, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, stringArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 5114.22141154798;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 5114.22141154798;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(5114.22141154798, number1);
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(10228.44282309596, range0.getUpperBound(), 0.01);
      assertEquals(5114.22141154798, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(10228.44282309596, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      double double0 = xYSeriesCollection0.getRangeUpperBound(true);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Date[] dateArray0 = new Date[1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-212.42));
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-212.42), range0.getUpperBound(), 0.01);
      assertEquals((-212.42), range0.getCentralValue(), 0.01);
      assertEquals((-212.42), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-212.42), range0.getUpperBound(), 0.01);
      assertEquals((-212.42), range0.getCentralValue(), 0.01);
      assertEquals((-212.42), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (-20));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("HoRT/pEEMV", 11, 1048);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-20));
      assertNotNull(byte0);
      assertEquals((byte) (-20), (byte)byte0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setValue(0.5, (Comparable) byte0, (Comparable) byte0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.5, number0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 5114.22141154798;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 5114.22141154798;
      doubleArray0[0] = doubleArray1;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) "g", (Comparable) 0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) integer0, 0.8, (-1206));
      assertNotNull(pieDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(0.8);
      assertNotNull(float0);
      assertEquals(0.8F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-1206));
      assertNotNull(float1);
      assertEquals((-1206.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.contains(float1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertFalse(arrayList0.contains(float0));
      assertTrue(arrayList0.contains(float1));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float1);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-829.0F));
      assertNotNull(float0);
      assertEquals((-829.0F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((-829.0F)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains((-829.0F)));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(1340.49505598007);
      assertNotNull(double0);
      assertEquals(1340.49505598007, (double)double0, 0.01);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Double double0 = new Double(2.1387653774);
      assertNotNull(double0);
      assertEquals(2.1387653774, (double)double0, 0.01);
      
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1, (-3135), 2, 971, 971);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      assertEquals("Sat Nov 12 03:11:00 GMT 1639", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-2121.3050040750704));
      assertEquals((-2121.3050040750704), range1.getUpperBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2121.3050040750704), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range1, true);
      assertEquals(15, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      assertEquals("Sat Nov 12 03:11:00 GMT 1639", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals((-2121.3050040750704), range1.getUpperBound(), 0.01);
      assertEquals((-2121.3050040750704), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2121.3050040750704), range1.getLowerBound(), 0.01);
      assertNull(range2);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(15, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      assertEquals(9.2233616187542354E18, range3.getLength(), 0.01);
      assertEquals((-1.041810054E13), range3.getUpperBound(), 0.01);
      assertEquals((-4.6116912274776576E18), range3.getCentralValue(), 0.01);
      assertEquals((-9.223372036854776E18), range3.getLowerBound(), 0.01);
      assertEquals("Sat Nov 12 03:11:00 GMT 1639", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(range3.equals((Object)range1));
      assertFalse(mockDate1.equals((Object)mockDate0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Date[] dateArray0 = new Date[3];
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range0, false);
      assertEquals(0, linkedList0.size());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.8;
      doubleArray3[1] = 0.8;
      doubleArray3[2] = 0.8;
      doubleArray3[3] = 0.8;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.8, number0);
      assertTrue(number0.equals((Object)double0));
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(2.4000000000000004, number1);
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.8);
      assertEquals(3, doubleArray0.length);
      assertEquals(2.4000000000000004, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(3.2, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) integer0, 0.8);
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) integer0, (double) (-1206), (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) jDBCPieDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Iterator<Float> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      boolean boolean0 = jDBCPieDataset0.equals(object0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertFalse(boolean0);
      
      Float float0 = new Float((-1435.5935F));
      assertNotNull(float0);
      assertEquals((-1435.5935F), (float)float0, 0.01F);
      
      boolean boolean1 = arrayList0.add(float0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(float0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1741.8615109104337));
      assertNotNull(float0);
      assertEquals((-1741.8615F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(float0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = 2955;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 2955, 3);
      assertEquals(2955, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(2955, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      int int1 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Duplicate items in 'columnKeys'.", 3, 2955);
      assertEquals(8865, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2955, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(2955, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(8865, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2955, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(8865, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2955, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Double double0 = new Double(4785);
      assertNotNull(double0);
      assertEquals(4785.0, (double)double0, 0.01);
      
      MockDate mockDate0 = new MockDate(4785);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(4785, 4785, 4785, 4785, 182);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1108.5408900425293);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 4785;
      doubleArray0[3] = (-1108.5408900425293);
      doubleArray0[4] = (double) 182;
      doubleArray0[5] = 4370.357;
      doubleArray0[6] = (double) 182;
      doubleArray0[7] = (-188.055913297);
      doubleArray0[8] = (-2524.07);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertNotNull(number1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals(4785.0, number1);
      assertTrue(number1.equals((Object)double0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertEquals((-1108.5408900425293), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertEquals((-1108.5408900425293), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range2, range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.expandToInclude(range2, 1.0);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertEquals((-1108.5408900425293), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals((-1108.5408900425293), range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range2, range1);
      assertSame(range2, range3);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range1));
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range3, true);
      assertEquals(2, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1108.5408900425293), Double.POSITIVE_INFINITY, 4785.0, (-1108.5408900425293), 182.0, 4370.357, 182.0, (-188.055913297), (-2524.07)}, doubleArray0, 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun May 23 12:02:00 GMT 7097", mockDate1.toString());
      assertEquals((-1108.5408900425293), range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals((-1108.5408900425293), range3.getLowerBound(), 0.01);
      assertNull(range4);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range2, range1);
      assertSame(range2, range3);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertEquals(0.8, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4785, 4785, year0, timeZone0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(4784, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, false);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(4784, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range3);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(8, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2915);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = new Range((-411.70069608302424), (-411.70069608302424));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-411.70069608302424), range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      short short0 = (short)174;
      Short short1 = new Short((short)174);
      assertNotNull(short1);
      assertEquals((short)174, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.empty());
      assertEquals("[174]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(short0));
      assertTrue(short1.equals((Object)short0));
      
      Range range1 = Range.shift(range0, (-2624.6), true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-411.70069608302424), range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals((-3036.3006960830244), range1.getUpperBound(), 0.01);
      assertEquals((-3036.3006960830244), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3036.3006960830244), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      DomainOrder domainOrder0 = defaultHighLowDataset0.getDomainOrder();
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = new Range((-411.70069608302424), (-411.70069608302424));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-411.70069608302424), range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (-2624.6), true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-411.70069608302424), range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals((-3036.3006960830244), range1.getCentralValue(), 0.01);
      assertEquals((-3036.3006960830244), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3036.3006960830244), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, true);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-411.70069608302424), range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getCentralValue(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals((-3036.3006960830244), range1.getCentralValue(), 0.01);
      assertEquals((-3036.3006960830244), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3036.3006960830244), range1.getLowerBound(), 0.01);
      assertNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 140);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(140, 140);
      assertEquals(140L, simpleTimePeriod0.getStartMillis());
      assertEquals(140L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) simpleTimePeriod0, 889.268971437467);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(200.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(400.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 5114.22141154798;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 5114.22141154798;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number1);
      assertEquals(5114.22141154798, number1);
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2557.11070577399, range0.getCentralValue(), 0.01);
      assertEquals(5114.22141154798, range0.getUpperBound(), 0.01);
      assertEquals(5114.22141154798, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.0, 1.0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-20));
      assertNotNull(byte0);
      assertEquals((byte) (-20), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2195.99826121387), (-1069.502522796568), 164, byte0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(164, xYSeries0.getItemCount());
      assertEquals((-1068.502522796568), xYSeries0.getMaxY(), 0.01);
      assertEquals((-2194.99826121387), xYSeries0.getMinY(), 0.01);
      assertEquals((-2195.99826121387), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1069.502522796568), xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Week ", "Null 'columnKeys' argument.", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(610.0, range0.getLength(), 0.01);
      assertEquals(610.0, range0.getUpperBound(), 0.01);
      assertEquals(305.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      
      String string0 = bigInteger2.toString();
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(string0);
      assertSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
      assertEquals("10", string0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(10.0, range1.getLowerBound(), 0.01);
      assertEquals(300.0, range1.getUpperBound(), 0.01);
      assertEquals(155.0, range1.getCentralValue(), 0.01);
      assertEquals(290.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) integer0, (-2525.398564010544));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) month0, 2476.752556224);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(10.0, range2.getLowerBound(), 0.01);
      assertEquals(155.0, range2.getCentralValue(), 0.01);
      assertEquals(290.0, range2.getLength(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "10", (KeyedValues) pieDataset1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertNotNull(categoryDataset1);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "'d9v^`I29k4FWxP p!u", (Number) bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "'d9v^`I29k4FWxP p!u", 3646.4418098062124);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-411.70069608302424));
      assertNotNull(double0);
      assertEquals((-411.70069608302424), (double)double0, 0.01);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) double0, 1.5, (-829));
      assertNotNull(pieDataset0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = "org.jfree.data.KeyedObjects";
      stringArray0[1] = "org.jfree.data.KeyedObjects";
      Number[][] numberArray0 = new Number[5][0];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      double double1 = (-1.0);
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      numberArray1[3] = (Number) double2;
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      int int0 = 569;
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getX(569, (-829));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 569, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 5114.22141154798;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 5114.22141154798;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5114.22141154798, range0.getUpperBound(), 0.01);
      assertEquals(2557.11070577399, range0.getCentralValue(), 0.01);
      assertEquals(5114.22141154798, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2915);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 309);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertEquals(1, numberArray0.length);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-295));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      long long0 = mockDate0.getTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, long0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      assertEquals(4.0, powerFunction2D0.getB(), 0.01);
      assertEquals(37.78, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1656;
      doubleArray0[2] = 37.78;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (-1895.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1656.0, 37.78, 1.0, 0.0, (-1895.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Comparable comparable0 = keyToGroupMap0.getGroup(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(comparable0);
      assertSame(mockDate0, comparable0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      assertTrue(boolean0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = (-483);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-483));
      assertEquals(3, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-483), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", (double) (-483));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      defaultXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(4519, 4519);
      assertEquals(4518, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertEquals(4518, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) stack0, range0, true);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(4518, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNull(range1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3435L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "Series ", (-1438.8922831), (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) instant0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) instant0, 2163.0);
      assertNotNull(pieDataset1);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1165.65956361611));
      assertEquals((-1165.65956361611), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.7976931348623157E308;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), 0.0, 1086, 1.7976931348623157E308);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1.7976931348623157E308, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.7976931348623157E308, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1086, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 12, (-3665));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(12, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-3665), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 1656);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(12, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-3665), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1656, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(12, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-3665), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1656, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2923, 1656);
      assertEquals(1655, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1655, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      int int0 = defaultWindDataset0.indexOf(2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      assertTrue(boolean0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(3, numberArray0.length);
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 2386);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      boolean boolean0 = true;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      MockDate mockDate0 = new MockDate(1814, 11, (-777), 11, (-777));
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Thu Oct 13 22:03:00 GMT 3712", mockDate0.toString());
      assertEquals(54996962580000L, day0.getFirstMillisecond());
      assertEquals(54996962580000L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(day0, (OHLCDataItem[]) null);
      assertEquals("Thu Oct 13 22:03:00 GMT 3712", mockDate0.toString());
      assertEquals(54996962580000L, day0.getFirstMillisecond());
      assertEquals(54996962580000L, day0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-698), (-698), 45, 13, 13, 15);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2323.86715357806), 712.0, 1.0, (-1220.68487487), (-698));
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range3);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) mockDate0);
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) oHLCDataItem0, (double) 15, 2805);
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset1);
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Quarter quarter0 = new Quarter(mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      assertEquals(37.78, powerFunction2D0.getA(), 0.01);
      assertEquals(4.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 4);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1137.747), 1656, (-655.92), 1.0, (-834.1604187085));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(1.0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(500.04, range1.getCentralValue(), 0.01);
      assertEquals((-655.92), range1.getLowerBound(), 0.01);
      assertEquals(2311.92, range1.getLength(), 0.01);
      assertEquals(1656.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 37.78);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(37.78, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1137.747);
      doubleArray0[1] = (-1895.0);
      doubleArray0[2] = 37.78;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1137.747), (-1895.0), 37.78, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1137.747), 1161.96493501, 191, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(37.78, powerFunction2D0.getB(), 0.01);
      assertEquals(1161.96493501, xYSeries0.getMaxX(), 0.01);
      assertEquals(191, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2.383175215185812E-86, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(2.54127917688662E116, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1137.747), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1741.8615109104337));
      assertNotNull(float0);
      assertEquals((-1741.8615F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(float0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1741.8615109104337));
      assertEquals(1, numberArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1741.8615109104337), range0.getCentralValue(), 0.01);
      assertEquals((-1741.8615109104337), range0.getUpperBound(), 0.01);
      assertEquals((-1741.8615109104337), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(8, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(8, numberArray0.length);
      assertTrue(boolean0);
      
      TableXYDataset tableXYDataset0 = null;
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 1014);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      double double0 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      CategoryDataset categoryDataset0 = null;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = linkedList0.offerLast(categoryTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3435L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 1089, (-709));
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      
      System.setCurrentTimeMillis(0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1065);
      assertNotNull(pieDataset0);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertNotSame(range4, range3);
      assertTrue(range4.equals((Object)range3));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Lkra%", "Lkra%", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Double double0 = new Double((-412.4024));
      assertNotNull(double0);
      assertEquals((-412.4024), (double)double0, 0.01);
      
      defaultPieDataset0.setValue((Comparable) day0, (Number) double0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      String string0 = "$_JcD)! fKZZDdgr_";
      defaultPieDataset0.clear();
      MatrixSeries matrixSeries0 = new MatrixSeries("$_JcD)! fKZZDdgr_", 1094, 1071);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 2386);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (-1895.0);
      doubleArray0[2] = (-1895.0);
      doubleArray0[3] = (-1895.0);
      doubleArray0[4] = (double) 2386;
      doubleArray0[5] = (-1895.0);
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (-1895.0);
      doubleArray0[8] = (double) 11;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1895.0), (-1895.0), (-1895.0), 2386.0, (-1895.0), 11.0, (-1895.0), 11.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, (-1895.0), 11, 11.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-1895.0), (-1895.0), (-1895.0), 2386.0, (-1895.0), 11.0, (-1895.0), 11.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(11, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNull(range3);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range5);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertNotNull(byte0);
      assertEquals((byte) (-25), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3435L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 1089, (-709));
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals((-709), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1089, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, true);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]COf.TBE$So", "]COf.TBE$So", "");
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      MockDate mockDate0 = new MockDate((-672L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-118.41906015007), 716, (-2524.07), 716, (-672L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2524.07);
      doubleArray0[1] = 0.0;
      MockDate mockDate1 = new MockDate(14, 716, (-2444), 62, 62);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("Sat Dec 24 15:02:00 GMT 1966", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(boolean0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      doubleArray0[2] = (-118.41906015007);
      doubleArray0[3] = (-655.92);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2524.07);
      doubleArray0[6] = (-2524.07);
      doubleArray0[7] = (double) 716;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2524.07), 0.0, (-118.41906015007), (-655.92), 0.0, (-2524.07), (-2524.07), 716.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 716, 64, mockDate0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2524.07), 0.0, (-118.41906015007), (-655.92), 0.0, (-2524.07), (-2524.07), 716.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(64, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(716.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-2524.07), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(6.873178774600808E22, xYSeries0.getMaxY(), 0.01);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(xYSeries0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 5114.22141154798;
      doubleArray0[4] = 0.0;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(yIntervalSeriesCollection0, 5114.22141154798);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(5114.22141154798, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(5114.22141154798);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf((Comparable) null);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 1, 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) 0.0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, 1.5);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) 5114.22141154798, (-1939.45296515));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset2);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = stack0.add(defaultMultiValueCategoryDataset0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 4775;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = false;
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      numberArray1[0] = (Number) integer0;
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[1] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray3[0] = (Number) integer1;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) float0;
      numberArray3[7] = (Number) float0;
      numberArray3[8] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) integer0;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer2);
      assertEquals(200, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      numberArray4[1] = (Number) integer2;
      numberArray4[2] = (Number) integer1;
      numberArray4[3] = (Number) integer0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean1 = arrayList0.add(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(defaultIntervalCategoryDataset0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("674b84:?4qF 8e", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      System.setCurrentTimeMillis(1);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("]COf.TBE$So", "]COf.TBE$So", "");
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      MockDate mockDate0 = new MockDate((-672L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-118.41906015007), 716, (-2524.07), 716, (-672L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("]COf.TBE$So", oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]COf.TBE$So", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(716.0, range4.getUpperBound(), 0.01);
      assertEquals(3240.07, range4.getLength(), 0.01);
      assertEquals((-904.0350000000001), range4.getCentralValue(), 0.01);
      assertEquals((-2524.07), range4.getLowerBound(), 0.01);
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1137.747));
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1137.747), range0.getUpperBound(), 0.01);
      assertEquals((-1137.747), range0.getCentralValue(), 0.01);
      assertEquals((-1137.747), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset1);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 2219.77235341);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2219.77235341, range0.getCentralValue(), 0.01);
      assertEquals(2219.77235341, range0.getLowerBound(), 0.01);
      assertEquals(2219.77235341, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2219.77235341, range0.getCentralValue(), 0.01);
      assertEquals(2219.77235341, range0.getLowerBound(), 0.01);
      assertEquals(2219.77235341, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 2219.77235341);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      String string0 = "Series ";
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      String string1 = null;
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[7];
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      int int1 = (-2466);
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getEndX((-2466), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4785);
      assertNotNull(double0);
      assertEquals(4785.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4785;
      doubleArray1[1] = (double) 4785;
      doubleArray1[2] = (double) 4785;
      doubleArray1[3] = (double) 4785;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4785;
      doubleArray2[1] = (double) 4785;
      doubleArray2[2] = (double) 4785;
      doubleArray2[3] = (double) 4785;
      doubleArray2[4] = (double) 4785;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 4785;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 4785;
      doubleArray5[1] = (double) 4785;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"w/Y<CZT$!(\u0002s", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(4785.0, range3.getLowerBound(), 0.01);
      assertEquals(4785.0, range3.getUpperBound(), 0.01);
      assertEquals(4785.0, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 5114.22141154798;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 5114.22141154798;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g", "g", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("o4\"p&{", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("o4\"p&{", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[22];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 1579.814435;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) 1579.814435, 1325.6513, (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1579.814435, 2163.0);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = defaultPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, defaultPieDataset0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) minute0, 2056.53383, (-1206));
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertNotNull(pieDataset0);
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDatasetSelectionState0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDatasetSelectionState0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)94, (byte) (-2), (byte) (-9), (byte)53, (byte) (-39), (byte)1}, byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short) (-9983), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)94, (byte) (-2), (byte) (-9), (byte)53, (byte) (-39), (byte)1}, byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short) (-9983), bigInteger0.shortValue());
      assertNotNull(string0);
      assertEquals("104449162205441", string0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (byte)53, (double) (byte)94);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertNotNull(pieDataset1);
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDatasetSelectionState0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDatasetSelectionState0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDatasetSelectionState0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDatasetSelectionState0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-423.3780315905791));
      assertNotNull(double0);
      assertEquals((-423.3780315905791), (double)double0, 0.01);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) double0, (-264.3926));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2.147483648E9), (-2.147483648E9));
      assertEquals((-2.147483648E9), powerFunction2D0.getA(), 0.01);
      assertEquals((-2.147483648E9), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1656;
      doubleArray0[1] = (double) 1656;
      doubleArray0[2] = (-1895.0);
      doubleArray0[3] = (-1895.0);
      doubleArray0[4] = (double) 1656;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (-1895.0);
      doubleArray0[5] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1656.0, 1656.0, (-1895.0), (-1895.0), 1656.0, (-2.147483648E9), (-1895.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2.147483648E9), (-1137.747), 1656, 1656.0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Quarter quarter0 = new Quarter(mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      assertEquals(37.78, powerFunction2D0.getA(), 0.01);
      assertEquals(4.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1656;
      doubleArray0[2] = (-1137.747);
      doubleArray0[3] = (double) 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate2 = new MockDate((-9223372036854775808L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate2;
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate0;
      MockDate mockDate3 = new MockDate(1656, 1, 1, 971, 1);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[5] = (Date) mockDate3;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(6, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1656.0, (-1137.747), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals(6, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1656.0, (-1137.747), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9.223372036854776E18), number0);
      assertFalse(number0.equals((Object)double0));
      
      Range range2 = Range.expandToInclude((Range) null, 1.0);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range2, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockDate mockDate0 = new MockDate(3, 3, (-1724), 3, (-1724), 3);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("q:lFBuad Ow3", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("@", 1245, 1);
      assertEquals(1245, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1245, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      matrixSeriesCollection0.addChangeListener(xYDatasetTableModel0);
      assertEquals(1245, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      System.setCurrentTimeMillis(1245);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(1245, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(1245, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4775);
      assertNotNull(double0);
      assertEquals(4775.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4775, 2673.2432984);
      assertEquals(2673.2432984, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(4775.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      MockDate mockDate0 = new MockDate(4775);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-984.73232320108), 93, (-1486.656799188), 1714.12939, 530.780721247586);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1714.12939, range2.getUpperBound(), 0.01);
      assertEquals(1714.12939, range2.getCentralValue(), 0.01);
      assertEquals(1714.12939, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-710.4357669), (-710.4357669));
      assertEquals((-710.4357669), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-710.4357669), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1016.6532511), (-710.4357669), 1325, double0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 692.4754864937885, (-2549.0), 1, 1, 1579.814435);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, (-2503.49209), 1, 1.0, (-86.86422636107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2785.3271362151), 0.0, 1579.814435, (-2549.0), (-86.86422636107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      MockDate mockDate1 = new MockDate(1);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate1, (-1527.4729), 1579.814435, 5114.22141154798, (-1.0), 0.0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(2013, quarter1.getYearValue());
      assertNotNull(quarter1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(quarter1, oHLCDataItemArray0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertNotNull(byte0);
      assertEquals((byte) (-25), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4775);
      assertNotNull(double0);
      assertEquals(4775.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range3);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 71, 71);
      assertEquals(5041, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(71, matrixSeries0.getRowCount());
      assertEquals(71, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(5041, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(71, matrixSeries0.getRowCount());
      assertEquals(71, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(5041, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(71, matrixSeries0.getRowCount());
      assertEquals(71, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(70.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dk3xBP,/9", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      System.setCurrentTimeMillis(206L);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultPieDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double1);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Float float0 = new Float((-909.285862741));
      assertNotNull(float0);
      assertEquals((-909.2859F), (float)float0, 0.01F);
      
      defaultCategoryDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Double double0 = new Double(4785);
      assertNotNull(double0);
      assertEquals(4785.0, (double)double0, 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1), 4785);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Double double0 = new Double(1161.96493501);
      assertNotNull(double0);
      assertEquals(1161.96493501, (double)double0, 0.01);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-123), "", 0, 4775, 1551, (-2673), (-2673), 1800, 1579, 0, (-2673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2673
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockDate mockDate0 = new MockDate(716, (-1980), (-1980), 716, 1781);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1536, "EHAGWgU,");
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      boolean boolean0 = simpleTimeZone0.observesDaylightTime();
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(boolean0);
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertEquals("Wed Aug 30 01:41:00 GMT 2445", mockDate0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9783L, quarter0.getSerialIndex());
      assertEquals(15010450860000L, quarter0.getLastMillisecond());
      assertEquals(2445, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(15010450860000L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(5, 1, quarter0);
      assertEquals("Wed Aug 30 01:41:00 GMT 2445", mockDate0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(9783L, quarter0.getSerialIndex());
      assertEquals(15010450860000L, quarter0.getLastMillisecond());
      assertEquals(2445, quarter0.getYearValue());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(15010450860000L, quarter0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[][] doubleArray0 = new double[20][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertEquals(20, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      Stack<IntervalXYDelegate> stack0 = new Stack<IntervalXYDelegate>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("674b84:?4qF e", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(0.0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        timeZone0.inDaylightTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-563.6650535003273), 1, 869, "674b84:?4qF 8e");
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(869, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-563.6650535003273), xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, 1739.878197086569);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1739.878197086569, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 239.5560375647935, 1842, quarter0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4775);
      assertNotNull(double0);
      assertEquals(4775.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(4775, 2673.2432984);
      assertEquals(4775.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2673.2432984, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 530.780721247586, 2163.0, 93, double0);
      assertEquals(4775.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2673.2432984, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(4775.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2673.2432984, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(4.2316689904818407E-5, range2.getLowerBound(), 0.01);
      assertEquals(5.027242638686434E-5, range2.getLength(), 0.01);
      assertEquals(9.258911629168275E-5, range2.getUpperBound(), 0.01);
      assertEquals(6.745290309825058E-5, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 926.79);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(926.79, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 530.780721247586;
      doubleArray1[1] = 210.67;
      doubleArray1[2] = 2673.2432984;
      doubleArray1[3] = (double) 4775;
      doubleArray1[4] = 530.780721247586;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("<|l'", "Null 'rowKey' argument.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 5114.22141154798);
      assertEquals(5114.22141154798, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 5114.22141154798;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 5114.22141154798;
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Vector<XYBarDataset> vector1 = new Vector<XYBarDataset>(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 5114.22141154798);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(5114.22141154798, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      boolean boolean0 = vector1.add(xYBarDataset0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.capacity());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(5114.22141154798, xYBarDataset0.getBarWidth(), 0.01);
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertTrue(boolean0);
      assertFalse(vector0.contains(xYBarDataset0));
      assertTrue(vector1.contains(xYBarDataset0));
      assertFalse(vector0.equals((Object)vector1));
      assertFalse(vector1.equals((Object)vector0));
      
      Long long0 = Long.getLong("g", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 5114.22141154798, (Number) 5114.22141154798);
      assertEquals(5114.22141154798, xYDataItem0.getXValue(), 0.01);
      assertEquals(5114.22141154798, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("g");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf(xYDataItem0);
      assertEquals(5114.22141154798, xYDataItem0.getXValue(), 0.01);
      assertEquals(5114.22141154798, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("674b84:?4qF 8e");
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 314.552336055);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(314.552336055, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.removeChangeListener(xYBarDataset0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(314.552336055, xYBarDataset0.getBarWidth(), 0.01);
      
      DomainOrder domainOrder0 = xYBarDataset0.getDomainOrder();
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(314.552336055, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      xYSeries0.add((-1097.4789897712926), (-1097.4789897712926), true);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1097.4789897712926), xYSeries0.getMinX(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1097.4789897712926), xYSeries0.getMaxY(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMaxX(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1097.4789897712926), xYSeries0.getMinX(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1097.4789897712926), xYSeries0.getMaxY(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(314.552336055, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1097.4789897712926), range0.getUpperBound(), 0.01);
      assertEquals((-1097.4789897712926), range0.getCentralValue(), 0.01);
      assertEquals((-1097.4789897712926), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1097.4789897712926), xYSeries0.getMinX(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1097.4789897712926), xYSeries0.getMaxY(), 0.01);
      assertEquals((-1097.4789897712926), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(314.552336055, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
      assertEquals((-1254.7551577987927), number0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[][][] objectArray0 = new Object[4][2][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Long long0 = Long.getLong("#+3m%&", (-1996L));
      assertNotNull(long0);
      assertEquals((-1996L), (long)long0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(xYDataItem0);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(xYDataItem0);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertNotNull(simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 2386);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset1, true);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertNull(range2);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6916L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals("Thu Jan 01 00:00:06 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:06 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:06 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<JDBCXYDataset> stack0 = new Stack<JDBCXYDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockDate mockDate0 = new MockDate(716, (-1980), (-1980), 716, 1781);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1536, "EHAGWgU,");
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      mockDate0.setTime((-1L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1L), quarter0.getLastMillisecond());
      assertEquals((-1L), quarter0.getFirstMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1471, 1781, quarter0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1L), quarter0.getLastMillisecond());
      assertEquals((-1L), quarter0.getFirstMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1780, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1L), quarter0.getLastMillisecond());
      assertEquals((-1L), quarter0.getFirstMillisecond());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1780, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset1, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-43));
      assertNotNull(byte0);
      assertEquals((byte) (-43), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-43)));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-43)));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1793.61131);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4785);
      assertNotNull(double0);
      assertEquals(4785.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3600.1;
      doubleArray1[1] = (-446.15930625592);
      doubleArray1[2] = 3667.53508;
      doubleArray1[3] = (-1596.831505190394);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3175.7;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(3600.1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4775, (-655.92), Double.POSITIVE_INFINITY, 4775, (-118.41906015007));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(4775.0, range3.getCentralValue(), 0.01);
      assertEquals(4775.0, range3.getUpperBound(), 0.01);
      assertEquals(4775.0, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, false);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Quarter quarter0 = new Quarter(mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      assertEquals(37.78, powerFunction2D0.getA(), 0.01);
      assertEquals(4.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1656;
      doubleArray0[2] = (-1137.747);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1137.747);
      doubleArray0[5] = (-1895.0);
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1895.0);
      doubleArray2[1] = (-1895.0);
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = 37.78;
      doubleArray2[4] = 37.78;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 4;
      doubleArray1[3] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-119.5), range0.getCentralValue(), 0.01);
      assertEquals(3551.0, range0.getLength(), 0.01);
      assertEquals(1656.0, range0.getUpperBound(), 0.01);
      assertEquals((-1895.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4775, (-655.92), Double.POSITIVE_INFINITY, 4775, (-118.41906015007));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-698), (-698), 45, 13, 13, 15);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2323.86715357806), 712.0, 1.0, (-1220.68487487), (-698));
      assertEquals("Wed Dec 15 13:13:15 GMT 1143", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range3);
      
      System.setCurrentTimeMillis(13);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 1014);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[11][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("674b84:?4qF e", "674b84:?4qF e", doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertEquals(11, doubleArray0.length);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range1, range0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range1.equals((Object)range0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Long long0 = Long.getLong("#+3m%&", (-1996L));
      assertNotNull(long0);
      assertEquals((-1996L), (long)long0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(xYDataItem0);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset(xYDataItem0);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertNotNull(simpleHistogramDataset1);
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 11, 2386);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset1, true);
      assertEquals((-1996.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-1996.0), xYDataItem0.getYValue(), 0.01);
      assertTrue(simpleHistogramDataset1.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset1.getSeriesCount());
      assertNull(range2);
      assertNotSame(simpleHistogramDataset1, simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset1.equals((Object)simpleHistogramDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(11, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2386, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("674b84:?4qF 8e");
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setSelectionState((CategoryDatasetSelectionState) null);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Double double0 = new Double((-1438.8922831));
      assertNotNull(double0);
      assertEquals((-1438.8922831), (double)double0, 0.01);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = stack0.push(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(stack0.contains(defaultOHLCDataset1));
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultOHLCDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = linkedList0.offerFirst(defaultTableXYDataset0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "", 0.5);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) stack0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(274, "^;f6,05iMx5");
      assertEquals("^;f6,05iMx5", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(274, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=^;f6,05iMx5,offset=274,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      XYSeries xYSeries0 = new XYSeries("^;f6,05iMx5");
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 137.0);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(137.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.add(137.0, (-3043.21699), true);
      assertEquals((-3043.21699), xYSeries0.getMinY(), 0.01);
      assertEquals(137.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3043.21699), xYSeries0.getMaxY(), 0.01);
      assertEquals(137.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      Range range0 = new Range((-3043.21699), 274);
      assertEquals((-1384.608495), range0.getCentralValue(), 0.01);
      assertEquals((-3043.21699), range0.getLowerBound(), 0.01);
      assertEquals(3317.21699, range0.getLength(), 0.01);
      assertEquals(274.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertEquals((-3043.21699), xYSeries0.getMinY(), 0.01);
      assertEquals(137.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3043.21699), xYSeries0.getMaxY(), 0.01);
      assertEquals(137.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(137.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(205.5, range1.getUpperBound(), 0.01);
      assertEquals(137.0, range1.getLength(), 0.01);
      assertEquals(137.0, range1.getCentralValue(), 0.01);
      assertEquals(68.5, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals((-3043.21699), xYSeries0.getMinY(), 0.01);
      assertEquals(137.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3043.21699), xYSeries0.getMaxY(), 0.01);
      assertEquals(137.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(137.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(205.5, number0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[22];
      doubleArray1[0] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 1579.814435;
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 1579.814435);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1579.814435, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1579.814435, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNull(range0);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      Date[] dateArray0 = new Date[19];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(19, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(11, 11, 1, (-2146221871), 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate1 = new MockDate((-2175L));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, (-898.311272), 0, 0.0, (-655.92), (-984.73232320108));
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Tue Feb 10 17:01:00 GMT 242924", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals((-655.92), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-655.92), range0.getUpperBound(), 0.01);
      assertEquals((-655.92), range0.getCentralValue(), 0.01);
      assertEquals("Tue Feb 10 17:01:00 GMT 242924", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Tue Feb 10 17:01:00 GMT 242924", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(mockDate0.equals((Object)mockDate1));
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-423.3780315905791));
      assertNotNull(double0);
      assertEquals((-423.3780315905791), (double)double0, 0.01);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3137), (-2146730409), 1471, 1471, 401);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1781, "C");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=C,offset=1781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("C", simpleTimeZone0.getID());
      assertEquals(1781, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=C,offset=1781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("C", simpleTimeZone0.getID());
      assertEquals(1781, simpleTimeZone0.getRawOffset());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, (-1929), quarter0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=C,offset=1781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("C", simpleTimeZone0.getID());
      assertEquals(1781, simpleTimeZone0.getRawOffset());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1930), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=C,offset=1781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("C", simpleTimeZone0.getID());
      assertEquals(1781, simpleTimeZone0.getRawOffset());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1930), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=C,offset=1781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("C", simpleTimeZone0.getID());
      assertEquals(1781, simpleTimeZone0.getRawOffset());
      assertEquals(7881L, quarter0.getSerialIndex());
      assertEquals(0L, quarter0.getFirstMillisecond());
      assertEquals(0L, quarter0.getLastMillisecond());
      assertEquals(1970, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-1930), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-9999));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-718));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("~-]y@m))]cFh");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-718L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals(1969, year0.getYear());
      assertEquals((-718L), year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1934, (-718), year0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-718L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals(1969, year0.getYear());
      assertEquals((-718L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-719), dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      assertNotNull(keyListener1);
      
      KeyListener keyListener2 = AWTEventMulticaster.remove(keyListener1, keyListener1);
      assertNull(keyListener2);
      
      boolean boolean0 = dynamicTimeSeriesCollection0.hasListener((EventListener) null);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-718L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals(1969, year0.getYear());
      assertEquals((-718L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-719), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertFalse(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-718L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals(1969, year0.getYear());
      assertEquals((-718L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-719), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) 1);
      assertNotNull(pieDataset0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      System.setCurrentTimeMillis((-2472L));
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals((-718L), year0.getFirstMillisecond());
      assertEquals("1969", year0.toString());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals(1969, year0.getYear());
      assertEquals((-718L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-719), dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(number1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0.0, number1);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2309.59);
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2472L);
      doubleArray2[1] = (double) 9999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (-2309.59);
      doubleArray2[4] = (double) 1934;
      doubleArray2[5] = (-2309.59);
      doubleArray2[6] = (double) (-718);
      doubleArray2[7] = (double) 1934;
      doubleArray2[8] = (double) 1934;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-718);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) year0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(pieDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1741.8615109104337));
      assertNotNull(float0);
      assertEquals((-1741.8615F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(float0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Byte byte0 = new Byte((byte)53);
      assertNotNull(byte0);
      assertEquals((byte)53, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)53));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)53));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = "Week ";
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Week ", "The number of row keys does not match the number of rows in the data array.", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(610.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(610.0, range0.getUpperBound(), 0.01);
      assertEquals(305.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Float float0 = new Float(392.7835F);
      assertNotNull(float0);
      assertEquals(392.7835F, (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(392.7835F));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4771, 0);
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(4771, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Date[] dateArray0 = new Date[3];
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[1] = date0;
      ParsePosition parsePosition0 = new ParsePosition(29);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(29, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=29,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Date date1 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("java.text.ParsePosition[index=29,errorIndex=29]", parsePosition0.toString());
      assertEquals(29, parsePosition0.getErrorIndex());
      assertEquals(29, parsePosition0.getIndex());
      assertNull(date1);
      
      dateArray0[2] = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      doubleArray0[3] = 1826.6811805969;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4771;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (double) 29;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 29.0, 29.0, 1826.6811805969, 0.0, 4771.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 29.0, 29.0, 1826.6811805969, 0.0, 4771.0, 29.0, 29.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number1);
      assertEquals(0.0, number1);
      
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) integer0, 0.8);
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) integer0, 270.01355896180183, (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) jDBCPieDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Float float0 = new Float((-1435.5935F));
      assertNotNull(float0);
      assertEquals((-1435.5935F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(float0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) integer0, 1.5);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) bigInteger0, 1.5, 150);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(pieDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1, "*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "674b84:?4qF 8e", (KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "674b84:?4qF 8e");
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(pieDataset0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertEquals(0, int0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "674b84:?4qF 8e", (-462.5881435616831));
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[22];
      doubleArray1[0] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 1579.814435;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDatasetSelectionState pieDatasetSelectionState0 = jDBCPieDataset0.getSelectionState();
      assertNotNull(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      jDBCPieDataset0.setSelectionState(pieDatasetSelectionState0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) 1579.814435, 1325.6513, (-1206));
      assertNotNull(pieDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      assertSame(jDBCPieDataset0, pieDatasetSelectionState0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double1, (-1257.501));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      defaultPieDataset0.clearSelection();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) double0, (-1257.501), (-3665));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      
      double double2 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertEquals(0.0, double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 692.4754864937885, (-2549.0), 1, 1, 1579.814435);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, (-2503.49209), 1, 1.0, (-86.86422636107));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Object[][][] objectArray0 = new Object[4][2][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4775;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 4775;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 4775;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 4775;
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 2.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4775.0, 0.0, 4775.0, 0.0, 0.0, 0.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4775.0, 0.0, 0.0, 4775.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      LinkedList<DefaultIntervalCategoryDataset> linkedList0 = new LinkedList<DefaultIntervalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Double double0 = new Double(4775);
      assertNotNull(double0);
      assertEquals(4775.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 692.4754864937885, (-2549.0), 1, 1, 1579.814435);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      Double double0 = new Double((-1438.8922831));
      assertNotNull(double0);
      assertEquals((-1438.8922831), (double)double0, 0.01);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("674b84:?4qF e", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = (-1137.747);
      doubleArray1[3] = 0.8;
      doubleArray1[5] = (-1137.747);
      doubleArray1[6] = 0.8;
      doubleArray1[7] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = (-1137.747);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (-1137.747);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      int int0 = 863;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.0);
      assertNull(range0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-983));
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range1, true);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range2);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.5);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 8);
      Date date0 = null;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Millisecond millisecond0 = null;
      try {
        millisecond0 = new Millisecond((Date) null, timeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Class<YIntervalSeriesCollection> class0 = YIntervalSeriesCollection.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Range range0 = new Range((-411.70069608302424), 2023.390423);
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Short short0 = new Short((short)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      Short short1 = new Short((short)10);
      assertNotNull(short1);
      assertEquals((short)10, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertFalse(stack0.isEmpty());
      assertEquals("[10]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains((short)10));
      assertTrue(short1.equals((Object)short0));
      
      Range range1 = Range.shift(range0, (-2.147483648E9), true);
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertEquals((-2.1474828421551366E9), range1.getCentralValue(), 0.01);
      assertEquals((-2.147481624609577E9), range1.getUpperBound(), 0.01);
      assertEquals(2435.0911190509796, range1.getLength(), 0.01);
      assertEquals((-2.147484059700696E9), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(805.8448634584879, range0.getCentralValue(), 0.01);
      assertEquals(2435.0911190830243, range0.getLength(), 0.01);
      assertEquals(2023.390423, range0.getUpperBound(), 0.01);
      assertEquals((-411.70069608302424), range0.getLowerBound(), 0.01);
      assertNull(range2);
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 55, 854);
      assertEquals(854, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(55, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) short0);
      assertEquals(854, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(55, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      assertTrue(short0.equals((Object)short1));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) short0, (double) (short)174);
      assertEquals(854, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(55, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(short0.equals((Object)short1));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Float float0 = new Float((-1137.747));
      assertNotNull(float0);
      assertEquals((-1137.747F), (float)float0, 0.01F);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Quarter quarter0 = new Quarter(mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      assertEquals(37.78, powerFunction2D0.getA(), 0.01);
      assertEquals(4.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      int int0 = 1656;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1656;
      doubleArray0[2] = (-1137.747);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-1137.747);
      doubleArray0[5] = (-1895.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1656.0, (-1137.747), 1.0, (-1137.747), (-1895.0)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1161.96493501, 1, (-1137.747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-563.6650535003273), 1, 1, "674b84:?4qF 8e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 58);
      assertNotNull(pieDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][1][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-740), (-740));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-740), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-740), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-740), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-740), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 0.8);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)39));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) byte0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(4, (-1), (-1), (-1), 459);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(2161, (-3175));
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNotNull(xYSeries1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)xYSeriesCollection0.clone();
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      defaultWindDataset0.setSelectionState(xYSeriesCollection0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      XYSeries xYSeries2 = xYSeries1.createCopy((-4599), (-1827));
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries2.getNotify());
      assertEquals(Double.NaN, xYSeries2.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries2.getMinY(), 0.01);
      assertTrue(xYSeries2.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries2.getMaximumItemCount());
      assertNull(xYSeries2.getDescription());
      assertEquals(0, xYSeries2.getItemCount());
      assertEquals(Double.NaN, xYSeries2.getMaxY(), 0.01);
      assertFalse(xYSeries2.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries2.getMaxX(), 0.01);
      assertNotNull(xYSeries2);
      assertNotSame(xYSeries0, xYSeries2);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries2);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries2, xYSeries0);
      assertNotSame(xYSeries2, xYSeries1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries2.equals((Object)xYSeries1));
      assertTrue(xYSeries2.equals((Object)xYSeries0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) stack0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range1);
      
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range2);
      
      xYSeries0.removeChangeListener(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals("Sun Nov 29 06:39:00 GMT 1903", mockDate0.toString());
      assertEquals((-2085672060000L), hour0.getFirstMillisecond());
      assertEquals((-2085672060000L), hour0.getLastMillisecond());
      assertEquals(6, hour0.getHour());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(xYSeries0, xYSeries2);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries0.equals((Object)xYSeries2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4775;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 4775;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-146.57480775);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4775.0, range0.getLength(), 0.01);
      assertEquals(4775.0, range0.getUpperBound(), 0.01);
      assertEquals(2387.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(3700, "", (-1298), 999, 0, 999, 484, (-2146860023), (-1298), 1609);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1298
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(dateArray0, dateArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(1, dateArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      assertNotNull(instant0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("S$eries ", 1, 1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (double) 53;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[7] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 53.0, 53.0, 0.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1695.41990557), (-102.8548038), 1.5, 1.5, 1858.0732103119553);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      Week week0 = new Week(1, 1);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(54L, week0.getSerialIndex());
      assertEquals(1, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 7);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<DefaultMultiValueCategoryDataset>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<DefaultMultiValueCategoryDataset>) oHLCDataItem0;
      comparableArray0[3] = (Comparable<DefaultMultiValueCategoryDataset>) oHLCDataItem0;
      comparableArray0[4] = (Comparable<DefaultMultiValueCategoryDataset>) week0;
      comparableArray0[5] = (Comparable<DefaultMultiValueCategoryDataset>) week0;
      comparableArray0[6] = (Comparable<DefaultMultiValueCategoryDataset>) week0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.0);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 2394);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[4];
      Date[] dateArray0 = new Date[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      assertEquals(ChronoUnit.MICROS, chronoUnit0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 1, 1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        ZoneOffset.of("Series ");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: Series 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1012);
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 4775;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1.5;
      doubleArray1[6] = 1.5;
      doubleArray1[7] = 1.5;
      doubleArray1[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 4775;
      doubleArray2[1] = (double) 1012;
      doubleArray2[2] = (-3868.155186516);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 4775;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertNotNull(defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertNotNull(range0);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setSelectionState((CategoryDatasetSelectionState) null);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(1, numberArray0.length);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertNull(float0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      assertEquals(1, numberArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowIndex("s");
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, Double.POSITIVE_INFINITY, 1.0, (-2432), "s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(11, 11, 1, (-2146221871), 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray2, doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, number0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("@", 1245, 1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1245, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1245, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      System.setCurrentTimeMillis(1245);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1245, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1245, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1245, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1245, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1244.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1244.0, range0.getUpperBound(), 0.01);
      assertEquals(622.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 1014);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("z", "z", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertEquals(1, numberArray0.length);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("A5PX|g)h\"?", 1, 1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      MockDate mockDate0 = new MockDate(716, (-1980), (-1980), 716, 1781);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1536, "EHAGWgU,");
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertEquals("Wed Aug 30 01:41:00 GMT 2445", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(15010450860000L, quarter0.getLastMillisecond());
      assertEquals(15010450860000L, quarter0.getFirstMillisecond());
      assertEquals(2445, quarter0.getYearValue());
      assertEquals(9783L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1471, 1781, quarter0);
      assertEquals("Wed Aug 30 01:41:00 GMT 2445", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(15010450860000L, quarter0.getLastMillisecond());
      assertEquals(15010450860000L, quarter0.getFirstMillisecond());
      assertEquals(2445, quarter0.getYearValue());
      assertEquals(9783L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(1780, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("Wed Aug 30 01:41:00 GMT 2445", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=EHAGWgU,,offset=1536,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1536, simpleTimeZone0.getRawOffset());
      assertEquals("EHAGWgU,", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(15010450860000L, quarter0.getLastMillisecond());
      assertEquals(15010450860000L, quarter0.getFirstMillisecond());
      assertEquals(2445, quarter0.getYearValue());
      assertEquals(9783L, quarter0.getSerialIndex());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(1780, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertEquals("GMT", timeZone1.getID());
      assertNotNull(timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone1);
      assertEquals("GMT", timeZone1.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals("GMT", timeZone1.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Month month0 = new Month(1, year0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(24169L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3120, month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(24169L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(3119, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      int int0 = dynamicTimeSeriesCollection0.indexOf(month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(24169L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(3119, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals((-1), int0);
      
      Month month1 = (Month)month0.next();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(24169L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertNotNull(month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(month1.equals((Object)month0));
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 9999;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (-9999);
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) 1;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) 9999;
      numberArray4[3] = (Number) 9999;
      numberArray4[4] = (Number) 0;
      numberArray4[5] = (Number) 0;
      numberArray4[6] = (Number) 1;
      numberArray4[7] = (Number) 2;
      numberArray0[3] = numberArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "", numberArray0);
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertEquals(4, numberArray0.length);
      assertEquals(20302.0, range0.getUpperBound(), 0.01);
      assertEquals(30301.0, range0.getLength(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals(5151.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup2.getID());
      assertNotNull(datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      
      DatasetGroup datasetGroup3 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup3.getID());
      assertNotNull(datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup3, datasetGroup2);
      assertNotSame(datasetGroup3, datasetGroup0);
      assertNotSame(datasetGroup3, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup3.equals((Object)datasetGroup1));
      assertTrue(datasetGroup3.equals((Object)datasetGroup2));
      assertTrue(datasetGroup3.equals((Object)datasetGroup0));
      
      DatasetGroup datasetGroup4 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup4.getID());
      assertNotNull(datasetGroup4);
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup4);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup4, datasetGroup1);
      assertNotSame(datasetGroup4, datasetGroup0);
      assertNotSame(datasetGroup4, datasetGroup2);
      assertNotSame(datasetGroup4, datasetGroup3);
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup3));
      assertTrue(datasetGroup4.equals((Object)datasetGroup2));
      assertTrue(datasetGroup4.equals((Object)datasetGroup3));
      assertTrue(datasetGroup4.equals((Object)datasetGroup0));
      assertTrue(datasetGroup4.equals((Object)datasetGroup1));
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup3);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup4);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertTrue(datasetGroup0.equals((Object)datasetGroup4));
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup3));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1012);
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1012;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (double) 1012;
      doubleArray1[4] = (double) 1012;
      doubleArray1[5] = (double) 1012;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.5;
      doubleArray3[1] = 1012.0;
      doubleArray3[2] = (-710.075609);
      double[][] doubleArray4 = new double[2][1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray2;
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 1012);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = timeTableXYDataset0.getDomainBounds(false);
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range2 = timeSeriesCollection0.getRangeBounds(vector0, (Range) null, false);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = new Range(2136.115982700606, 2136.115982700606);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2136.115982700606, range0.getUpperBound(), 0.01);
      assertEquals(2136.115982700606, range0.getCentralValue(), 0.01);
      assertEquals(2136.115982700606, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2136.115982700606, range0.getUpperBound(), 0.01);
      assertEquals(2136.115982700606, range0.getCentralValue(), 0.01);
      assertEquals(2136.115982700606, range0.getLowerBound(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dk3xBP,/9", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.295449188414751));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-1.295449188414751), range0.getUpperBound(), 0.01);
      assertEquals((-1.295449188414751), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.295449188414751), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("\"Nhe0CjiyzV", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Byte byte0 = new Byte((byte)58);
      assertNotNull(byte0);
      assertEquals((byte)58, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)58));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)58));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(byte0, "DefaultIntervalCategoryDataset.setValue: series outside valid range.", "DefaultIntervalCategoryDataset.setValue: series outside valid range.");
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("DefaultIntervalCategoryDataset.setValue: series outside valid range.", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte)58));
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("E-mF+qx0}*8uH?=Fd");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = linkedList0.add(timeSeriesCollection0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(timeSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultMultiValueCategoryDataset0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 1);
      assertNotNull(pieDataset0);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 2);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1, 1, 88.2, (-1695.41990557), 1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) oHLCDataItem0;
      Week week0 = new Week(1, 1);
      assertEquals(54L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      comparableArray0[1] = (Comparable<CategoryTableXYDataset>) week0;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(yIntervalSeriesCollection0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(274, "^;f6,05iMx5");
      assertEquals("java.util.SimpleTimeZone[id=^;f6,05iMx5,offset=274,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(274, simpleTimeZone0.getRawOffset());
      assertEquals("^;f6,05iMx5", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      XYSeries xYSeries0 = new XYSeries("^;f6,05iMx5");
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 274);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xYSeries0.add((double) 274, 1143.57037196787, true);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYBarDataset0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1143.57037196787, range0.getUpperBound(), 0.01);
      assertEquals(1143.57037196787, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1143.57037196787, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(274.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1143.57037196787, xYSeries0.getMaxY(), 0.01);
      assertEquals(274.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1143.57037196787, xYSeries0.getMinY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(274.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(411.0, range1.getUpperBound(), 0.01);
      assertEquals(274.0, range1.getLength(), 0.01);
      assertEquals(274.0, range1.getCentralValue(), 0.01);
      assertEquals(137.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(1, numberArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.XYSeries", "org.jfree.data.xy.XYSeries", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dk3xBP,/9", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      double[][] doubleArray2 = new double[2][4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("dk3xBP,/9", "org.jfree.data.xy.XYSeries", doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertNotNull(categoryDataset1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
      assertEquals(2, doubleArray2.length);
      assertNotNull(number0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals(0.0, number0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dk3xBP,/9", (String) null, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.5);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimeTableXYDataset timeTableXYDataset1 = (TimeTableXYDataset)timeTableXYDataset0.clone();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset1);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      
      double[][] doubleArray0 = new double[6][0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin", doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      assertEquals(ChronoUnit.MICROS, chronoUnit0);
      
      Instant instant1 = MockInstant.minus(instant0, 0L, (TemporalUnit) chronoUnit0);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      Date date0 = Date.from(instant1);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertNotNull(date0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      Week week0 = new Week(date0);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3456001L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-3456000L), week0.getFirstMillisecond());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3456L);
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3456.0), 53.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3456001L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-3456000L), week0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3456.0), 53.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3456001L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-3456000L), week0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNull(number0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      int int0 = week0.compareTo(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3456.0), 53.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3456001L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-3456000L), week0.getFirstMillisecond());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, int0);
      
      doubleArray1[8] = doubleArray0;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(0, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3456.0), 53.0, 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:02:24 GMT 1969", date0.toString());
      assertEquals(1970, week0.getYearValue());
      assertEquals((-3456001L), week0.getLastMillisecond());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals((-3456000L), week0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNull(range0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue(0.5, (Comparable) "", (Comparable) "");
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertFalse(boolean0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-671), (-671));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-671), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-671), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Long long0 = Long.getLong("Invalid bounds; ", 213L);
      assertNotNull(long0);
      assertEquals(213L, (long)long0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      assertEquals(213.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(213.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(xYDataItem0);
      assertEquals(213.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(213.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      int int0 = simpleHistogramDataset0.indexOf(long0);
      assertEquals(213.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(213.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 373, 0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(373, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      double double0 = (-2695.0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, (-2695.0));
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-2695.0), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0, 0.0, 1656, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Integer integer0 = new Integer(4775);
      assertNotNull(integer0);
      assertEquals(4775, (int)integer0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertNull(number0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      assertEquals(5114.22141154798, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1579.814435, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      defaultXYZDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 14);
      int int0 = 0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        SerialDate.addYears(0, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range2);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        SerialDate.addYears(0, (SerialDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Integer integer0 = new Integer((-473));
      assertNotNull(integer0);
      assertEquals((-473), (int)integer0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double double0 = 2776.248643061601;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 2776.248643061601);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(400.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(800.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(800.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(8, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(8, numberArray0.length);
      assertNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1083, 1083);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1083, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1083, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1083, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1083, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 98.534569;
      doubleArray1[1] = (-655.92);
      doubleArray1[2] = (-2850.0);
      doubleArray1[3] = (-1700.952);
      doubleArray1[4] = (-573.5673);
      doubleArray1[5] = 1677.78525;
      doubleArray1[6] = (-1137.747);
      doubleArray1[7] = (-3442.552853);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3442.552853);
      doubleArray2[2] = (-1700.952);
      doubleArray2[3] = (-573.5673);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2850.0);
      doubleArray3[1] = (-655.92);
      doubleArray3[2] = (-2850.0);
      doubleArray3[3] = 1677.78525;
      doubleArray3[4] = (-1700.952);
      doubleArray3[5] = (-3442.552853);
      doubleArray3[6] = (-1700.952);
      doubleArray3[7] = (-3442.552853);
      doubleArray3[8] = 98.534569;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`&}[{+qfK6F~_%.<6.O", (String) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1677.78525, number0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Object[][][] objectArray0 = new Object[4][2][8];
      objectArray0[0] = (Object[][]) numberArray0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 4147.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(*C#Jyzwf*w", "(*C#Jyzwf*w", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null, "(*C#Jyzwf*w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup2.getID());
      assertNotNull(datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      
      defaultXYZDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1012);
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1012;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (double) 1012;
      doubleArray1[4] = (double) 1012;
      doubleArray1[5] = (double) 1012;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.5;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-3868.155186516);
      doubleArray3[3] = 1.5;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (double) 1012;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 1012;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 1012;
      doubleArray6[1] = (-3868.155186516);
      doubleArray6[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("D:9:VQU_6fKgiP5R!I ", (String) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("674b84:?4qF e", "", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 0.0, 2478.716353, 5, "674b84:?4qF e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.from(zoneOffset0);
      assertNotNull(zoneOffset1);
      assertSame(zoneOffset0, zoneOffset1);
      assertSame(zoneOffset1, zoneOffset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-1944.451), (-1944.451), 105, zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.0, (-563.6650535003273), 244, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      int int0 = 4;
      int int1 = (-1734);
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey((-1734));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.5);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) zoneOffset0, 0.5, 287);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Integer integer0 = new Integer(409);
      assertNotNull(integer0);
      assertEquals(409, (int)integer0);
      
      Float float0 = new Float((float) 409);
      assertNotNull(float0);
      assertEquals(409.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      short short0 = (short) (-186);
      Short short1 = new Short((short) (-186));
      assertNotNull(short1);
      assertEquals((short) (-186), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short1, (Number) short1);
      assertEquals((-186.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-186.0), xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) xYDataItem0, (double) (short) (-186), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("0CfeB=G", 1, 1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Object[][][] objectArray0 = new Object[6][1][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/y&9P'F*(y:Iu8}?jyl", "/y&9P'F*(y:Iu8}?jyl", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[20];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(20, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 4775, 0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      matrixSeries0.zeroAll();
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4775, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 47);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(47, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year(mockDate0);
      Month month0 = new Month(1, year0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 3120, month0);
      dynamicTimeSeriesCollection0.indexOf(month0);
      month0.next();
      String string0 = "";
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      dynamicTimeSeriesCollection0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) 0.0;
      numberArray1[5] = (Number) 0.0;
      numberArray1[6] = (Number) 0.0;
      numberArray1[7] = (Number) 0.0;
      DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "", numberArray0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Double double0 = new Double(0.8);
      Float float0 = new Float(0.8);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BigInteger bigInteger0 = BigInteger.TEN;
      Quarter quarter0 = new Quarter(mockDate0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      Integer integer1 = new Integer(8);
      quarter0.getYear();
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) quarter0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[8];
      Double double0 = new Double((-3219.4606362195127));
      numberArray1[0] = (Number) double0;
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("", long0);
      numberArray1[1] = (Number) long1;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      numberArray1[2] = (Number) integer0;
      Double double1 = new Double(0.0);
      numberArray1[3] = (Number) double1;
      Float float0 = new Float((-631.58553954));
      numberArray1[4] = (Number) float0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      numberArray1[5] = (Number) integer1;
      BigInteger bigInteger0 = BigInteger.TEN;
      numberArray1[6] = (Number) bigInteger0;
      BigInteger bigInteger1 = BigInteger.ONE;
      numberArray1[7] = (Number) bigInteger1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) bigInteger1;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = (Number) bigInteger1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = (Number) double0;
      numberArray4[1] = (Number) integer1;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) integer1;
      numberArray4[4] = (Number) long1;
      numberArray4[5] = (Number) float0;
      numberArray4[6] = (Number) bigInteger0;
      numberArray4[7] = (Number) double1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      numberArray7[0] = (Number) bigInteger1;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals((-2240.3158283636626), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-18));
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      defaultIntervalCategoryDataset0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-3456L));
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      Instant instant1 = MockInstant.minus(instant0, 0L, (TemporalUnit) chronoUnit0);
      Date date0 = Date.from(instant1);
      Week week0 = new Week(date0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3456L);
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 373, 0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries(1838);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Double double0 = new Double(0.8);
      Float float0 = new Float(0.8);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BigInteger bigInteger0 = BigInteger.TEN;
      Quarter quarter0 = new Quarter(mockDate0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(37.78, 4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      Integer integer1 = new Integer(8);
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) quarter0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[2][2];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-671), (-671));
      LineFunction2D lineFunction2D0 = new LineFunction2D(5114.22141154798, 1579.814435);
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1.7976931348623157E308, 0.0, (-671), quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(29.941018355127, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1, 1, 1, "Invalid index.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 716.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 716.0;
      doubleArray1[8] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3199.494;
      doubleArray1[1] = (-1569.737997);
      doubleArray1[2] = (-2158.0);
      doubleArray1[3] = 2.828999328E13;
      doubleArray1[4] = (-772.15377903459);
      doubleArray1[5] = (-9.131459124469746);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1829.91494763;
      doubleArray2[1] = 3199.494;
      doubleArray2[2] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2.828999328E13;
      doubleArray3[1] = 1829.91494763;
      doubleArray3[2] = (-772.15377903459);
      doubleArray3[3] = 979.0;
      doubleArray3[4] = (-2158.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.clone();
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1638.965);
      assertNotNull(range0);
      assertEquals(1638.965, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.clone();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 3547.782051648;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2514.4371883025);
      doubleArray1[6] = (-1614.6161344);
      doubleArray1[7] = (-146.57480775);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3547.782051648;
      doubleArray2[3] = 6.283185307179586;
      doubleArray2[4] = (-1614.6161344);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1614.6161344);
      doubleArray2[7] = 6.283185307179586;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2514.4371883025);
      doubleArray3[1] = (-1614.6161344);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-945.4918);
      doubleArray3[5] = (-1614.6161344);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 6.283185307179586;
      doubleArray4[1] = (-1614.6161344);
      doubleArray4[2] = 3547.782051648;
      doubleArray4[3] = (-1614.6161344);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-1614.6161344);
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-146.57480775);
      doubleArray5[1] = 3547.782051648;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-2514.4371883025);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-922.200148529);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      Byte byte0 = new Byte((byte)20);
      arrayList0.add(byte0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-612.0));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      HashSet<Double> hashSet0 = new HashSet<Double>();
      ArrayList<Double> arrayList1 = new ArrayList<Double>(hashSet0);
      Double double0 = new Double(4775);
      arrayList1.add((Double) null);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      defaultCategoryDataset0.clone();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.0);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Second.parseSecond("u0eXwOUspt{");
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) null);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Object> stack0 = new Stack<Object>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-9999));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Second second0 = new Second();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) second0);
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 59;
      doubleArray3[1] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 59;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.0;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 59;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 59;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (double) 59;
      doubleArray7[4] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = (double) 59;
      doubleArray8[3] = (double) 59;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("~{ce<&1SsRT4", "~{ce<&1SsRT4", doubleArray0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list1);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, list2, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      DatasetUtilities.createCategoryDataset("'d9v^`I29k4FWxP p!u", "'d9v^`I29k4FWxP p!u", doubleArray0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.5);
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      linkedList0.offerFirst(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
