/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:26:48 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyBoundsListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.JapaneseDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.EmptyStackException;
import java.util.EventListener;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      MockDate mockDate0 = new MockDate(365L);
      assertNotNull(mockDate0);
      
      boolean boolean2 = arrayList0.add(hijrahEra1);
      assertTrue(boolean2);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 365L, Double.NaN, Double.NEGATIVE_INFINITY, 576.95079867048, 576.95079867048);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockDate mockDate1 = new MockDate(525, 0, 525, 915, 915, 685);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, Double.NEGATIVE_INFINITY, 365L, Double.NaN, 365L, (-925.952716429));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Jul 17 18:26:25 GMT 2426", mockDate1.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate1, (-925.952716429), Double.NEGATIVE_INFINITY, 1344.0, 2520.4861, 576.95079867048);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Jul 17 18:26:25 GMT 2426", mockDate1.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1137.31));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1137.31), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, false);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1137.31), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(7.2035467926825E12, range0.getCentralValue(), 0.01);
      assertEquals(365.0, range0.getLowerBound(), 0.01);
      assertEquals(1.4407093585E13, range0.getUpperBound(), 0.01);
      assertEquals(1.4407093584635E13, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(hijrahEra1, hijrahEra0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals((-1137.31), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(7.2035467926825E12, range0.getCentralValue(), 0.01);
      assertEquals(365.0, range0.getLowerBound(), 0.01);
      assertEquals(1.4407093585E13, range0.getUpperBound(), 0.01);
      assertEquals(1.4407093584635E13, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(365.0, range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra1));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("9Eh8b", 2, 2);
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      int int0 = categoryToPieDataset0.getItemCount();
      assertEquals(0, int0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, (-1568.844));
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals((-1568.844), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      boolean boolean1 = arrayList0.add(xYBarDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1568.844), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(arrayList0.contains(xYBarDataset0));
      
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getSeries(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[200]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[200]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(integer0));
      assertNotNull(listIterator0);
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[200]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      defaultStatisticalCategoryDataset0.add(3767.505794241, 1193.58, (Comparable) integer0, (Comparable) integer0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 2648);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2648, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) integer0, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2648, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (double) 23, 23);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotNull(locale1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      assertNotNull(mockGregorianCalendar0);
      
      hour0.peg(mockGregorianCalendar0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack1 = new Stack<Integer>();
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(integer0));
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.add(integer0);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[100]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.contains(integer0));
      
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = 0.5;
      doubleArray2[3] = 0.5;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 0.5;
      doubleArray3[2] = 0.5;
      doubleArray3[3] = 0.5;
      doubleArray3[4] = 0.5;
      doubleArray3[5] = 0.5;
      doubleArray1[6] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("RF@C6n]ia7p;P%{7sj", "a%E5[$!5;3tHJ]I", doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.5, number0);
      assertEquals(7, doubleArray1.length);
      assertNotNull(number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.5);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.25, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, (-2847.629112), 0.5);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.25, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLength(), 0.01);
      assertEquals(712.282278, range1.getLowerBound(), 0.01);
      assertEquals(712.282278, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(712.282278, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, false);
      assertNotSame(stack0, stack1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(7, doubleArray1.length);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.25, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLength(), 0.01);
      assertEquals(712.282278, range1.getLowerBound(), 0.01);
      assertEquals(712.282278, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(712.282278, range1.getCentralValue(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertNull(range2);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      Stack<Integer> stack1 = new Stack<Integer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(integer0));
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.add(integer0);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[100]", stack1.toString());
      assertTrue(stack1.contains(integer0));
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertNotSame(stack0, stack1);
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      boolean boolean2 = stack1.add(integer0);
      assertTrue(boolean2);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[100, 100]", stack1.toString());
      assertTrue(stack1.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Double double0 = new Double(669.0);
      assertEquals(669.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "R+ i>p", true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-2387.81), (-2387.81), "Null 'vrray' argumentK");
      assertEquals(3056.81, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2387.81));
      assertEquals(3056.81, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-3247.215), range0.getCentralValue(), 0.01);
      assertEquals((-1718.81), range0.getUpperBound(), 0.01);
      assertEquals((-4775.62), range0.getLowerBound(), 0.01);
      assertEquals(3056.81, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3056.81, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2197.4049999999997, range1.getUpperBound(), 0.01);
      assertEquals((-3916.215), range1.getLowerBound(), 0.01);
      assertEquals(6113.62, range1.getLength(), 0.01);
      assertEquals((-859.4050000000002), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1425.9456089982;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1425.9456089982;
      doubleArray2[1] = 1425.9456089982;
      doubleArray2[2] = 1425.9456089982;
      doubleArray2[3] = 1425.9456089982;
      doubleArray2[4] = 1425.9456089982;
      doubleArray2[5] = 1425.9456089982;
      doubleArray2[6] = 1425.9456089982;
      doubleArray2[7] = 1425.9456089982;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a%E5[$!5;3tHJ]I", "a%E5[$!5;3tHJ]I", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1425.9456089982, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1425.9456089982);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1425.9456089982, range0.getLowerBound(), 0.01);
      assertEquals(1425.9456089982, range0.getCentralValue(), 0.01);
      assertEquals(1425.9456089982, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expand(range0, 1425.9456089982, 2.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1425.9456089982, range0.getLowerBound(), 0.01);
      assertEquals(1425.9456089982, range0.getCentralValue(), 0.01);
      assertEquals(1425.9456089982, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1425.9456089982, range1.getCentralValue(), 0.01);
      assertEquals(1425.9456089982, range1.getLowerBound(), 0.01);
      assertEquals(1425.9456089982, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1425.9456089982, range0.getLowerBound(), 0.01);
      assertEquals(1425.9456089982, range0.getCentralValue(), 0.01);
      assertEquals(1425.9456089982, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNull(range2);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2851.8912179964, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      assertEquals(HijrahEra.AH, hijrahEra0);
      
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 365L, 365L, 365L, 365L, 365L);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 365L, 365L, 365L, 365L, 365L);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 365L, 365L, 365L, 365L, 365L);
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 365L);
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(365.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(1.3924092815025E12, number0);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertTrue(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(365.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "Fd+JR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(23.0, 793.4713);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramBin0.setSelected(true);
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramBin0.isSelected());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(0.0, number0);
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramBin0.isSelected());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(793.4713, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(793.4713, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramBin0.isSelected());
      assertEquals(23.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(number1);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 23.0;
      doubleArray1[1] = 23.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 200.0;
      doubleArray2[1] = 23.0;
      doubleArray2[2] = 23.0;
      doubleArray2[3] = 793.4713;
      doubleArray2[4] = 793.4713;
      doubleArray2[5] = 23.0;
      doubleArray2[6] = 23.0;
      doubleArray2[7] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 23.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 200.0;
      doubleArray4[2] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 2.0;
      doubleArray6[1] = 23.0;
      doubleArray6[2] = 23.0;
      doubleArray6[3] = 23.0;
      doubleArray6[4] = 974.0;
      doubleArray6[5] = 793.4713;
      doubleArray6[6] = 23.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = 23.0;
      doubleArray8[2] = 974.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = 2.0;
      doubleArray9[1] = 793.4713;
      doubleArray9[2] = 0.5;
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray9[4] = 1171.3066612969;
      doubleArray9[5] = 2.0;
      doubleArray9[6] = 23.0;
      doubleArray9[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(7, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Year year0 = new Year(2155);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2155", year0.toString());
      assertEquals(2155, year0.getYear());
      assertEquals(2155L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, (OHLCDataItem[]) null);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2155", year0.toString());
      assertEquals(2155, year0.getYear());
      assertEquals(2155L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = true;
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, (OHLCDataItem[]) null);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2155", year0.toString());
      assertEquals(2155, year0.getYear());
      assertEquals(2155L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(defaultOHLCDataset1);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset1, stack0, true);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2155", year0.toString());
      assertEquals(2155, year0.getYear());
      assertEquals(2155L, year0.getSerialIndex());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 2146792001);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2146792001, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2146792001);
      assertEquals(2146792001L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2146792001L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2146792001L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2146792001L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) fixedMillisecond0, (double) 2146792001, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146792001, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Spliterator<Integer> spliterator0 = stack0.spliterator();
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      assertNotNull(spliterator0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0L, regularTimePeriod0.getLastMillisecond());
      assertEquals(0L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(0L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      defaultMultiValueCategoryDataset0.add(stack0, regularTimePeriod0, minute0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0L, regularTimePeriod0.getLastMillisecond());
      assertEquals(0L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(0L, regularTimePeriod0.getSerialIndex());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(stack0.contains(integer0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (-3107.680660216452);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1219.1920278917;
      doubleArray1[6] = (-314.7569334);
      doubleArray1[7] = (-1162.9575323);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1162.9575323);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "pgUfiQ84puWT`J|");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-1281));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1281), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) hour0, (-1278.3999299), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, 0L, 0L, 0L, 0L);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0L);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DefaultHighLowDataset>) day0;
      comparableArray0[1] = (Comparable<DefaultHighLowDataset>) day0;
      comparableArray0[2] = (Comparable<DefaultHighLowDataset>) day0;
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 346.529939566;
      doubleArray1[1] = (-1535.2258223);
      doubleArray1[2] = (-3406.74387);
      doubleArray1[3] = 445.70184;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3406.74387);
      doubleArray2[1] = 445.70184;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 445.70184;
      doubleArray2[4] = 346.529939566;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1535.2258223);
      doubleArray3[1] = (-3406.74387);
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotNull(regularTimePeriod0);
      
      doubleArray3[2] = 346.529939566;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-52L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-696.2), (-258.2233378503853), (-2219.7431488), 1269.1281088664439);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1269.1281);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1269.1281, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, true);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1269.1281, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(582.56405, range0.getUpperBound(), 0.01);
      assertEquals((-52.0), range0.getCentralValue(), 0.01);
      assertEquals(1269.1281, range0.getLength(), 0.01);
      assertEquals((-686.56405), range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-258.2233378503853) <= upper (-696.2).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      double double0 = intervalXYDelegate0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      String string0 = "\\u@7X(C]tiGu";
      categoryTableXYDataset0.add((-2281.3039009), 2.0, string0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("G5>G", 8, 999);
      assertNull(matrixSeries0.getDescription());
      assertEquals(999, matrixSeries0.getColumnsCount());
      assertEquals(7992, matrixSeries0.getItemCount());
      assertEquals(8, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(999, matrixSeries0.getColumnsCount());
      assertEquals(7992, matrixSeries0.getItemCount());
      assertEquals(8, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(matrixSeries0.getDescription());
      assertEquals(999, matrixSeries0.getColumnsCount());
      assertEquals(7992, matrixSeries0.getItemCount());
      assertEquals(8, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(998.0, range1.getLength(), 0.01);
      assertEquals(499.0, range1.getCentralValue(), 0.01);
      assertEquals(998.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-2115));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2115), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, (-1.7976931348623157E308), (-795.695), (-1604.8160777700034), (-1490.576875176));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 940.0, (-619.8511), (-619.8511), 940.0, (-619.8511));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (-795.695));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range2, range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(53L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(53L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(53L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      
      defaultMultiValueCategoryDataset0.add(stack0, integer0, year0);
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(53L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(53L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(double0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1910.233045980182, 1910.233045980182, 1679, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(hijrahEra0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-627L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, 1204.3580658, (-627L), (-2225.5), (-627L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-627.0), range0.getCentralValue(), 0.01);
      assertEquals((-627.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-627.0), range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-627.0), range0.getCentralValue(), 0.01);
      assertEquals((-627.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-627.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2225.5), range1.getLowerBound(), 0.01);
      assertEquals((-2225.5), range1.getCentralValue(), 0.01);
      assertEquals((-2225.5), range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1204.3580658, range2.getUpperBound(), 0.01);
      assertEquals(288.67903290000004, range2.getCentralValue(), 0.01);
      assertEquals((-627.0), range2.getLowerBound(), 0.01);
      assertEquals(1831.3580658, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-627.0), range3.getLowerBound(), 0.01);
      assertEquals(1831.3580658, range3.getLength(), 0.01);
      assertEquals(288.67903290000004, range3.getCentralValue(), 0.01);
      assertEquals(1204.3580658, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(Integer.MAX_VALUE, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(Integer.MAX_VALUE, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3391.382880371;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1539.541732769);
      doubleArray1[3] = (-2.147483648E9);
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (-1955.913);
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3391.382880371;
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2.147483648E9);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-2.147483648E9);
      doubleArray5[1] = 3391.382880371;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1955.913);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-1955.913);
      doubleArray5[7] = (-1.0);
      doubleArray5[8] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1539.541732769);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-1955.913);
      doubleArray6[3] = 3391.382880371;
      doubleArray6[4] = (-225.882);
      doubleArray6[5] = (-1.0);
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = (-1539.541732769);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 3391.382880371;
      doubleArray7[1] = (-225.882);
      doubleArray7[2] = (-1539.541732769);
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (-225.882);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 3391.382880371;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 3391.382880371;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = (-2.147483648E9);
      doubleArray9[1] = (-2.147483648E9);
      doubleArray9[2] = (-2.147483648E9);
      doubleArray9[3] = 3391.382880371;
      doubleArray9[4] = 2.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1623.66362, 0.0, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      assertEquals(HijrahEra.AH, hijrahEra0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "#4{ECza5@=");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(97.221901422598, Double.POSITIVE_INFINITY, "'");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 1.0, 588);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      assertEquals(HijrahEra.AH, hijrahEra0);
      
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, 343L, 343L, 343L, 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 343L, 343L, 343L, 343L, (-1612.28879267));
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      int int0 = defaultOHLCDataset0.indexOf(oHLCDataItem1);
      assertEquals((-1), int0);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(343.0, range1.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(343.0, range2.getLowerBound(), 0.01);
      assertEquals(343.0, range2.getCentralValue(), 0.01);
      assertEquals(343.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(10, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-2016L));
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      
      Second second0 = new Second(mockDate0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals((-1017L), second0.getLastMillisecond());
      assertEquals(57, second0.getSecond());
      assertEquals((-2016L), second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, second0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals((-1017L), second0.getLastMillisecond());
      assertEquals(57, second0.getSecond());
      assertEquals((-2016L), second0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-772.0008257569772);
      doubleArray1[1] = 623.797162186122;
      doubleArray1[2] = 2027.0502516842;
      doubleArray1[3] = (-2026.7412673476);
      doubleArray1[4] = 1753.177690537402;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (-46.81613144413042);
      doubleArray1[7] = 1058.927375564968;
      doubleArray1[8] = (-2685.91950867226);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2026.7412673476);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1440.84411685328);
      doubleArray3[1] = (-772.0008257569772);
      doubleArray3[2] = (-2685.91950867226);
      doubleArray3[3] = (-46.81613144413042);
      doubleArray3[4] = 623.797162186122;
      doubleArray3[5] = 623.797162186122;
      doubleArray3[6] = 623.797162186122;
      doubleArray3[7] = 1350.63729184;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 2027.0502516842;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = 2027.0502516842;
      doubleArray4[3] = (-772.0008257569772);
      doubleArray4[4] = 1058.927375564968;
      doubleArray4[5] = (-772.0008257569772);
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (-2026.7412673476);
      doubleArray4[8] = (-2685.91950867226);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = 1058.927375564968;
      doubleArray5[2] = (-3114.0837);
      doubleArray5[3] = (-772.0008257569772);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 623.797162186122;
      doubleArray6[1] = 1350.63729184;
      doubleArray6[2] = (-25.87733);
      doubleArray6[3] = Double.NaN;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-25.87733);
      doubleArray7[1] = 1058.927375564968;
      doubleArray7[2] = (-2026.7412673476);
      doubleArray7[3] = Double.NaN;
      doubleArray7[4] = Double.NaN;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 2027.0502516842;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = 623.797162186122;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, (-41.277), "UX");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-41.277), (-41.277), "Y07<!??wXA{B<@vWS/6f");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-41.277), range0.getLowerBound(), 0.01);
      assertEquals((-41.277), range0.getCentralValue(), 0.01);
      assertEquals((-41.277), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-41.277), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(3552.063184483866, Double.POSITIVE_INFINITY, "GCCUk,5\"!");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range1);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 3552.063184483866;
      doubleArray1[2] = 3552.063184483866;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 3552.063184483866;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3552.063184483866;
      doubleArray2[1] = 3552.063184483866;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotNull(categoryTableXYDataset1);
      
      categoryTableXYDataset1.add(Double.NaN, Double.NaN, "Null 'rowKey' argument.");
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1, false);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-369.486714);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1253.6), (-369.486714), 462, (-369.486714));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals((-369.486714), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1253.6), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(462, xYSeries0.getItemCount());
      assertEquals((-369.486714), xYSeries0.getMaxY(), 0.01);
      assertEquals((-369.486714), xYSeries0.getMaxX(), 0.01);
      assertArrayEquals(new double[] {(-369.486714)}, doubleArray0, 0.01);
      assertNotNull(xYSeries0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndX(4192, 4192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4192, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, 343L, 343L, 343L, 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getUpperBound(), 0.01);
      assertEquals(343.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 343L;
      doubleArray1[1] = (double) 343L;
      doubleArray1[2] = (double) 343L;
      doubleArray1[3] = (double) 343L;
      doubleArray1[4] = (double) 343L;
      doubleArray1[5] = (double) 343L;
      doubleArray1[6] = (double) 343L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1377.0;
      doubleArray2[1] = (double) 343L;
      doubleArray2[2] = (double) 343L;
      doubleArray2[3] = (double) 343L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1377.0;
      doubleArray3[1] = 1377.0;
      doubleArray3[2] = (double) 343L;
      doubleArray3[3] = 1377.0;
      doubleArray3[4] = 1377.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1377.0;
      doubleArray4[1] = (double) 343L;
      doubleArray4[2] = 1377.0;
      doubleArray4[3] = 1377.0;
      doubleArray4[4] = 1377.0;
      doubleArray4[5] = 1377.0;
      doubleArray4[6] = (double) 343L;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (double) 343L;
      doubleArray5[1] = (double) 343L;
      doubleArray5[2] = (double) 343L;
      doubleArray5[3] = 1377.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 1377.0;
      doubleArray6[1] = (double) 343L;
      doubleArray6[2] = (double) 343L;
      doubleArray6[3] = 1377.0;
      doubleArray6[4] = 1377.0;
      doubleArray6[5] = (-900.751542694);
      doubleArray6[6] = (double) 343L;
      doubleArray6[7] = (double) 343L;
      doubleArray6[8] = (double) 343L;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.8;
      doubleArray7[1] = (-900.751542694);
      doubleArray7[2] = (-900.751542694);
      doubleArray7[3] = 1377.0;
      doubleArray7[4] = 1377.0;
      doubleArray7[5] = 1377.0;
      doubleArray7[6] = (double) 343L;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 1377.0;
      doubleArray8[1] = 1377.0;
      doubleArray8[2] = 0.8;
      doubleArray8[3] = (double) 343L;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Number[][] numberArray0 = new Number[13][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(13, numberArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(13, numberArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      assertEquals(13, numberArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(13, numberArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Hour hour0 = Hour.parseHour("");
      assertNull(hour0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      assertNotNull(hijrahDate0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(hijrahEra0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), 2590.2230529999997, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 343L, (-619.8511), (-1320), Double.POSITIVE_INFINITY, (-1490.576875176));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("5B>0-;F[?q\u0000oHqx`", oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Integer integer0 = new Integer((-1320));
      assertEquals((-1320), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range1);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem0;
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray0[3] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      assertEquals((-1320.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-1320.0), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      comparableArray0[4] = (Comparable<XIntervalSeriesCollection>) xYDataItem0;
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0L, minute0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Minute minute1 = (Minute)minute0.previous();
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0L, minute0.getLastMillisecond());
      assertEquals(23, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute1, (Number) 59);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0L, minute0.getLastMillisecond());
      assertEquals(23, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(timeSeriesDataItem0);
      
      comparableArray0[5] = (Comparable<XIntervalSeriesCollection>) timeSeriesDataItem0;
      comparableArray0[6] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem1;
      comparableArray0[7] = (Comparable<XIntervalSeriesCollection>) oHLCDataItem1;
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-619.8511);
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1490.576875176);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-2582.5954009486);
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (-1490.576875176);
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (double) 0L;
      doubleArray3[2] = (double) 343L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-1490.576875176);
      doubleArray5[1] = (-2582.5954009486);
      doubleArray5[2] = (double) 0L;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = (double) (-1320);
      doubleArray5[6] = (double) 0L;
      doubleArray5[7] = (double) 0L;
      doubleArray5[8] = (-619.8511);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = (-619.8511);
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = (-2582.5954009486);
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = 2590.2230529999997;
      doubleArray6[6] = (double) 343L;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-373.84045);
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = (double) (-1320);
      doubleArray8[2] = (-2582.5954009486);
      doubleArray8[3] = (-619.8511);
      doubleArray8[4] = (double) 343L;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (-619.8511);
      doubleArray9[1] = (-373.84045);
      doubleArray9[2] = (-2582.5954009486);
      doubleArray9[3] = (double) 0;
      doubleArray9[4] = (double) 0;
      doubleArray9[5] = (-373.84045);
      doubleArray9[6] = Double.NEGATIVE_INFINITY;
      doubleArray9[7] = 2590.2230529999997;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "Requires 'start' < 'end'.";
      categoryTableXYDataset0.add(4.0, 0.8, "Requires 'start' < 'end'.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.4, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XYBarDataset>) quarter0;
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 4.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 4;
      doubleArray3[1] = 0.8;
      doubleArray3[2] = 4.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.8;
      doubleArray4[1] = 4.0;
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter1.equals((Object)quarter0));
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray2;
      categoryTableXYDataset0.add((-27.315800512), 1.0, "Null 'rowData' argument.");
      assertEquals(31.315800512, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(31.315800512, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(31.315800512, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.19999999999999996, range2.getLength(), 0.01);
      assertEquals(0.8, range2.getLowerBound(), 0.01);
      assertEquals(0.9, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      Number[][] numberArray0 = new Number[9][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 4.0;
      numberArray1[1] = (Number) 4;
      numberArray1[2] = (Number) 4.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 4.0;
      numberArray2[1] = (Number) 4.0;
      numberArray2[2] = (Number) 4.0;
      numberArray2[3] = (Number) 4.0;
      numberArray2[4] = (Number) 1;
      numberArray2[5] = (Number) 0.8;
      numberArray2[6] = (Number) 1.0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 4.0;
      numberArray3[1] = (Number) 0.8;
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      // Undeclared exception!
      try { 
        defaultKeyedValues0.getValue((-1894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-461.7665643));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertTrue(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer1, (Number) integer0, (Comparable) integer1, (Comparable) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals(200.0, range0.getLength(), 0.01);
      assertEquals((-30100.0), range0.getLowerBound(), 0.01);
      assertEquals((-29900.0), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate((-134), (-134), (-134), 54, 1);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Year year0 = new Year(mockDate0, timeZone0);
      assertEquals("Fri Jun 21 06:01:00 GMT 1754", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1754L, year0.getSerialIndex());
      assertEquals(1754, year0.getYear());
      assertEquals((-6801472740000L), year0.getFirstMillisecond());
      assertEquals((-6801472740000L), year0.getLastMillisecond());
      assertEquals("1754", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals("Fri Jun 21 06:01:00 GMT 1754", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1754L, year0.getSerialIndex());
      assertEquals(1754, year0.getYear());
      assertEquals((-6801472740000L), year0.getFirstMillisecond());
      assertEquals((-6801472740000L), year0.getLastMillisecond());
      assertEquals("1754", year0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("Fri Jun 21 06:01:00 GMT 1754", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1754L, year0.getSerialIndex());
      assertEquals(1754, year0.getYear());
      assertEquals((-6801472740000L), year0.getFirstMillisecond());
      assertEquals((-6801472740000L), year0.getLastMillisecond());
      assertEquals("1754", year0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 770.61659, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(770.61659, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-41.277), (-41.277), "Y07<!??wXA{B<@vWS/6f");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-41.277), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-41.777), range0.getLowerBound(), 0.01);
      assertEquals((-40.777), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-3791));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-3791), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2715.59487907743);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-1669.04);
      doubleArray1[4] = (-2554.344522);
      doubleArray1[5] = 1035.47466851528;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2554.344522);
      doubleArray2[1] = (-2554.344522);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("0YF0<\"zloy[/Wjtx", "0YF0<\"zloy[/Wjtx", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-5269.93940107743), number0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 29);
      assertEquals(3, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(29, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (double) 23, 23);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(300.0, double0, 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 1261.0;
      doubleArray1[2] = (-184.49710841);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-517.63);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 400.0;
      doubleArray1[7] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1261.0;
      doubleArray2[1] = 1261.0;
      doubleArray2[2] = 1261.0;
      doubleArray2[3] = (-517.63);
      doubleArray2[4] = 6.283185307179586;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-184.49710841);
      doubleArray3[1] = (-184.49710841);
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-517.63);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 1261.0;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 400.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Null 'rowKeys' argument.", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1261.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-1320));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), 1851.823363451, 343L, (-1899.0), 2364.0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      mockDate0.setTime(565L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2666.57481), (-2666.57481), 2364.0, (-1320), 5267.101771);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1810.058919442115));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, false);
      assertEquals(9, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(565.0, range0.getLowerBound(), 0.01);
      assertEquals(565.0, range0.getCentralValue(), 0.01);
      assertEquals(565.0, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(565.0, range0.getLowerBound(), 0.01);
      assertEquals(565.0, range0.getCentralValue(), 0.01);
      assertEquals(565.0, range0.getUpperBound(), 0.01);
      assertEquals((-1609.5), range1.getCentralValue(), 0.01);
      assertEquals(579.0, range1.getLength(), 0.01);
      assertEquals((-1899.0), range1.getLowerBound(), 0.01);
      assertEquals((-1320.0), range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range1, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(565.0, range0.getLowerBound(), 0.01);
      assertEquals(565.0, range0.getCentralValue(), 0.01);
      assertEquals(565.0, range0.getUpperBound(), 0.01);
      assertEquals((-1609.5), range1.getCentralValue(), 0.01);
      assertEquals(579.0, range1.getLength(), 0.01);
      assertEquals((-1899.0), range1.getLowerBound(), 0.01);
      assertEquals((-1320.0), range1.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, (-1673));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1673), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1673), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1857.76047272;
      doubleArray1[3] = (-1737.1801681866632);
      doubleArray1[4] = (-30000.0);
      doubleArray1[5] = 949.1886575;
      doubleArray1[6] = (-873.2110365);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1857.76047272;
      doubleArray3[1] = (-873.2110365);
      doubleArray3[2] = 1857.76047272;
      doubleArray3[3] = 949.1886575;
      doubleArray3[4] = 1857.76047272;
      doubleArray3[5] = (-1737.1801681866632);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1857.76047272;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HijrahEra hijrahEra0 = HijrahEra.AH;
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(hijrahEra0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(32);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, 343L, 1009.5331995, (-1.0), 32);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 343L, (-1612.28879267), (-1.0), 2137.65217794007, 9.6285281632);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotNull(oHLCDataItem1);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.next();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour1, oHLCDataItemArray0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.96204640676E11, range0.getCentralValue(), 0.01);
      assertEquals(1.392409281288E12, range0.getLength(), 0.01);
      assertEquals(32.0, range0.getLowerBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.96204640676E11, range0.getCentralValue(), 0.01);
      assertEquals(1.392409281288E12, range0.getLength(), 0.01);
      assertEquals(32.0, range0.getLowerBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(2138.65217794007, range1.getLength(), 0.01);
      assertEquals(1068.326088970035, range1.getCentralValue(), 0.01);
      assertEquals(2137.65217794007, range1.getUpperBound(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = categoryTableXYDataset0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "wSNqvq?t/<?DgmS=}&");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.0, 8, "wSNqvq?t/<?DgmS=}&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("6[O+;\"Il,}.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 1196.1141051176);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1196.1141051176, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      boolean boolean0 = defaultKeyedValues2DDataset0.equals(xYBarDataset0);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1196.1141051176, xYBarDataset0.getBarWidth(), 0.01);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TimeSeries timeSeries0 = new TimeSeries(integer0, "", "");
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotNull(timeSeriesCollection1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection1);
      assertEquals(Double.NaN, number0);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertNotNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1622.3;
      doubleArray1[1] = (-2082.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1622.3;
      doubleArray2[1] = (-2082.0);
      doubleArray2[2] = 1622.3;
      doubleArray2[3] = 1622.3;
      doubleArray2[4] = 2097.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2082.0);
      doubleArray3[1] = 2097.5;
      doubleArray3[2] = (-2082.0);
      doubleArray3[3] = 1622.3;
      doubleArray3[4] = (-2082.0);
      doubleArray3[5] = 1622.3;
      doubleArray3[6] = 2097.5;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2082.0);
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 2097.5;
      doubleArray4[3] = 2097.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2082.0);
      doubleArray5[1] = 1622.3;
      doubleArray5[2] = (-2082.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (double) 23, 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 23;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 23;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 23;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SeriesChangeType.REMOVE", "", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1899.0), (-793.914998), "7pi+M");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DatasetUtilities", 377, 2);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(754, matrixSeries0.getItemCount());
      assertEquals(377, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(754, matrixSeries0.getItemCount());
      assertEquals(377, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(754, matrixSeries0.getItemCount());
      assertEquals(377, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 343L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1381.9493);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 343L;
      doubleArray3[1] = (double) 343L;
      doubleArray3[2] = (-619.8511);
      doubleArray3[3] = (-619.8511);
      doubleArray3[4] = (-1381.9493);
      doubleArray3[5] = (-619.8511);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(1724.9493, range0.getLength(), 0.01);
      assertEquals((-1381.9493), range0.getLowerBound(), 0.01);
      assertEquals((-519.47465), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(1724.9493, range0.getLength(), 0.01);
      assertEquals((-1381.9493), range0.getLowerBound(), 0.01);
      assertEquals((-519.47465), range0.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getUpperBound(), 0.01);
      assertEquals((-1381.9493), range1.getLowerBound(), 0.01);
      assertEquals((-519.47465), range1.getCentralValue(), 0.01);
      assertEquals(1724.9493, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals((-519.47465), range2.getCentralValue(), 0.01);
      assertEquals(1724.9493, range2.getLength(), 0.01);
      assertEquals((-1381.9493), range2.getLowerBound(), 0.01);
      assertEquals(343.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue((-939.29662541729), (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-939.29662541729), range0.getLowerBound(), 0.01);
      assertEquals((-939.29662541729), range0.getCentralValue(), 0.01);
      assertEquals((-939.29662541729), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) integer0);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), 343L, (-1490.576875176), 343L, 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 343L, 343L, (-1490.576875176), 1005.4960119325654, (-1612.28879267));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2527.0), 343L, (-1490.576875176), (-2527.0), (-1490.576875176));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[5] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1810.058919442115));
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(xYBarDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1248.0294597210575) <= upper (-562.0294597210575).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-1320));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), (-619.8511), 343L, (-1899.0), 2364.0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2666.57481), (-2666.57481), 2364.0, (-1320), 5267.101771);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("5B>0-;F[?q\u0000oHqx`", oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (343.0) <= upper (-619.8511).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Duplicate items in 'columnKeys'.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1900.0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1899.0, range2.getLowerBound(), 0.01);
      assertEquals(1900.0, range2.getUpperBound(), 0.01);
      assertEquals(1899.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), (-619.8511), (-1490.576875176), (-619.8511));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, (-576));
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-577), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 19.867271591467603);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(19.867271591467603, range0.getLowerBound(), 0.01);
      assertEquals(19.867271591467603, range0.getUpperBound(), 0.01);
      assertEquals(19.867271591467603, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-577), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(19.867271591467603, range0.getLowerBound(), 0.01);
      assertEquals(19.867271591467603, range0.getUpperBound(), 0.01);
      assertEquals(19.867271591467603, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range1);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-1320));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), (-619.8511), 343L, (-1899.0), 2364.0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2666.57481), (-2666.57481), 2364.0, (-1320), 5267.101771);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("5B>0-;F[?q\u0000oHqx`", oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1810.058919442115));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, false);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-1320.0), range0.getLowerBound(), 0.01);
      assertEquals((-1320.0), range0.getCentralValue(), 0.01);
      assertEquals((-1320.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-1320.0), range0.getLowerBound(), 0.01);
      assertEquals((-1320.0), range0.getCentralValue(), 0.01);
      assertEquals((-1320.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1320.0), range1.getUpperBound(), 0.01);
      assertEquals((-1609.5), range1.getCentralValue(), 0.01);
      assertEquals((-1899.0), range1.getLowerBound(), 0.01);
      assertEquals(579.0, range1.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Date[] dateArray0 = new Date[1];
      double[][] doubleArray0 = new double[1][1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 2200, 707, 9, 1, 90);
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 90, (-1769.0), 707, 19.867271591467603);
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 9, 2200, 1.7976931348623157E308, 1.0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, Double.POSITIVE_INFINITY, 9, 90, 515.01948602834);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      
      defaultOHLCDataset1.sortDataByDate();
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      
      ArrayList<IntervalXYDelegate> arrayList0 = new ArrayList<IntervalXYDelegate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertFalse(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Sun Apr 07 09:02:30 GMT 2086", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2, 1106);
      assertEquals(1106, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-41.277), 1946.752880961, "Y07<!??wXA{BvWS/6f");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-41.277), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-41.777), range0.getLowerBound(), 0.01);
      assertEquals((-40.777), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-41.777), range1.getLowerBound(), 0.01);
      assertEquals((-40.777), range1.getUpperBound(), 0.01);
      assertEquals((-41.277), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      HijrahEra hijrahEra2 = HijrahEra.AH;
      boolean boolean2 = arrayList0.add(hijrahEra2);
      assertTrue(boolean2);
      assertSame(hijrahEra2, hijrahEra1);
      assertSame(hijrahEra2, hijrahEra0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra2));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), (-619.8511), (-1490.576875176), (-619.8511));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertSame(hijrahEra1, hijrahEra0);
      assertSame(hijrahEra1, hijrahEra2);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertSame(hijrahEra1, hijrahEra2);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.contains(hijrahEra2));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertSame(hijrahEra1, hijrahEra0);
      assertSame(hijrahEra1, hijrahEra2);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals((-1490.576875176), range1.getLowerBound(), 0.01);
      assertEquals((-1490.576875176), range1.getCentralValue(), 0.01);
      assertEquals((-1490.576875176), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.contains(hijrahEra2));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 343L, (-1.0), 343.0, (-271.1), (-1.7976931348623157E308));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1005.4960119325654, 1.7976931348623157E308, (-1490.576875176), 5149.05064, (-3825.8));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Hour hour1 = (Hour)hour0.previous();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour1, oHLCDataItemArray0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(arrayList0.contains(hijrahEra1));
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range1, range0);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertNotSame(range0, range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5149.05064, range1.getLowerBound(), 0.01);
      assertEquals(5149.05064, range1.getCentralValue(), 0.01);
      assertEquals(5149.05064, range1.getUpperBound(), 0.01);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertTrue(arrayList0.contains(hijrahEra1));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1805), 3);
      assertEquals(3, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1805), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer1, (Comparable) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Comparable comparable0 = keyToGroupMap0.getGroup(integer1);
      assertEquals("Default Group", comparable0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(comparable0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-1382));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      HijrahEra hijrahEra2 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra2);
      assertTrue(boolean1);
      assertSame(hijrahEra2, hijrahEra0);
      assertSame(hijrahEra2, hijrahEra1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 1296.8337524625763, (-279.2987116), (-619.8511));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-279.2987116), 343L, (-1573.4292497), 343L, (-619.8511));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1296.8337524625763, (-1490.576875176), 698.501, 343L, Double.NEGATIVE_INFINITY);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[4] = oHLCDataItem2;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertSame(hijrahEra1, hijrahEra2);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra2);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertSame(hijrahEra1, hijrahEra2);
      assertSame(hijrahEra1, hijrahEra0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range1.getUpperBound(), 0.01);
      assertEquals((-279.2987116), range1.getLowerBound(), 0.01);
      assertEquals(622.2987115999999, range1.getLength(), 0.01);
      assertEquals(31.850644200000005, range1.getCentralValue(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "xm>geB+^_9t$n'zSh";
      categoryTableXYDataset0.add(23.0, 23.0, "xm>geB+^_9t$n'zSh");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 153.82037537856);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(153.82037537856, range0.getLowerBound(), 0.01);
      assertEquals(165.32037537856, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(176.82037537856, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(153.82037537856, 1107.34200175635);
      assertEquals(1107.34200175635, powerFunction2D0.getB(), 0.01);
      assertEquals(153.82037537856, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double double0 = (-2113.055);
      double double1 = (-4109.148299891688);
      int int0 = 1852;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries((-730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), 343L, (-1490.576875176), 343L, 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 343L, 343L, (-1490.576875176), 1005.4960119325654, (-1612.28879267));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, false);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra1));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(674.2480059662827, range1.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getLowerBound(), 0.01);
      assertEquals(662.4960119325654, range1.getLength(), 0.01);
      assertEquals(1005.4960119325654, range1.getUpperBound(), 0.01);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra1));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-1.0), number0);
      assertTrue(number0.equals((Object)double0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)number0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(double1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)number0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 3);
      MockDate mockDate0 = new MockDate(1708L);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1708L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1707L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1708L, week0.getFirstMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1707L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(52, week1.getWeek());
      assertEquals(104409L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1969, week1.getYearValue());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      comparableArray0[0] = (Comparable<XYBarDataset>) week1;
      Month month0 = null;
      try {
        month0 = new Month(53, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Month outside valid range.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 723, 1268.745714193528, 723, 0.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      
      double double0 = xYSeriesCollection0.getDomainLowerBound(false);
      assertEquals(723.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-2103), 999);
      assertEquals(999, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2103), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 1, 1, (-506), 707, (-506));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 707;
      doubleArray1[1] = (double) (-506);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("Fri Jan 11 09:38:34 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {707.0, (-506.0)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, numberArray0.length);
      assertArrayEquals(new double[] {707.0, (-506.0)}, doubleArray1, 0.01);
      assertNotNull(numberArray0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-2.176554086E12), number0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("Fri Jan 11 09:38:34 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {707.0, (-506.0)}, doubleArray1, 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(707.0, number1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("Fri Jan 11 09:38:34 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {707.0, (-506.0)}, doubleArray1, 0.01);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("Fri Jan 11 09:38:34 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(707.0, range0.getLowerBound(), 0.01);
      assertEquals(707.0, range0.getCentralValue(), 0.01);
      assertEquals(707.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {707.0, (-506.0)}, doubleArray1, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      MockDate mockDate0 = new MockDate(2097, 3015, 28);
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) 2097, (double) 2097, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(2096.5, range0.getLowerBound(), 0.01);
      assertEquals(2097.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(2097.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(string0);
      
      int int0 = defaultIntervalCategoryDataset0.getColumnIndex(fixedMillisecond0);
      assertEquals((-1), int0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack1 = new Stack<Integer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(integer0));
      assertNotNull(stack1);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertTrue(boolean0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Object object0 = defaultKeyedValues2DDataset0.clone();
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertNotSame(object0, defaultKeyedValues2DDataset0);
      assertTrue(object0.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(object0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)object0));
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)object0));
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack1, range1, false);
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertNotSame(stack1, stack0);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)object0));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(stack1.contains(integer0));
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = new Integer((-1024));
      assertEquals((-1024), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-2598));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2598), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 994.59, 1336);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) hour0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = null;
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) integer0, (Comparable) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, 1.7976931348623157E308, (-2555));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2555);
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 40.955478513308805;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (double) 23;
      doubleArray0[1] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 40.955478513308805;
      doubleArray4[2] = 40.955478513308805;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[8][8];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      numberArray1[1] = (Number) Double.POSITIVE_INFINITY;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, 23);
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartX(23, (-2555));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("YYdF}<niHzX0`ayk-~", "YYdF}<niHzX0`ayk-~", "YYdF}<niHzX0`ayk-~");
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("YYdF}<niHzX0`ayk-~", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("YYdF}<niHzX0`ayk-~", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      defaultKeyedValues2DDataset0.setValue((Number) byte0, (Comparable) "YYdF}<niHzX0`ayk-~", (Comparable) byte0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "YYdF}<niHzX0`ayk-~");
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      HierarchyBoundsListener hierarchyBoundsListener0 = AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      assertNull(hierarchyBoundsListener0);
      
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      assertNull(hierarchyBoundsListener1);
      
      boolean boolean0 = defaultKeyedValues2DDataset0.hasListener((EventListener) null);
      assertFalse(boolean0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (double) 23, (int) (byte)1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "YYdF}<niHzX0`ayk-~");
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 45;
      doubleArray1[1] = (double) 45;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (double) 45;
      doubleArray1[4] = (double) 45;
      doubleArray1[5] = (double) 45;
      doubleArray1[6] = (double) 45;
      doubleArray1[7] = (double) 45;
      doubleArray1[8] = (double) 45;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 45;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) 45;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (double) 45;
      doubleArray2[5] = 786.34819625979;
      doubleArray2[6] = 1038.606755337;
      doubleArray2[7] = (double) 45;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 638.714686026879;
      doubleArray3[1] = (double) 45;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1038.606755337;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 45;
      doubleArray5[1] = 1038.606755337;
      doubleArray5[2] = (double) 45;
      doubleArray5[3] = 638.714686026879;
      doubleArray5[4] = 638.714686026879;
      doubleArray5[5] = 1038.606755337;
      doubleArray5[6] = 638.714686026879;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = (double) 45;
      doubleArray6[2] = 786.34819625979;
      doubleArray6[3] = 1.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-212), 1667);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1667, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-212), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Duplicate items in 'columnKeys'.", 1.5, 5);
      assertNotNull(pieDataset0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      stringArray0[1] = "Duplicate items in 'columnKeys'.";
      stringArray0[2] = "Duplicate items in 'columnKeys'.";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      stringArray0[4] = "Duplicate items in 'columnKeys'.";
      stringArray0[5] = "Duplicate items in 'columnKeys'.";
      stringArray0[6] = "Duplicate items in 'columnKeys'.";
      stringArray0[7] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Year year0 = new Year((-4596));
      assertEquals((-4596L), year0.getSerialIndex());
      assertEquals((-4596), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-4596", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-4596L), year0.getSerialIndex());
      assertEquals((-4596), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-4596", year0.toString());
      assertEquals("-4595", year1.toString());
      assertEquals((-4595L), year1.getSerialIndex());
      assertEquals((-4595), year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) year1);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(8, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-4596L), year0.getSerialIndex());
      assertEquals((-4596), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-4596", year0.toString());
      assertEquals("-4595", year1.toString());
      assertEquals((-4595L), year1.getSerialIndex());
      assertEquals((-4595), year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "'minY'cannot be INF or NaN.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 1, 1, (-506), 707, (-506));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 594.7;
      doubleArray0[2] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hijrahEra0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0, 594.7, 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertEquals((-2.176554086E12), number0);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0, 594.7, 1.0}, doubleArray0, 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(154, 168, 168, (-1), (-1), 154);
      assertNotNull(mockDate0);
      
      Integer integer0 = new Integer(154);
      assertEquals(154, (int)integer0);
      assertNotNull(integer0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[7];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number[] numberArray0 = DefaultHighLowDataset.createNumberArray(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, numberArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(numberArray0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-1.22192928E13), number0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-2.147483648E9));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals((-2.147483648E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, (-1945.76), "7Gnfa#12.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(19.867271591467603, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-1945.76), number0);
      assertFalse(number0.equals((Object)double0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1945.76), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-972.88), range0.getCentralValue(), 0.01);
      assertEquals(1945.76, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-1945.76), number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number1);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1945.76), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-972.88), range0.getCentralValue(), 0.01);
      assertEquals(1945.76, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 0.0;
      Date[] dateArray0 = new Date[1];
      boolean boolean0 = false;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 0.0;
      Date[] dateArray0 = new Date[1];
      boolean boolean0 = true;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, 19.367271591467603, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(19.367271591467603, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(19.367271591467603, number0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9.683635795733801, range0.getCentralValue(), 0.01);
      assertEquals(19.367271591467603, range0.getUpperBound(), 0.01);
      assertEquals(19.367271591467603, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(19.367271591467603, number1);
      assertTrue(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(154, (-1), (-3079), 168, 1, 723);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(2382653583000L, long0);
      assertEquals("Mon Jul 03 00:13:03 GMT 2045", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockGregorianCalendar0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-1.22192928E13), number0);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 1821, 14);
      assertEquals(1821, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(14, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-846.4920415228), 1821);
      assertEquals(1821.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-846.4920415228), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-846.4920415228), 14, 2, integer0);
      assertEquals(1821.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-846.4920415228), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-846.4920415228), xYSeries0.getMinX(), 0.01);
      assertEquals(14.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, (-933.61681525741), "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-933.61681525741), range0.getLowerBound(), 0.01);
      assertEquals((-933.61681525741), range0.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      categoryTableXYDataset0.setSelectionState((XYDatasetSelectionState) null);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = new Integer((-2144530702));
      assertEquals((-2144530702), (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[5] = 0.0;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("Duplicate items in 'columnKeys'.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 994.59, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 994.59, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)gX");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=T7n)gX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T7n)gX", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(154, 168, 168, (-1), (-1), 154);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(3107026894000L, long0);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[7];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-1.22192928E13), number0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Fri Jun 15 23:01:34 GMT 2068", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, (-786), (-786), (-1), (-786));
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 3015, 2097, 154, 154, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(2, dateArray0.length);
      assertEquals("Sat Jan 01 12:43:07 GMT 4805", mockDate1.toString());
      
      Range range0 = new Range(0.0, 554);
      assertEquals(277.0, range0.getCentralValue(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(554.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(277.0, range0.getCentralValue(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(554.0, range0.getLength(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(554.0, range2.getLowerBound(), 0.01);
      assertEquals(554.0, range2.getCentralValue(), 0.01);
      assertEquals(554.0, range2.getUpperBound(), 0.01);
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = "";
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = vector0.add(defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 3015, 2097, 154, 154, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(2, dateArray0.length);
      assertEquals("Sat Jan 01 12:43:07 GMT 4805", mockDate1.toString());
      
      Range range0 = new Range(0.0, 554);
      assertEquals(554.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(277.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(554.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(277.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][9][5];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.previous();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(319L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond1);
      
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (-3205.617703);
      doubleArray2[3] = (-2492.0391997);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3205.617703);
      doubleArray4[1] = (-2492.0391997);
      doubleArray4[2] = 1148.4116559599;
      doubleArray4[3] = (-3205.617703);
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (-3205.617703);
      doubleArray4[6] = (-2492.0391997);
      doubleArray4[7] = (-3205.617703);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-2492.0391997);
      doubleArray5[1] = (-3205.617703);
      doubleArray5[2] = (-3205.617703);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (-3205.617703);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = 1148.4116559599;
      doubleArray8[1] = 1148.4116559599;
      doubleArray8[2] = (-3205.617703);
      doubleArray8[3] = (double) 0;
      doubleArray8[4] = (-2492.0391997);
      doubleArray8[5] = (double) 999;
      doubleArray0[7] = doubleArray8;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 213);
      assertEquals(8, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(213, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) millisecond1, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 213, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 0.0;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("Duplicate items in 'columnKeys'.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 154, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(2, dateArray0.length);
      assertEquals("Sat Nov 03 12:43:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, (-933.61681525741), "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-933.61681525741), range0.getLowerBound(), 0.01);
      assertEquals((-933.61681525741), range0.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Integer integer0 = new Integer((-2144530702));
      assertEquals((-2144530702), (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number1);
      assertTrue(number1.equals((Object)number0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 154, (-786));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 12:20:54 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      MockDate mockDate0 = new MockDate(684, 30, 2648);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(684);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(30, 684, 30, 686, 684, 53);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 686;
      doubleArray1[2] = (double) 2097;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 2648;
      doubleArray1[5] = (-933.61681525741);
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 2097;
      doubleArray1[8] = (double) 30;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sat Feb 28 01:24:53 GMT 1987", mockDate1.toString());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 686.0, 2097.0, 1.0, 2648.0, (-933.61681525741), 1.0, 2097.0, 30.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(1, dateArray0.length);
      assertEquals("Sat Feb 28 01:24:53 GMT 1987", mockDate1.toString());
      
      Range range0 = new Range((-2930.724069886), 1691.7);
      assertEquals(4622.424069886, range0.getLength(), 0.01);
      assertEquals((-2930.724069886), range0.getLowerBound(), 0.01);
      assertEquals((-619.512034943), range0.getCentralValue(), 0.01);
      assertEquals(1691.7, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(53);
      assertEquals(53L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      Range range1 = Range.shift(range0, (-976.365727892767), true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4622.424069886, range0.getLength(), 0.01);
      assertEquals((-2930.724069886), range0.getLowerBound(), 0.01);
      assertEquals((-619.512034943), range0.getCentralValue(), 0.01);
      assertEquals(1691.7, range0.getUpperBound(), 0.01);
      assertEquals((-3907.089797778767), range1.getLowerBound(), 0.01);
      assertEquals(715.334272107233, range1.getUpperBound(), 0.01);
      assertEquals((-1595.877762835767), range1.getCentralValue(), 0.01);
      assertEquals(4622.424069886, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4622.424069886, range0.getLength(), 0.01);
      assertEquals((-2930.724069886), range0.getLowerBound(), 0.01);
      assertEquals((-619.512034943), range0.getCentralValue(), 0.01);
      assertEquals(1691.7, range0.getUpperBound(), 0.01);
      assertEquals("Sat Feb 28 01:24:53 GMT 1987", mockDate1.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 686.0, 2097.0, 1.0, 2648.0, (-933.61681525741), 1.0, 2097.0, 30.0}, doubleArray1, 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, (-933.61681525741), "Null 'dataset' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(1, int0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-933.61681525741), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-933.61681525741), range0.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Integer integer0 = new Integer((-2144530702));
      assertEquals((-2144530702), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(18.867271591467603, range1.getLowerBound(), 0.01);
      assertEquals(19.367271591467603, range1.getCentralValue(), 0.01);
      assertEquals(19.867271591467603, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate(10, 709, (-786), 554, 10, (-786));
      assertNotNull(mockDate0);
      
      mockDate0.setTime(1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 2648, 1, 2648, 2097, 709);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-786);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 709;
      doubleArray0[3] = (double) 547;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2097;
      doubleArray1[1] = (-878.44006059);
      doubleArray1[2] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2097.0, (-878.44006059), 10.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-786.0), 1.0, 709.0, 547.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[2]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(5, dateArray0.length);
      assertEquals("Sat Dec 21 19:08:49 GMT 4768", mockDate1.toString());
      
      Range range0 = new Range((-786), (-786));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-786.0), range0.getCentralValue(), 0.01);
      assertEquals((-786.0), range0.getUpperBound(), 0.01);
      assertEquals((-786.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((-2556L));
      assertEquals((-2556L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-786.0), range0.getCentralValue(), 0.01);
      assertEquals((-786.0), range0.getUpperBound(), 0.01);
      assertEquals((-786.0), range0.getLowerBound(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      assertArrayEquals(new double[] {2097.0, (-878.44006059), 10.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-786.0), 1.0, 709.0, 547.0}, doubleArray0, 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 154;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = (double) (-786);
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-786.0), range0.getLowerBound(), 0.01);
      assertEquals(940.0, range0.getLength(), 0.01);
      assertEquals(154.0, range0.getUpperBound(), 0.01);
      assertEquals((-316.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertEquals(2, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(list0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNull(range1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-786.0));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      boolean boolean1 = arrayList0.add(hijrahEra0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3368.0, (-2.147483648E9), 3368.0, (-1206.9627), (-1490.576875176));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = new MockDate(53, 53, 53, 53, 53, 676);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 23.0, 623.9278574614295, (-1206.9627), 676, 0.8);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jul 25 06:04:16 GMT 1957", mockDate1.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra0, oHLCDataItemArray0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(3, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-3.92493344E11), range0.getLowerBound(), 0.01);
      assertEquals((-3.92493344E11), range0.getCentralValue(), 0.01);
      assertEquals((-3.92493344E11), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((String) null, (String) null, "@NLOOR=g/Z2[ewGqZ\".", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[3];
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 616.08);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(616.08, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 616.08, 692, "YYdF}<niHzX0`ayk-~");
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(616.08, powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(692, xYSeries0.getItemCount());
      assertEquals(616.08, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(616.08, powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(692, xYSeries0.getItemCount());
      assertEquals(616.08, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getEndX(692, 699);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 692, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, 1.5, "y7ZNQj=crc5qNaW.!");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Integer integer1 = new Integer(68);
      assertEquals(68, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.5, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 1266.848);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1266.848, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1266.848, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      assertEquals(1.5, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2146725654), "Null 'visibleSeriesKeys' argument.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Null 'visibleSeriesKeys' argument.,offset=-2146725654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'visibleSeriesKeys' argument.", simpleTimeZone0.getID());
      assertEquals((-2146725654), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, (-2146725654));
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2146725655), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2146725655), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Range range2 = Range.combine((Range) null, (Range) null);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2146725655), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(90, 23);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate(554, 554, (-1), 554, (-2172), (-786));
      assertNotNull(mockDate0);
      
      long long0 = new Integer(554);
      assertEquals(554, long0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 554;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 554;
      doubleArray1[3] = (double) 10;
      doubleArray1[4] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(555.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(276.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(554.0, range2.getUpperBound(), 0.01);
      assertEquals(276.5, range2.getCentralValue(), 0.01);
      assertEquals(555.0, range2.getLength(), 0.01);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1731.25526), (-1731.25526), "Null 'xRange' argument");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1731.25526), range0.getCentralValue(), 0.01);
      assertEquals((-1731.25526), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1731.25526), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Integer integer0 = new Integer((-2144530702));
      assertEquals((-2144530702), (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-1731.25526), number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1731.25526), range1.getCentralValue(), 0.01);
      assertEquals((-1731.25526), range1.getLowerBound(), 0.01);
      assertEquals((-1731.25526), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), (-619.8511), (-1490.576875176), 2443.20655102998);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean2);
      assertSame(hijrahEra1, hijrahEra0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(343.0, range1.getCentralValue(), 0.01);
      assertEquals(343.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(343.0, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      MockDate mockDate0 = new MockDate(2097, 3015, 28);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(5123L);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(28, 28, 3015, 2097, 2097, 682);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2097;
      doubleArray0[1] = (double) 5123L;
      doubleArray0[2] = (double) 28;
      doubleArray0[3] = (double) 5123L;
      doubleArray0[4] = (double) 3015;
      doubleArray0[5] = (double) 28;
      doubleArray0[6] = (double) 682;
      doubleArray0[7] = (double) 28;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2097.0, 5123.0, 28.0, 5123.0, 3015.0, 28.0, 682.0, 28.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate0.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(1, dateArray0.length);
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate0.toString());
      
      Range range0 = new Range((-318.337352), (-178.72746131));
      assertEquals((-178.72746131), range0.getUpperBound(), 0.01);
      assertEquals((-248.532406655), range0.getCentralValue(), 0.01);
      assertEquals((-318.337352), range0.getLowerBound(), 0.01);
      assertEquals(139.60989069000001, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(5123L));
      assertNotNull(linkedList0);
      
      Long long0 = new Long(682);
      assertEquals(682L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      assertFalse(linkedList0.contains(5123L));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-178.72746131), range0.getUpperBound(), 0.01);
      assertEquals((-248.532406655), range0.getCentralValue(), 0.01);
      assertEquals((-318.337352), range0.getLowerBound(), 0.01);
      assertEquals(139.60989069000001, range0.getLength(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      assertFalse(linkedList0.contains(5123L));
      assertArrayEquals(new double[] {2097.0, 5123.0, 28.0, 5123.0, 3015.0, 28.0, 682.0, 28.0}, doubleArray0, 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, 90);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(89, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2786.27695525886));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2786.27695525886), range0.getCentralValue(), 0.01);
      assertEquals((-2786.27695525886), range0.getUpperBound(), 0.01);
      assertEquals((-2786.27695525886), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertNotNull(defaultTableXYDataset1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      SortedSet<String> sortedSet0 = treeSet0.subSet("YVx;aO nOaIi{9-:9", "YVx;aO nOaIi{9-:9");
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertFalse(treeSet0.contains("YVx;aO nOaIi{9-:9"));
      assertFalse(sortedSet0.contains("YVx;aO nOaIi{9-:9"));
      assertNotNull(sortedSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) sortedSet0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("YVx;aO nOaIi{9-:9"));
      assertFalse(sortedSet0.contains("YVx;aO nOaIi{9-:9"));
      assertFalse(list0.contains("YVx;aO nOaIi{9-:9"));
      assertNotNull(list0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) list0, range1, false);
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(range1, range0);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("YVx;aO nOaIi{9-:9"));
      assertFalse(sortedSet0.contains("YVx;aO nOaIi{9-:9"));
      assertFalse(list0.contains("YVx;aO nOaIi{9-:9"));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), (-619.8511), (-1490.576875176), 2443.20655102998);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertSame(hijrahEra1, hijrahEra0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals((-1490.576875176), range1.getLowerBound(), 0.01);
      assertEquals((-1490.576875176), range1.getCentralValue(), 0.01);
      assertEquals((-1490.576875176), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-4465));
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), 168, 154);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2242761960000L), long0);
      assertEquals("Tue Dec 06 02:34:00 GMT 1898", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[7];
      int int0 = mockGregorianCalendar0.get(2);
      assertEquals(1, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Tue Dec 06 02:34:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-1.22192928E13), number0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Tue Dec 06 02:34:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertFalse(boolean0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals("Tue Dec 06 02:34:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1.22192928E13), range0.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals("Tue Dec 06 02:34:00 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean1 = true;
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(704, 704, (-5800.9738734591), 704, 704, 704);
      assertEquals(704.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-5800.9738734591), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(704, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(704, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(704.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-5800.9738734591), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(704, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(704, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultBoxAndWhiskerXYDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(704.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals((-5800.9738734591), defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(704, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(704, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(704.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack1 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3, dateArray0.length);
      assertEquals(11, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-13), 3290);
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3290, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1310), "5B>0-;F[?q\u0000oHqx`");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=5B>0-;F[?q\u0000oHqx`,offset=-1310,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("5B>0-;F[?q\u0000oHqx`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1310), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Month month0 = new Month();
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      Year year0 = month0.getYear();
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertNotNull(month1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(702, 713, month1, simpleTimeZone0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=5B>0-;F[?q\u0000oHqx`,offset=-1310,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("5B>0-;F[?q\u0000oHqx`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1310), simpleTimeZone0.getRawOffset());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(712, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("YYdF}<niHzX0`ayk-~");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean1 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean2 = linkedList0.add(long0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.setTime(554);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[7] = 994.59;
      doubleArray0[5] = 0.0;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("Duplicate items in 'columnKeys'.", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 994.59, 0.0, 0.0, 0.0, 0.0, 0.0, 994.59, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 994.59, 0.0, 0.0, 0.0, 0.0, 0.0, 994.59, 0.0}, doubleArray0, 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("YYdF}<niHzX0`ayk-~", "YYdF}<niHzX0`ayk-~", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-13), (-13));
      assertEquals(1, doubleArray0.length);
      assertEquals((-13), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, (-920));
      assertEquals(1, doubleArray0.length);
      assertEquals((-13), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-920), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      slidingCategoryDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-13), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-920), categoryToPieDataset0.getExtractIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-13), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-13), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-13), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(880, 554, 880, 554, 2183, 880);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(27095956660000L, long0);
      assertEquals("Sun Aug 20 14:37:40 GMT 2828", mockDate0.toString());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = (double) 554;
      doubleArray1[2] = (double) (-786);
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (double) 554;
      doubleArray1[5] = (double) 554;
      doubleArray1[6] = (double) 554;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 27095956660000L;
      doubleArray2[1] = (double) 880;
      doubleArray2[2] = (double) 880;
      doubleArray2[3] = (double) 27095956660000L;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultKeyedValues2DDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      doubleArray2[4] = (double) 554;
      doubleArray2[5] = (double) 27095956660000L;
      doubleArray2[6] = 6.283185307179586;
      doubleArray2[7] = (double) 10;
      doubleArray2[8] = (double) 10;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2.7095956660786E13, range0.getLength(), 0.01);
      assertEquals(1.3547978329607E13, range0.getCentralValue(), 0.01);
      assertEquals((-786.0), range0.getLowerBound(), 0.01);
      assertEquals(2.709595666E13, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.8, (-933.61681525741), "Null 'dataset' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-933.61681525741), range0.getLowerBound(), 0.01);
      assertEquals((-933.61681525741), range0.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double double0 = new Integer((-2144530702));
      assertEquals((-2144530702), double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-933.61681525741), range1.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range1.getUpperBound(), 0.01);
      assertEquals((-933.61681525741), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      HijrahEra hijrahEra2 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra2);
      assertTrue(boolean1);
      assertSame(hijrahEra2, hijrahEra0);
      assertSame(hijrahEra2, hijrahEra1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = 7;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 7, 7);
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(7, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer1, (Comparable) integer1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(defaultPieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      defaultPieDataset0.insertValue(0, (Comparable) integer0, (double) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) integer0, Double.POSITIVE_INFINITY, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      assertNull(range1);
      
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = (-1179.21);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 715.07022425841;
      doubleArray1[4] = (-244.332);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-244.332);
      doubleArray2[2] = 715.07022425841;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-1179.21);
      doubleArray2[5] = (-1383.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2422.0);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = (-244.332);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-244.332);
      doubleArray5[1] = 0.8;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = (-1179.21);
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = (-244.332);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-244.332);
      doubleArray6[1] = 1.7976931348623157E308;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-1383.0);
      doubleArray6[4] = (-2422.0);
      doubleArray6[5] = (-1383.0);
      doubleArray6[6] = 0.8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      
      doubleArray9[0] = (-1383.0);
      doubleArray9[1] = 0.8;
      doubleArray9[2] = (-1.0);
      doubleArray9[3] = 715.07022425841;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertEquals(100.0, number0);
      assertNotNull(number0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 39, 39);
      assertEquals(39, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(39, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      slidingGanttCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(39, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(39, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(2, 2, (-3388), 0, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList0, range0, false);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1570.7454709921;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2023.9056567;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1258.781;
      doubleArray0[6] = 100.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1570.7454709921, 1.0, 2023.9056567, (-1.0), 1258.781, 100.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1.0, 2023.9056567, 28, (-1.0));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(28, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2023.9056567000002, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1570.7454709921, 1.0, 2023.9056567, (-1.0), 1258.781, 100.0}, doubleArray0, 0.01);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(2, 2, (-3388), 0, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3388);
      doubleArray0[1] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.43362874E12), range0.getLowerBound(), 0.01);
      assertEquals(2.433628740002E12, range0.getLength(), 0.01);
      assertEquals((-1.216814369999E12), range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-3388.0), range1.getLowerBound(), 0.01);
      assertEquals(3389.0, range1.getLength(), 0.01);
      assertEquals((-1693.5), range1.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3389.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals((-1693.5), range2.getCentralValue(), 0.01);
      assertEquals((-3388.0), range2.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack1 = new Stack<Integer>();
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(integer0));
      assertNotNull(stack1);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertTrue(boolean0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean1 = true;
      Object object0 = defaultKeyedValues2DDataset0.clone();
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertNotSame(object0, defaultKeyedValues2DDataset0);
      assertTrue(object0.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.5;
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(0));
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      stack0.setSize(1999);
      assertEquals(1999, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(1999, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(2000, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(3998, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(0));
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add((Integer) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2001, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(3998, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(1999));
      assertTrue(stack0.contains(integer0));
      
      double[][] doubleArray1 = new double[2][7];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) Integer.MAX_VALUE;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-6596204906638688152L);
      doubleArray2[3] = (double) (-6596204906638688152L);
      doubleArray2[4] = (double) Integer.MAX_VALUE;
      doubleArray2[6] = (double) (-6596204906638688152L);
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = (double) Integer.MAX_VALUE;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2146725636), "5B>0-;F[?q\u0000oHqx`");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2146725636), simpleTimeZone0.getRawOffset());
      assertEquals("5B>0-;F[?q\u0000oHqx`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=5B>0-;F[?q\u0000oHqx`,offset=-2146725636,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(89, 0, hour0, simpleTimeZone0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2146725636), simpleTimeZone0.getRawOffset());
      assertEquals("5B>0-;F[?q\u0000oHqx`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=5B>0-;F[?q\u0000oHqx`,offset=-2146725636,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2146725636), simpleTimeZone0.getRawOffset());
      assertEquals("5B>0-;F[?q\u0000oHqx`", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=5B>0-;F[?q\u0000oHqx`,offset=-2146725636,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean1);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset1);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[100]", stack0.toString());
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.remove(integer0);
      boolean boolean0 = defaultPieDataset0.equals(defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-1222.7658217028347);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = new Range(10.0, 554);
      assertEquals(544.0, range0.getLength(), 0.01);
      assertEquals(282.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getLowerBound(), 0.01);
      assertEquals(554.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = linkedList0.add(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-786), 570, 154, (-786), 154);
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (-786), (-2.147483648E9), "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-2147483647), (-2144530702));
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2147483647), seriesChangeInfo0.getIndex1());
      assertEquals((-2144530702), seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(categoryTableXYDataset0, seriesChangeInfo0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2147483647), seriesChangeInfo0.getIndex1());
      assertEquals((-2144530702), seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeEvent0);
      
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2147483647), seriesChangeInfo0.getIndex1());
      assertEquals((-2144530702), seriesChangeInfo0.getIndex2());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2.147483648E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      MockDate mockDate0 = new MockDate(2142865403, 5, 5, 0, (-3161));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(599L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate(2142865403, 2, (-1364), (-2147412067), (-1364));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertNotNull(mockDate2);
      
      dateArray0[1] = (Date) mockDate2;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1364);
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) (-1364);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-576.0);
      doubleArray1[1] = (double) 2142865403;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Mon Sep 05 09:35:33 GMT 195344884", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-576.0), 2.142865403E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1364.0), 2.0, (-1364.0)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, mockDate2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Mon Sep 05 09:35:33 GMT 195344884", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(599.0, range0.getUpperBound(), 0.01);
      assertEquals((-6.1724086352764467E18), range0.getLowerBound(), 0.01);
      assertEquals((-3.0862043176382228E18), range0.getCentralValue(), 0.01);
      assertEquals(6.1724086352764477E18, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-576.0), 2.142865403E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1364.0), 2.0, (-1364.0)}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-1289.2401552), 23);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 8);
      Class<DefaultMultiValueCategoryDataset> class0 = DefaultMultiValueCategoryDataset.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        Minute.parseMinute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-943)));
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[-30000]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-943)));
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add((Integer) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[-30000, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      boolean boolean2 = stack0.add(integer0);
      assertTrue(boolean2);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000, null, -30000]", stack0.toString());
      assertFalse(stack0.contains(Integer.MAX_VALUE));
      assertTrue(stack0.contains(integer0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) integer1;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) 1330.5867391;
      numberArray1[3] = (Number) null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      numberArray2[0] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      int int2 = 554;
      MockDate mockDate0 = new MockDate(162, 554, 10, (-789), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4357940350000L, long0);
      assertEquals("Mon Feb 06 02:59:10 GMT 2108", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-789));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(19.367271591467603, (-933.61681525741), "Null 'dataset' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-933.61681525741), range0.getCentralValue(), 0.01);
      assertEquals((-933.61681525741), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-933.61681525741), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = categoryTableXYDataset0.indexOf("Null 'dataset' argument.");
      assertEquals(0, int0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Integer integer0 = new Integer((-2144530702));
      assertEquals((-2144530702), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-933.61681525741), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Null 'dataset' argument.";
      stringArray0[1] = "Null 'dataset' argument.";
      stringArray0[3] = "Null 'dataset' argument.";
      stringArray0[4] = "Null 'dataset' argument.";
      stringArray0[5] = "a";
      stringArray0[6] = "Null 'dataset' argument.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(7, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(30000.0, range2.getLength(), 0.01);
      assertEquals((-30000.0), range2.getLowerBound(), 0.01);
      assertEquals((-15000.0), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[1] = 994.59;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Duplicate items in 'columnKeys'.", "IYFJ]t;O?)A:", "");
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("IYFJ]t;O?)A:", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNotNull(timePeriodValues0);
      
      timePeriodValues0.fireSeriesChanged();
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("IYFJ]t;O?)A:", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("IYFJ]t;O?)A:", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("IYFJ]t;O?)A:", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      double double0 = 1330.5867391;
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      int int0 = Integer.MAX_VALUE;
      int int1 = 0;
      int int2 = (-943);
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(int0));
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-30000]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(int0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = null;
      boolean boolean1 = stack0.add((Integer) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[-30000, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(int0));
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) (-6596204906638688152L);
      doubleArray1[3] = (double) (-6596204906638688152L);
      doubleArray1[4] = (double) Integer.MAX_VALUE;
      doubleArray1[5] = 1330.5867391;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1197), "gP/^ y\"+Rx!m");
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(723, (-786), (-1), 718, 683, 721);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(18542079301000L, long0);
      assertEquals("Fri Jul 29 09:35:01 GMT 2557", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1.22192928E13), range0.getLowerBound(), 0.01);
      assertEquals(3.0761372101E13, range0.getLength(), 0.01);
      assertEquals(3.1613932505E12, range0.getCentralValue(), 0.01);
      assertEquals(1.8542079301E13, range0.getUpperBound(), 0.01);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-943)));
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-943)));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add((Integer) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000, null]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-943)));
      
      double[][] doubleArray1 = new double[2][7];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) Integer.MAX_VALUE;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-6596204906638688152L);
      doubleArray2[3] = (double) (-6596204906638688152L);
      doubleArray2[4] = (double) Integer.MAX_VALUE;
      doubleArray2[5] = 1330.5867391;
      doubleArray2[6] = (double) (-6596204906638688152L);
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = (double) Integer.MAX_VALUE;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra1);
      assertTrue(boolean1);
      assertSame(hijrahEra1, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 343L, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), (-619.8511), (-1490.576875176), (-619.8511));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-619.8511) <= upper (-1490.576875176).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), (-185.03877015), 343L, 1.0, (-1857.828331897885));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1490.576875176), Double.NaN, 1867.3694023156474, (-1857.828331897885), (-1857.828331897885));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(6, oHLCDataItemArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNotNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (343.0) <= upper (-185.03877015).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean0 = stack0.add((Integer) 0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, 0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer1, (double) 23);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(pieDataset1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) hijrahEra0, (KeyedValues) pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(0));
      assertNull(range2);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer1, (Comparable) integer1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, Double.POSITIVE_INFINITY, 2444.2845, (-7357.0), 2444.2845, 0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-82.79741142), 0.0, (-2.147483648E9), 6.283185307179586, 729.2);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[8] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, true);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.07374060185775E9), range2.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range2.getLowerBound(), 0.01);
      assertEquals(2444.2845, range2.getUpperBound(), 0.01);
      assertEquals(2.1474860922845E9, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range0, true);
      assertNotSame(range0, range2);
      assertFalse(range0.equals((Object)range2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      MockDate mockDate0 = new MockDate(2, 2, (-3388), 0, 2);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      mockDate0.setTime(0);
      assertNotSame(mockDate0, mockDate1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3388);
      doubleArray0[1] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3388.0), 2.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 2.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(3390.0, range1.getLength(), 0.01);
      assertEquals((-1693.0), range1.getCentralValue(), 0.01);
      assertEquals((-3388.0), range1.getLowerBound(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3388.0), 2.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      System.setCurrentTimeMillis((-2832L));
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-2832L);
      doubleArray1[1] = (double) (-2832L);
      doubleArray1[2] = (double) (-2832L);
      doubleArray1[3] = (double) (-2832L);
      doubleArray1[4] = (double) (-2832L);
      doubleArray1[5] = (double) (-2832L);
      doubleArray1[6] = (double) (-2832L);
      doubleArray1[7] = (double) (-2832L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2832L);
      doubleArray2[1] = (double) (-2832L);
      doubleArray2[2] = (double) (-2832L);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-2832L);
      doubleArray3[1] = (double) (-2832L);
      doubleArray3[2] = (double) (-2832L);
      doubleArray3[3] = (double) (-2832L);
      doubleArray3[4] = (double) (-2832L);
      doubleArray3[5] = (double) (-2832L);
      doubleArray3[6] = (double) (-2832L);
      doubleArray3[7] = (double) (-2832L);
      doubleArray3[8] = (double) (-2832L);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) (-2832L);
      doubleArray5[1] = (double) (-2832L);
      doubleArray5[2] = (double) (-2832L);
      doubleArray5[3] = (double) (-2832L);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-11328.0), range0.getLowerBound(), 0.01);
      assertEquals((-5664.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(11328.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.remove((-335.2749144162), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(1.8542079301E13, 23.0, "`.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 2025, (-9999));
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(2025, seriesChangeInfo0.getIndex1());
      assertEquals((-9999), seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultMultiValueCategoryDataset0, seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(2025, seriesChangeInfo0.getIndex1());
      assertEquals((-9999), seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeEvent0);
      
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(2025, seriesChangeInfo0.getIndex1());
      assertEquals((-9999), seriesChangeInfo0.getIndex2());
      
      categoryTableXYDataset0.add(1.0, 200.0, "`.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.8542079300999E13, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.8542079300999E13, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(177.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(111.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(2, 2, (-3388), 0, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 723, 2165);
      assertEquals(723, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2165, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertEquals(723, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2165, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      MockDate mockDate0 = new MockDate(1952257861, 1952257861, 10, (-1938), 6, 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-7045728597920236464L), long0);
      assertEquals("Mon Jun 10 20:22:43 GMT 223263698", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate((-1449), 1952257861, 1, 708, 1, 4552);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) (-1938);
      doubleArray0[2] = (double) 1952257861;
      doubleArray0[3] = (double) (-1449);
      doubleArray0[4] = (double) 10;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-7045728597920236464L);
      doubleArray1[1] = (double) (-1938);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (double) 4552;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Mar 02 13:16:52 GMT 162688606", mockDate1.toString());
      assertArrayEquals(new double[] {(-7.0457285979202365E18), (-1938.0), Double.NEGATIVE_INFINITY, 4552.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, (-1938.0), 1.952257861E9, (-1449.0), 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Sun Mar 02 13:16:52 GMT 162688606", mockDate1.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1.952257861E9, number0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Mar 02 13:16:52 GMT 162688606", mockDate1.toString());
      assertArrayEquals(new double[] {(-7.0457285979202365E18), (-1938.0), Double.NEGATIVE_INFINITY, 4552.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, (-1938.0), 1.952257861E9, (-1449.0), 10.0}, doubleArray0, 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(317, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Mon Nov 04 15:26:07 GMT 2222", mockDate1.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      HijrahEra hijrahEra1 = HijrahEra.AH;
      HijrahEra hijrahEra2 = HijrahEra.AH;
      boolean boolean1 = arrayList0.add(hijrahEra2);
      assertTrue(boolean1);
      assertSame(hijrahEra2, hijrahEra1);
      assertSame(hijrahEra2, hijrahEra0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra2));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate(343L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-619.8511), (-1490.576875176), 3087.0, (-1490.576875176), 343L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3087.0, (-1490.576875176), 3087.0, (-1490.576875176), 2444.2845);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hijrahEra1, oHLCDataItemArray0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertSame(hijrahEra1, hijrahEra2);
      assertSame(hijrahEra1, hijrahEra0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(343.0, range0.getUpperBound(), 0.01);
      assertEquals(343.0, range0.getCentralValue(), 0.01);
      assertEquals(343.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.contains(hijrahEra2));
      assertNotNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1363.27256);
      doubleArray0[1] = (-1044.16);
      doubleArray0[2] = 918.530340381;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1363.27256);
      doubleArray1[1] = 918.530340381;
      doubleArray1[3] = 918.530340381;
      doubleArray1[4] = (-1044.16);
      doubleArray1[5] = 918.530340381;
      doubleArray1[6] = (-1044.16);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 0.0, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 0.0, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 0.0, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 200.0, 407);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      long long0 = hour0.getSerialIndex();
      assertEquals(1000436L, long0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (double) 23, 37);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(pieDataset2);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.setIntervalWidth((-1261.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'width' argument.
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(timeSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (double) 0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1363.27256);
      doubleArray0[1] = (-1044.16);
      doubleArray0[2] = 918.530340381;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1363.27256);
      doubleArray1[1] = 918.530340381;
      doubleArray1[3] = 918.530340381;
      doubleArray1[4] = (-1044.16);
      doubleArray1[5] = 918.530340381;
      doubleArray1[6] = (-1044.16);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 0.0, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 0.0, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(0, (-2412), 45, 2307, 0, (-450));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-8539765650000L), long0);
      assertEquals("Thu May 21 02:52:30 GMT 1699", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(1060, (-943), 609, 648, 9, (-20));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Thu May 21 02:52:30 GMT 1699", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Thu May 21 02:52:30 GMT 1699", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals("Thu May 21 02:52:30 GMT 1699", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Double double0 = new Double((-977.0));
      assertEquals((-977.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) double0);
      assertEquals((-977.0), xYDataItem0.getYValue(), 0.01);
      assertEquals((-977.0), xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year1);
      
      MockDate mockDate2 = (MockDate)year0.getEnd();
      assertNotSame(year0, year1);
      assertNotSame(mockDate2, mockDate1);
      assertNotSame(mockDate2, mockDate0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate2.toString());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(mockDate2);
      
      Long long1 = new Long(45);
      assertEquals(45L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<TimePeriodValuesCollection>) year1;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year1, (double) 1641);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(timeSeriesDataItem0);
      
      comparableArray0[1] = (Comparable<TimePeriodValuesCollection>) timeSeriesDataItem0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) pieDataset0);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(categoryDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, range0, true);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 4278;
      int int1 = 100;
      int int2 = 0;
      int int3 = 1770;
      int int4 = 752;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Minute minute0 = Minute.parseMinute("");
      assertNull(minute0);
      
      KeyToGroupMap keyToGroupMap0 = null;
      try {
        keyToGroupMap0 = new KeyToGroupMap((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'defaultGroup' argument.
         //
         verifyException("org.jfree.data.KeyToGroupMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1197), "gP/^ y\"+Rx!m");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(168, (-786), (-1), 718, 683, 721);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1027935301000L, long0);
      assertEquals("Mon Jul 29 09:35:01 GMT 2002", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      int int0 = 999;
      MockDate mockDate1 = new MockDate(999, 690, 999);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-1.22192928E13), number0);
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      Double double0 = new Double(154);
      assertEquals(154.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DomainOrder domainOrder0 = yIntervalSeriesCollection0.getDomainOrder();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-518.019);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-518.019)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      Double double0 = new Double(154);
      assertEquals(154.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(154));
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, stack0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(154));
      assertNull(range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) jDBCPieDataset0);
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 547, Integer.MAX_VALUE, 9, 1627, (-1678));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.5);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 10 11:39:02 GMT 5884204", mockDate1.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 10 11:39:02 GMT 5884204", mockDate1.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1330.5867391, (Number) 1330.5867391);
      assertEquals(1330.5867391, xYDataItem0.getYValue(), 0.01);
      assertEquals(1330.5867391, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) xYDataItem0;
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year1);
      
      MockDate mockDate2 = (MockDate)year1.getEnd();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotSame(mockDate2, mockDate1);
      assertNotSame(mockDate2, mockDate0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate2.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(mockDate2);
      
      comparableArray0[1] = (Comparable<TimeSeriesCollection>) year1;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      defaultKeyedValues2DDataset0.fireDatasetChanged(datasetChangeInfo0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      defaultIntervalXYDataset0.validateObject();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) pieDataset0);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(categoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-30000.0), number1);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(2, 2, (-3388), 0, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3388);
      doubleArray0[1] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.43362874E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.21681437E12), range0.getCentralValue(), 0.01);
      assertEquals(2.43362874E12, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3389.0, range1.getLength(), 0.01);
      assertEquals((-3388.0), range1.getLowerBound(), 0.01);
      assertEquals((-1693.5), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-3388.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[100, 100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[100, 100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1363.27256);
      doubleArray0[1] = (-1044.16);
      doubleArray0[2] = 918.530340381;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1363.27256);
      doubleArray1[1] = 918.530340381;
      doubleArray1[2] = 918.530340381;
      doubleArray1[3] = 918.530340381;
      doubleArray1[4] = (-1044.16);
      doubleArray1[5] = 918.530340381;
      doubleArray1[6] = (-1044.16);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 918.530340381, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1363.27256), (-1044.16), 918.530340381}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1363.27256), 918.530340381, 918.530340381, 918.530340381, (-1044.16), 918.530340381, (-1044.16)}, doubleArray1, 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer1, (Comparable) integer0, (Comparable) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(integer1));
      
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean1 = stack0.add(integer2);
      assertTrue(boolean1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[100, 300]", stack0.toString());
      assertTrue(stack0.contains(integer2));
      assertFalse(stack0.contains(integer1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-185.03877015);
      doubleArray2[1] = 3012.488;
      doubleArray2[2] = 0.5;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 275, 7);
      assertEquals(275, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(275, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-185.03877015), 3012.488, 0.5}, doubleArray2, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(7983.5204346, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(7, doubleArray1.length);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 994.59;
      doubleArray1[1] = 994.59;
      doubleArray1[2] = 994.59;
      doubleArray1[3] = 994.59;
      doubleArray1[4] = 994.59;
      doubleArray1[5] = 994.59;
      doubleArray1[6] = 994.59;
      doubleArray1[7] = 3012.488;
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      boolean boolean1 = stack0.removeElement("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.general.DatasetUtilities", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1330.5867391;
      doubleArray0[1] = 0.5;
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, (-943));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-6596204906638688152L), long0);
      assertEquals("Fri Aug 23 19:01:51 GMT 209019152", mockDate0.toString());
      
      MockDate mockDate1 = new MockDate(2648, 547, Integer.MAX_VALUE, 9, 1627, (-1678));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0.5);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 10 11:39:02 GMT 5884204", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Fri Feb 10 11:39:02 GMT 5884204", mockDate1.toString());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1330.5867391, (Number) 1330.5867391);
      assertEquals(1330.5867391, xYDataItem0.getXValue(), 0.01);
      assertEquals(1330.5867391, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) xYDataItem0;
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year1);
      
      comparableArray0[1] = (Comparable<TimeSeriesCollection>) year1;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 200.0, 407);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Vector<String> vector1 = new Vector<String>();
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertNotNull(vector1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0, locale_FilteringMode0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) list1, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNull(range2);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 1652.0110510998861, (-673));
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(pieDataset2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1197), "gP/^ y\"+Rx!m");
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(168, (-786), (-1), 718, 683, 721);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(1027935301000L, long0);
      assertEquals("Mon Jul 29 09:35:01 GMT 2002", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1197), 200, 721, 999, 200, 690);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals((-3.939064371E13), number0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-3.939064371E13), range0.getLowerBound(), 0.01);
      assertEquals(4.0418579011E13, range0.getLength(), 0.01);
      assertEquals(1.027935301E12, range0.getUpperBound(), 0.01);
      assertEquals((-1.91813542045E13), range0.getCentralValue(), 0.01);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("gP/^ y\"+Rx!m", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1197), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-3.939064371E13), range0.getLowerBound(), 0.01);
      assertEquals(4.0418579011E13, range0.getLength(), 0.01);
      assertEquals(1.027935301E12, range0.getUpperBound(), 0.01);
      assertEquals((-1.91813542045E13), range0.getCentralValue(), 0.01);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=gP/^ y\"+Rx!m,offset=-1197,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=20,MILLISECOND=123,ZONE_OFFSET=-1197,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) pieDataset0);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(categoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertNotSame(defaultKeyedValues2DDataset0, defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset0.equals((Object)defaultKeyedValues2DDataset1));
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertEquals(100.0, number0);
      assertNotNull(number0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(50.0, range2.getCentralValue(), 0.01);
      assertEquals(100.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(100.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (-8.485818792E13), (-977));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) integer0, (-8.485818792E13), (-977));
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
      
      String string0 = "Kbf";
      // Undeclared exception!
      try { 
        Year.parseYear("Kbf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset1.getCategoryCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Quarter quarter0 = new Quarter();
      quarter0.getMiddleMillisecond();
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) regularTimePeriod0, (double) 1);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 200.0, 407);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
      try { 
        Year.parseYear("Kbf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2230.257188895385), Double.NEGATIVE_INFINITY, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(23.0, (-1277.1), "xm>geB+^_9t$n'zSh");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(168.0, 23.0, "Null 'collection' argument.");
      assertEquals(145.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 169, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[100, 100]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(integer1));
      assertTrue(stack0.contains(integer0));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2786.27695525886));
      assertEquals((-2781.27695525886), range0.getCentralValue(), 0.01);
      assertEquals((-2776.27695525886), range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLength(), 0.01);
      assertEquals((-2786.27695525886), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, (List) stack0, true);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertEquals(10.0, range5.getCentralValue(), 0.01);
      assertEquals(10.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(10.0, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 994.59;
      doubleArray0[1] = 994.59;
      doubleArray0[2] = 994.59;
      doubleArray0[3] = 994.59;
      doubleArray0[4] = 994.59;
      doubleArray0[5] = 994.59;
      doubleArray0[6] = 994.59;
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 994.59;
      numberArray1[1] = (Number) 994.59;
      numberArray1[2] = (Number) 994.59;
      numberArray1[3] = (Number) 994.59;
      numberArray1[5] = (Number) 994.59;
      numberArray1[6] = (Number) 994.59;
      numberArray1[7] = (Number) integer0;
      numberArray1[8] = (Number) 994.59;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultIntervalCategoryDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = stack0.add(defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 23;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte) (-1), bigInteger0.byteValue());
      assertEquals((short) (-17409), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-1)}, byteArray0);
      assertNotNull(bigInteger0);
      
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 23;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 23;
      numberArray1[6] = (Number) 0;
      numberArray1[7] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) 0;
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      numberArray2[4] = (Number) bigInteger1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (byte) (-69);
      numberArray3[1] = (Number) 23;
      numberArray3[2] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) (byte) (-1);
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) (byte) (-1);
      numberArray4[4] = (Number) bigInteger1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) 23;
      numberArray5[2] = (Number) 23;
      numberArray5[3] = (Number) 0;
      numberArray5[4] = (Number) bigInteger0;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) bigInteger1;
      numberArray5[7] = (Number) integer0;
      numberArray5[8] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = (Number) 23;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      stack0.ensureCapacity((-1794));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1794)));
      
      stack0.setSize(709);
      assertFalse(stack0.empty());
      assertEquals(709, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(709, stack0.capacity());
      assertFalse(stack0.contains((-1794)));
      
      Integer integer0 = Integer.valueOf((-1149));
      assertEquals((-1149), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1418, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(710, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-1794)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2786.27695525886));
      assertEquals((-2786.27695525886), range0.getLowerBound(), 0.01);
      assertEquals((-2781.27695525886), range0.getCentralValue(), 0.01);
      assertEquals((-2776.27695525886), range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[200]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, (List) stack0, true);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals("[200]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 10;
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10.0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = true;
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      assertEquals(400.0, range1.getLowerBound(), 0.01);
      assertEquals(400.0, range1.getCentralValue(), 0.01);
      assertEquals(400.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(400.0, range2.getLength(), 0.01);
      assertEquals(200.0, range2.getCentralValue(), 0.01);
      assertEquals(400.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "", "9aKYx8sh");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 994.59;
      doubleArray1[1] = 994.59;
      doubleArray1[2] = 994.59;
      doubleArray1[3] = 994.59;
      doubleArray1[4] = 994.59;
      doubleArray1[3] = 994.59;
      doubleArray1[6] = 994.59;
      doubleArray1[7] = 3012.488;
      doubleArray1[8] = 994.59;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(1506.244, range0.getCentralValue(), 0.01);
      assertEquals(3012.488, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.scale(range0, 3012.488);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(1506.244, range0.getCentralValue(), 0.01);
      assertEquals(3012.488, range0.getLength(), 0.01);
      assertEquals(4537541.975071999, range1.getCentralValue(), 0.01);
      assertEquals(9075083.950143998, range1.getUpperBound(), 0.01);
      assertEquals(9075083.950143998, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.scale(range1, 994.59);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(1506.244, range0.getCentralValue(), 0.01);
      assertEquals(3012.488, range0.getLength(), 0.01);
      assertEquals(4537541.975071999, range1.getCentralValue(), 0.01);
      assertEquals(9075083.950143998, range1.getUpperBound(), 0.01);
      assertEquals(9075083.950143998, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(9.02598774597372E9, range2.getLength(), 0.01);
      assertEquals(4.51299387298686E9, range2.getCentralValue(), 0.01);
      assertEquals(9.02598774597372E9, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range3);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("p]8( &.", "lev<*W[&+La>sY(]", "Duplicate items in 'columnKeys'.", "lev<*W[&+La>sY(]");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1330.5867391;
      doubleArray1[1] = 0.5;
      doubleArray1[0] = (-1557.40667321);
      doubleArray1[3] = 547.604153835;
      doubleArray1[4] = (-1.13935938894E14);
      doubleArray1[5] = 3281.505151071523;
      doubleArray1[6] = 2627.495;
      doubleArray1[7] = (-766.989);
      doubleArray1[8] = (-2525.9110093622);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1330.5867391;
      doubleArray2[1] = (-766.989);
      doubleArray2[2] = 547.604153835;
      doubleArray2[3] = (-1557.40667321);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Null 'visibleSeriesKeys' argument.", numberArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(100.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(100.0, range1.getCentralValue(), 0.01);
      assertEquals(100.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2786.27695525886));
      assertEquals((-2736.27695525886), range0.getCentralValue(), 0.01);
      assertEquals((-2786.27695525886), range0.getLowerBound(), 0.01);
      assertEquals((-2686.27695525886), range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      dateArray0[4] = date0;
      dateArray0[5] = date0;
      dateArray0[6] = date0;
      dateArray0[7] = date0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, dateArray0.length);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, dateArray0.length);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.22192928E13), range1.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range1.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(range2, range1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, dateArray0.length);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(range2);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) date0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 994.59;
      doubleArray1[1] = 994.59;
      doubleArray1[2] = 994.59;
      doubleArray1[3] = 994.59;
      doubleArray1[4] = 994.59;
      doubleArray1[5] = 994.59;
      doubleArray1[6] = 994.59;
      doubleArray1[7] = 3012.488;
      doubleArray1[8] = (-185.03877015);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-185.03877015), (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-185.03877015), range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(3197.5267701499997, range0.getLength(), 0.01);
      assertEquals(1413.724614925, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-185.03877015), range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(3197.5267701499997, range0.getLength(), 0.01);
      assertEquals(1413.724614925, range0.getCentralValue(), 0.01);
      assertEquals((-185.03877015), range1.getLowerBound(), 0.01);
      assertEquals(3012.488, range1.getUpperBound(), 0.01);
      assertEquals(1413.724614925, range1.getCentralValue(), 0.01);
      assertEquals(3197.5267701499997, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.scale(range1, 994.59);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-185.03877015), range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(3197.5267701499997, range0.getLength(), 0.01);
      assertEquals(1413.724614925, range0.getCentralValue(), 0.01);
      assertEquals((-185.03877015), range1.getLowerBound(), 0.01);
      assertEquals(3012.488, range1.getUpperBound(), 0.01);
      assertEquals(1413.724614925, range1.getCentralValue(), 0.01);
      assertEquals(3197.5267701499997, range1.getLength(), 0.01);
      assertEquals((-184037.7104034885), range2.getLowerBound(), 0.01);
      assertEquals(3180228.1503234883, range2.getLength(), 0.01);
      assertEquals(1406076.3647582557, range2.getCentralValue(), 0.01);
      assertEquals(2996190.43992, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range3);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, range1, false);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-185.03877015), range0.getLowerBound(), 0.01);
      assertEquals(3012.488, range0.getUpperBound(), 0.01);
      assertEquals(3197.5267701499997, range0.getLength(), 0.01);
      assertEquals(1413.724614925, range0.getCentralValue(), 0.01);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-185.03877015), range1.getLowerBound(), 0.01);
      assertEquals(3012.488, range1.getUpperBound(), 0.01);
      assertEquals(1413.724614925, range1.getCentralValue(), 0.01);
      assertEquals(3197.5267701499997, range1.getLength(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range4);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(3012.488, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2, (-345));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-345);
      doubleArray0[5] = 4927.047894864243;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2.0, 2.0, (-1.0), 2.0, (-345.0), 4927.047894864243, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.243379825E12), range0.getLowerBound(), 0.01);
      assertEquals(3.63578910632E12, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-4.2548527184E11), range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-1.0), 2.0, (-345.0), 4927.047894864243, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-1.0), 2.0, (-345.0), 4927.047894864243, 2.0, 2.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) mockDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(defaultIntervalCategoryDataset0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(defaultIntervalCategoryDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      defaultIntervalXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      boolean boolean0 = defaultIntervalXYDataset0.hasListener(timeSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) integer0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(711, (-3), 2112);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Jul 12 00:00:00 GMT 2616", mockDate0.toString());
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Jul 12 00:00:00 GMT 2616", mockDate0.toString());
      assertEquals("Fri Jul 12 00:00:00 GMT 2616", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      Date date1 = Date.from(instant0);
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      assertEquals("Fri Jul 12 00:00:00 GMT 2616", date1.toString());
      assertEquals("Fri Jul 12 00:00:00 GMT 2616", mockDate0.toString());
      assertNotNull(date1);
      
      dateArray0[1] = date1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3);
      doubleArray0[1] = (double) (-3);
      doubleArray0[2] = (double) 711;
      doubleArray0[3] = (double) 711;
      doubleArray0[4] = (double) 2112;
      doubleArray0[5] = (double) 2112;
      doubleArray0[6] = (-1382.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3.0), (-3.0), 711.0, 711.0, 2112.0, 2112.0, (-1382.0)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 711.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(711.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {(-3.0), (-3.0), 711.0, 711.0, 2112.0, 2112.0, (-1382.0)}, doubleArray0, 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertEquals(2.04024095996445E13, number2);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(711.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {(-3.0), (-3.0), 711.0, 711.0, 2112.0, 2112.0, (-1382.0)}, doubleArray0, 0.01);
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      MockDate mockDate0 = new MockDate((-1320));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1490.576875176), (-619.8511), 343L, (-619.8511), 2364.0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2666.57481), (-2666.57481), 2364.0, (-1320), 1851.823363451);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("5B>0-;F[?q\u0000oHqx`", oHLCDataItemArray0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1810.058919442115));
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertEquals((-414.9705402789425), number0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1810.058919442115), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10.0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("/v[+l;8EW0O._-n{Oe", "D", "/v[+l;8EW0O._-n{Oe", "/v[+l;8EW0O._-n{Oe");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(400.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      boolean boolean0 = keyToGroupMap0.equals(defaultMultiValueCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stream<YIntervalSeriesCollection> stream0 = stack0.parallelStream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stream0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(range3);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotSame(range5, range4);
      assertFalse(range5.equals((Object)range4));
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range5.getLength(), 0.01);
      assertEquals(Double.NaN, range5.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range5.getCentralValue(), 0.01);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(range5);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-17), 2, 2, 2, 168, 2);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2740245118000L), long0);
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) (-17);
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 168;
      doubleArray0[3] = (double) (-17);
      doubleArray0[4] = (double) 168;
      doubleArray0[5] = (double) (-2740245118000L);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(84.0, range1.getCentralValue(), 0.01);
      assertEquals(168.0, range1.getUpperBound(), 0.01);
      assertEquals(168.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2740245118000L), 2);
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2.740245118E12), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.0), 168, 2, 168.0);
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2.740245118E12), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      assertEquals(168.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(84.0, range2.getCentralValue(), 0.01);
      assertEquals(168.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertFalse(boolean0);
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[5][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, numberArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-17), 2, 2, 2, 168, 2);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2740245118000L), long0);
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) (-17);
      doubleArray0[0] = (double) 2;
      doubleArray0[2] = (double) 168;
      doubleArray0[3] = (double) (-17);
      doubleArray0[4] = (double) 168;
      doubleArray0[5] = (double) (-2740245118000L);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      assertEquals(168.0, range1.getUpperBound(), 0.01);
      assertEquals(84.0, range1.getCentralValue(), 0.01);
      assertEquals(168.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = mockDate1.after(dateArray0[0]);
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals(3, dateArray0.length);
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(7.7432664417E13, range0.getLength(), 0.01);
      assertEquals(4.28218225585E13, range0.getCentralValue(), 0.01);
      assertEquals(8.1538154767E13, range0.getUpperBound(), 0.01);
      assertEquals(4.10549035E12, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0, 1266.84755249461, 2954, mockDate0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      MockDate mockDate0 = new MockDate(1061, 1092, 2, 1061, 90, 90);
      assertNotNull(mockDate0);
      
      long long0 = MockDate.UTC(2018, 1092, 0, 1092, (-2740), 2568);
      assertEquals(64348354968000L, long0);
      
      long long1 = mockDate0.getTime();
      assertEquals(34148500290000L, long1);
      assertFalse(long1 == long0);
      assertEquals("Sun Feb 15 06:31:30 GMT 3052", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1092;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Sun Feb 15 06:31:30 GMT 3052", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 1092.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Sun Feb 15 06:31:30 GMT 3052", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3.414850029E13, range0.getCentralValue(), 0.01);
      assertEquals(3.414850029E13, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.414850029E13, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 1092.0}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals("Sun Feb 15 06:31:30 GMT 3052", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 1092.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, (-2399), (-2399), 2, (-1159), 154);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-3865338986000L), long0);
      assertEquals("Wed Jul 07 06:43:34 GMT 1847", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2399);
      doubleArray0[1] = (double) 168;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 168;
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 154;
      doubleArray1[1] = (double) (-1159);
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = 1.7976931348623157E308;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals("Wed Jul 07 06:43:34 GMT 1847", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2399.0), 168.0, 2.0, 168.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {154.0, (-1159.0), (-1.0), 1.7976931348623157E308}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals("Wed Jul 07 06:43:34 GMT 1847", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-3.865338986E12), range0.getLowerBound(), 0.01);
      assertEquals((-3.865338986E12), range0.getUpperBound(), 0.01);
      assertEquals((-3.865338986E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-2399.0), 168.0, 2.0, 168.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {154.0, (-1159.0), (-1.0), 1.7976931348623157E308}, doubleArray1, 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals("Wed Jul 07 06:43:34 GMT 1847", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(168.0, range1.getUpperBound(), 0.01);
      assertEquals((-1159.0), range1.getLowerBound(), 0.01);
      assertEquals((-495.5), range1.getCentralValue(), 0.01);
      assertEquals(1327.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {(-2399.0), 168.0, 2.0, 168.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {154.0, (-1159.0), (-1.0), 1.7976931348623157E308}, doubleArray1, 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Sat Nov 03 15:26:07 GMT 4553", mockDate1.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1137.31);
      doubleArray0[1] = (-1137.31);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      stack0.addElement((DefaultIntervalXYDataset) null);
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[2];
      Double double0 = new Double(154);
      assertEquals(154.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      numberArray2[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      numberArray2[1] = (Number) integer1;
      Byte byte0 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte0);
      assertNotNull(byte0);
      
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = (Number) double0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.KeyedObjects2D", "org.jfree.data.KeyedObjects2D", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Integer integer2 = new Integer((byte) (-127));
      assertEquals((-127), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(2, numberArray0.length);
      assertEquals(527.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals((-127.0), range0.getLowerBound(), 0.01);
      assertEquals(136.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 209.691053625232);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(209.691053625232, range1.getCentralValue(), 0.01);
      assertEquals(209.691053625232, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(209.691053625232, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1315.1794912148414, 1315.1794912148414);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-2408), (-2408), (-3631), (-3631), 488);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      xYDataItem0.setY((double) (-2408));
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      
      Number number0 = xYDataItem0.getY();
      assertEquals((-2408.0), number0);
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertNotNull(number0);
      
      doubleArray0[0] = (double) (-2408);
      doubleArray0[1] = 1315.1794912148414;
      doubleArray0[2] = (double) (-3631);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(xYDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2408.0), 1315.1794912148414, (-3631.0)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2408.0), 1315.1794912148414, (-3631.0)}, doubleArray0, 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount((-2408));
      assertEquals(0, int0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(xYDatasetTableModel0);
      
      defaultHighLowDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertArrayEquals(new double[] {(-2408.0), 1315.1794912148414, (-3631.0)}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.485818792E13), range0.getLowerBound(), 0.01);
      assertEquals((-8.485818792E13), range0.getCentralValue(), 0.01);
      assertEquals((-8.485818792E13), range0.getUpperBound(), 0.01);
      assertEquals((-2408.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1315.1794912148414, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2408.0), 1315.1794912148414, (-3631.0)}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "9nAW~~K<\"qa|cXX?n{!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1137.31);
      doubleArray1[1] = (-1137.31);
      doubleArray1[3] = (-1137.31);
      doubleArray1[4] = (-1137.31);
      doubleArray1[5] = (-1137.31);
      doubleArray1[7] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[36];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (-1137.31);
      doubleArray2[2] = 994.59;
      doubleArray2[3] = 994.59;
      doubleArray2[4] = (-1137.31);
      doubleArray2[5] = 994.59;
      doubleArray2[6] = 994.59;
      doubleArray2[7] = (-1137.31);
      doubleArray2[8] = (-1137.31);
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aY~sdrYmrv|-liTC3", "~w&*}e|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1137.31), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-1941));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1137.31), (-1137.31), 0.0, (-1137.31), (-1137.31), (-1137.31), 0.0, (-1137.31)}, doubleArray1, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "P@b5Ye", "@1o(4?p?1_}(2J");
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("@1o(4?p?1_}(2J", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("@1o(4?p?1_}(2J", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = (Number) integer0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, numberArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1137.31);
      doubleArray1[0] = (-1137.31);
      doubleArray1[3] = (-1137.31);
      doubleArray1[4] = (-1137.31);
      doubleArray1[5] = (-1137.31);
      doubleArray1[6] = (-1137.31);
      doubleArray1[7] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[25];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 994.59;
      doubleArray2[2] = 994.59;
      doubleArray2[3] = 994.59;
      doubleArray2[4] = (-1137.31);
      doubleArray2[5] = 994.59;
      doubleArray2[6] = 994.59;
      doubleArray2[7] = (-1137.31);
      doubleArray2[8] = 994.59;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aY~sdrYmrv|-liTC3", "~w&*}e|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1137.31), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-1941));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-2274.62), number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(number2);
      
      Number number3 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertEquals(Double.NaN, number3);
      assertFalse(number3.equals((Object)number1));
      assertFalse(number3.equals((Object)number0));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number3);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      defaultCategoryDataset0.clear();
      Object object0 = defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset0, object0);
      assertNotSame(object0, defaultCategoryDataset0);
      assertTrue(object0.equals((Object)defaultCategoryDataset0));
      assertNotNull(object0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(number1);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2685.9876505), (-2685.9876505));
      assertEquals((-2685.9876505), powerFunction2D0.getB(), 0.01);
      assertEquals((-2685.9876505), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      int int0 = 17;
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.previous();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24169L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertNotNull(month1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2685.9876505), (-2026.7412673476), 17, month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertEquals((-2685.9876505), powerFunction2D0.getB(), 0.01);
      assertEquals((-2685.9876505), powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24169L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(17, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2685.9876505), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-2026.7412673476), xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2685.9876505);
      doubleArray0[1] = (-2685.9876505);
      doubleArray0[2] = (double) 17;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(month0, dateArray0, (double[]) null, (double[]) null, (double[]) null, (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HistogramDataset histogramDataset1 = new HistogramDataset();
      assertTrue(histogramDataset1.equals((Object)histogramDataset0));
      assertEquals(0, histogramDataset1.getSeriesCount());
      assertNotNull(histogramDataset1);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(histogramDataset1, linkedList0, true);
      assertNotSame(histogramDataset1, histogramDataset0);
      assertTrue(histogramDataset1.equals((Object)histogramDataset0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, histogramDataset1.getSeriesCount());
      assertNull(range0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.removeAll(linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-17), 2, 2, 2, 168, 2);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2740245118000L), long0);
      assertEquals("Fri Mar 02 04:48:02 GMT 1883", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 168;
      doubleArray0[1] = (double) 168;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-2740245118000L);
      doubleArray0[4] = 4.10549035E12;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 168;
      doubleArray0[8] = (double) 168;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) (-2740245118000L);
      doubleArray1[2] = (double) (-2740245118000L);
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = 4.10549035E12;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2.0, (-2.740245118E12), (-2.740245118E12), 2.0, 4.10549035E12}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {168.0, 168.0, 2.0, (-2.740245118E12), 4.10549035E12, 2.0, 2.0, 168.0, 168.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      XYDataset xYDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1137.31);
      doubleArray1[1] = (-1137.31);
      doubleArray1[3] = (-1137.31);
      doubleArray1[4] = (-1137.31);
      doubleArray1[5] = 994.59;
      doubleArray1[6] = (-1137.31);
      doubleArray1[7] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 994.59;
      doubleArray2[2] = 994.59;
      doubleArray2[3] = 994.59;
      doubleArray2[4] = (-1137.31);
      doubleArray2[5] = 994.59;
      doubleArray2[6] = 994.59;
      doubleArray2[7] = (-1137.31);
      doubleArray2[8] = 994.59;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aY~sdrYmrv|-liTC3", "~w&*}e|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1137.31), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-1941));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1137.31), (-1137.31), 0.0, (-1137.31), (-1137.31), 994.59, (-1137.31), (-1137.31)}, doubleArray1, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1137.31), (-1137.31), 0.0, (-1137.31), (-1137.31), 994.59, (-1137.31), (-1137.31)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1137.31), (-1137.31), 0.0, (-1137.31), (-1137.31), 994.59, (-1137.31), (-1137.31)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(2, doubleArray0.length);
      assertEquals(2131.9, range0.getLength(), 0.01);
      assertEquals((-1137.31), range0.getLowerBound(), 0.01);
      assertEquals(994.59, range0.getUpperBound(), 0.01);
      assertEquals((-71.35999999999996), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2045.6299272299768, (-1137.31), 568, "aY~sdrYmrv|-liTC3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate((-1), 154, 0, (-1), 168, (-786));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-1835735106000L), long0);
      assertEquals("Tue Oct 31 01:34:54 GMT 1911", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean0 = stack0.add(yIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(stack0.contains(yIntervalSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.8, 941.13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset1.getRangeBounds(true);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1), 2, 567, 567, 168, 2);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2184473518000L), long0);
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 168;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 567;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      defaultWindDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      doubleArray0[5] = (double) (-2184473518000L);
      doubleArray0[6] = (double) 567;
      doubleArray0[7] = (double) 567;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1.0), 2.0, 168.0, (-1.0), 567.0, (-2.184473518E12), 567.0, 567.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(169.0, range1.getLength(), 0.01);
      assertEquals(83.5, range1.getCentralValue(), 0.01);
      assertEquals(168.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.0, 168.0, (-1.0), 567.0, (-2.184473518E12), 567.0, 567.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 0;
      MockDate mockDate0 = new MockDate(154, 554, 10, (-786), (-1), 10);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(4105490350000L, long0);
      assertEquals("Fri Feb 05 05:59:10 GMT 2100", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(2648, 1, 2097, 154, 317, 547);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 10;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.10549035E12, range0.getLowerBound(), 0.01);
      assertEquals(4.28218225585E13, range0.getCentralValue(), 0.01);
      assertEquals(7.7432664417E13, range0.getLength(), 0.01);
      assertEquals(8.1538154767E13, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 10.0}, doubleArray1, 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]", "]", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[2];
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1137.31);
      doubleArray1[1] = (-1137.31);
      doubleArray1[2] = (-1137.31);
      doubleArray1[3] = (-1137.31);
      doubleArray1[4] = (-1137.31);
      doubleArray1[5] = 994.59;
      doubleArray1[6] = (-1137.31);
      doubleArray1[7] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 994.59;
      doubleArray2[2] = 994.59;
      doubleArray2[3] = 994.59;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      assertEquals(HijrahEra.AH, hijrahEra0);
      
      boolean boolean0 = defaultCategoryDataset0.equals(hijrahEra0);
      assertFalse(boolean0);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "", (-162.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      int int0 = defaultIntervalXYDataset0.indexOf(integer0);
      assertEquals((-1), int0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "]", Double.NEGATIVE_INFINITY);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.8, (-1), (-1), integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(43);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(43, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(43, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(43, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(43, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(11, spreadsheetDate0.getDayOfMonth());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 4159.2168, 1142.0, 1, spreadsheetDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals("[100]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(200.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<YIntervalSeriesCollection> stream0 = stack0.parallelStream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1173, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1172, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = true;
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean1 = stack0.add(yIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(stack0.contains(yIntervalSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[2];
      Double double0 = new Double(154);
      assertEquals(154.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      numberArray2[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      numberArray2[1] = (Number) integer1;
      Byte byte0 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte0);
      assertNotNull(byte0);
      
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = (Number) double0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.KeyedObjects2D", "org.jfree.data.KeyedObjects2D", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Integer integer2 = new Integer((byte) (-127));
      assertEquals((-127), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      MockDate mockDate0 = new MockDate((-3557), 198, (-1), 552, (-1), 366);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-113935938894000L), long0);
      assertEquals("Wed Jul 22 00:05:06 GMT 1642", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 552;
      doubleArray0[1] = (double) (-113935938894000L);
      doubleArray0[2] = (double) (-113935938894000L);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 168;
      doubleArray0[5] = (double) (-3557);
      doubleArray0[6] = (double) 198;
      doubleArray0[7] = (double) (-113935938894000L);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals("Wed Jul 22 00:05:06 GMT 1642", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {552.0, (-1.13935938894E14), (-1.13935938894E14), Double.POSITIVE_INFINITY, 168.0, (-3557.0), 198.0, (-1.13935938894E14)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(4, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals("Wed Jul 22 00:05:06 GMT 1642", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.13935938894E14), range0.getLowerBound(), 0.01);
      assertEquals((-1.13935938894E14), range0.getCentralValue(), 0.01);
      assertEquals((-1.13935938894E14), range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {552.0, (-1.13935938894E14), (-1.13935938894E14), Double.POSITIVE_INFINITY, 168.0, (-3557.0), 198.0, (-1.13935938894E14)}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 3687);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset1);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(50.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1), 2, 567, 567, 168, 2);
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals((-2184473518000L), long0);
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 168;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 567;
      doubleArray0[5] = (double) (-2184473518000L);
      doubleArray0[6] = (double) 567;
      doubleArray0[7] = (double) 567;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      assertArrayEquals(new double[] {(-1.0), 2.0, 168.0, (-1.0), 567.0, (-2.184473518E12), 567.0, 567.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(3, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Oct 11 17:48:02 GMT 1900", mockDate0.toString());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(169.0, range1.getLength(), 0.01);
      assertEquals(168.0, range1.getUpperBound(), 0.01);
      assertEquals(83.5, range1.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.0, 168.0, (-1.0), 567.0, (-2.184473518E12), 567.0, 567.0}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1137.31);
      doubleArray1[1] = (-1137.31);
      doubleArray1[2] = (-1137.31);
      doubleArray1[3] = (-1137.31);
      doubleArray1[4] = (-1137.31);
      doubleArray1[5] = 994.59;
      doubleArray1[6] = (-1137.31);
      doubleArray1[7] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 994.59;
      doubleArray2[2] = 994.59;
      doubleArray2[3] = 994.59;
      doubleArray2[4] = (-1137.31);
      doubleArray2[5] = 994.59;
      doubleArray2[6] = 994.59;
      doubleArray2[7] = (-1137.31);
      doubleArray2[8] = 994.59;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aY~sdrYmrv|-liTC3", "~w&*}e|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1137.31), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, (-1941));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1941), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1137.31), (-1137.31), (-1137.31), (-1137.31), (-1137.31), 994.59, (-1137.31), (-1137.31)}, doubleArray1, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2045.6299272299768, (-1137.31), 568, "aY~sdrYmrv|-liTC3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(defaultIntervalCategoryDataset0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "^%K", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1137.31), number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1137.31), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1137.31), range0.getCentralValue(), 0.01);
      assertEquals((-1137.31), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 1626.00656273);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1626.00656273, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      xIntervalSeriesCollection0.addChangeListener(xYBarDataset0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1626.00656273, xYBarDataset0.getBarWidth(), 0.01);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Short short0 = new Short((short)571);
      assertEquals((short)571, (short)short0);
      assertNotNull(short0);
      
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) (short)571);
      assertEquals(571.0, range0.getLowerBound(), 0.01);
      assertEquals(1142.0, range0.getUpperBound(), 0.01);
      assertEquals(856.5, range0.getCentralValue(), 0.01);
      assertEquals(571.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 2146729615, 2146729615);
      assertEquals(2146729615, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2146729615, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 2465);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146729615, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DomainOrder domainOrder0 = yIntervalSeriesCollection0.getDomainOrder();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      yIntervalSeriesCollection0.removeChangeListener(xYTaskDataset0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-518.018968);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-518.018968)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 723, 1266.84755249461, 573, (-518.018968));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, (-518.018968)}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 2.0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      int int0 = (-3584);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=319,ZONE_OFFSET=-1,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      MockDate mockDate0 = new MockDate(317, 154, 0, (-1), 168, (-786));
      assertNotNull(mockDate0);
      
      long long0 = mockDate0.getTime();
      assertEquals(8199452094000L, long0);
      assertEquals("Sat Oct 31 01:34:54 GMT 2229", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals("Sat Oct 31 01:34:54 GMT 2229", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.22192928E13), range1.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range1.getCentralValue(), 0.01);
      assertEquals((-1.22192928E13), range1.getLowerBound(), 0.01);
      assertEquals("Sat Oct 31 01:34:54 GMT 2229", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]", "]", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3, (-682.478689891));
      assertEquals((-682.478689891), powerFunction2D0.getB(), 0.01);
      assertEquals(3.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.0), 0, 2, "]");
      assertEquals((-682.478689891), powerFunction2D0.getB(), 0.01);
      assertEquals(3.0, powerFunction2D0.getA(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("bWQe&&D' Mz*ft", "]", "]", "bWQe&&D' Mz*ft");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 796.831;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-378.457);
      doubleArray1[3] = (-1.14967001048E14);
      doubleArray1[4] = (-499.374);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, Double.NEGATIVE_INFINITY);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.14967001048E14), (-378.457));
      assertEquals((-1.14967001048E14), powerFunction2D0.getA(), 0.01);
      assertEquals((-378.457), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      int int0 = 1;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-670L));
      assertEquals((-670L), fixedMillisecond0.getSerialIndex());
      assertEquals((-670L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-670L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-670L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-671L), regularTimePeriod0.getSerialIndex());
      assertEquals((-671L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-671L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-671L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-670L), fixedMillisecond0.getSerialIndex());
      assertEquals((-670L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-670L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-670L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(regularTimePeriod0);
      
      int int1 = (-2712);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 1266.84755249461);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1266.84755249461, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1863.5598359542657), (-210.926928669658), 2284, (-1.7976931348623157E308));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stream<YIntervalSeriesCollection> stream0 = stack0.parallelStream();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stream0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1173, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1172, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4218.04465460104;
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      XYDataItem xYDataItem0 = new XYDataItem(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      Second second0 = new Second();
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      Second second1 = (Second)second0.previous();
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(second1);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 182);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]", "]", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-2785.9876505));
      assertEquals((-2735.9876505), range0.getCentralValue(), 0.01);
      assertEquals((-2785.9876505), range0.getLowerBound(), 0.01);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals((-2685.9876505), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 2146729615, 2146729615);
      assertEquals(2146729615, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2146729615, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 2146729615);
      assertNotNull(pieDataset0);
      
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (-1865.7248), 1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Date[] dateArray0 = new Date[2];
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3584), "T7n)0gBX");
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3584), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3584), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=17,MILLISECOND=736,ZONE_OFFSET=-3584,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      Vector<DefaultIntervalXYDataset> vector1 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertFalse(vector1.contains(defaultIntervalXYDataset0));
      assertNotNull(vector1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset2 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset2);
      
      vector0.addElement(defaultIntervalXYDataset2);
      assertNotSame(vector0, vector1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset2, defaultIntervalXYDataset0);
      assertFalse(vector0.equals((Object)vector1));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset0));
      assertTrue(defaultIntervalXYDataset2.equals((Object)defaultIntervalXYDataset1));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset2.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-2536);
      doubleArray3[1] = (double) (-2536);
      doubleArray3[2] = (double) (-2536);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 298.63316;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-2536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>(2967);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(2967, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(2967, vector0.capacity());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (-340));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stream<YIntervalSeriesCollection> stream0 = stack0.parallelStream();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stream0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1173, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1172, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range3);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-2649.6312737615817);
      doubleArray1[3] = 974.7236468;
      doubleArray1[4] = 0.5;
      doubleArray1[6] = (-1870.4101);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-318.337352);
      doubleArray2[2] = (-2649.6312737615817);
      doubleArray2[4] = 974.7236468;
      doubleArray2[5] = 2697.957701073;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1137.31);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[1] = (-1870.4101);
      doubleArray4[2] = (-1870.4101);
      doubleArray4[4] = (-318.337352);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*cva(A&MrY+", "*cva(A&MrY+", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-7169.6726475231635), range0.getLowerBound(), 0.01);
      assertEquals((-2235.857473225082), range0.getCentralValue(), 0.01);
      assertEquals(9867.630348596163, range0.getLength(), 0.01);
      assertEquals(2697.957701073, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Vector<DefaultIntervalCategoryDataset> vector1 = new Vector<DefaultIntervalCategoryDataset>();
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertNotNull(vector1);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList1 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = vector1.addAll((Collection<? extends DefaultIntervalCategoryDataset>) arrayList1);
      assertFalse(boolean0);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      boolean boolean1 = vector1.add((DefaultIntervalCategoryDataset) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[null]", vector1.toString());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      
      Iterator<DefaultIntervalCategoryDataset> iterator0 = vector1.iterator();
      assertEquals("[null]", vector1.toString());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertNotNull(iterator0);
      
      int int0 = (-2600);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(defaultIntervalCategoryDataset0));
      assertNotNull(stack0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 410, 410);
      assertEquals(410, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(410, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-2536));
      assertNotNull(pieDataset0);
      
      Week week0 = new Week();
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week1, (double) 410, 1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("*cva(A&MrY+");
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("*cva(A&MrY+");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNotNull(stack0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.removeAll(stack0);
      assertFalse(boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNotNull(vector1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, false);
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNull(range1);
      
      TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotNull(timeSeries1);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeriesCollection1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2040.544320846242;
      doubleArray1[1] = 1.0;
      doubleArray1[1] = (-2649.6312737615817);
      doubleArray1[3] = 974.7236468;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 2697.957701073;
      doubleArray1[6] = (-1870.4101);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-318.337352);
      doubleArray2[2] = (-2649.6312737615817);
      doubleArray2[3] = 2040.544320846242;
      doubleArray2[4] = 974.7236468;
      doubleArray2[5] = 2697.957701073;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1137.31);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2040.544320846242;
      doubleArray4[1] = (-1870.4101);
      doubleArray4[2] = (-1870.4101);
      doubleArray4[3] = 2697.957701073;
      doubleArray4[4] = (-318.337352);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*cva(A&MrY+", "*cva(A&MrY+", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8093.873103219, range0.getUpperBound(), 0.01);
      assertEquals((-7488.009999523164), range0.getLowerBound(), 0.01);
      assertEquals(302.93155184791794, range0.getCentralValue(), 0.01);
      assertEquals(15581.883102742164, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      
      Range range3 = timeSeriesCollection0.getDomainBounds(true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range4);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(400.0, number0);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      // Undeclared exception!
      try { 
        ZoneId.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zoneId
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNotNull(stack0);
      
      stack0.addElement(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.removeAll(stack0);
      assertFalse(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNotNull(vector1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, false);
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(yIntervalSeriesCollection0, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      HijrahEra hijrahEra0 = HijrahEra.AH;
      boolean boolean0 = arrayList0.add(hijrahEra0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(hijrahEra0));
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(971, " ~+/");
      assertEquals(" ~+/", simpleTimeZone0.getID());
      assertEquals(971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id= ~+/,offset=971,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals(" ~+/", simpleTimeZone0.getID());
      assertEquals(971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id= ~+/,offset=971,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      TimeTableXYDataset timeTableXYDataset1 = (TimeTableXYDataset)timeTableXYDataset0.clone();
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertEquals(" ~+/", simpleTimeZone0.getID());
      assertEquals(971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id= ~+/,offset=971,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset1);
      
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hijrahEra0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      stack0.addElement((DefaultIntervalXYDataset) null);
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      stack0.addElement(defaultIntervalXYDataset0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2040.544320846242;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-2649.6312737615817);
      doubleArray1[3] = 974.7236468;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 2697.957701073;
      doubleArray1[6] = (-1870.4101);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1137.31);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-318.337352);
      doubleArray2[2] = (-2649.6312737615817);
      doubleArray2[3] = 2040.544320846242;
      doubleArray2[4] = 974.7236468;
      doubleArray2[5] = 2697.957701073;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1137.31);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2040.544320846242;
      doubleArray4[1] = (-1870.4101);
      doubleArray4[2] = (-1870.4101);
      doubleArray4[3] = 2697.957701073;
      doubleArray4[4] = (-318.337352);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*cva(A&MrY+", "*cva(A&MrY+", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5713.225668719242, range0.getUpperBound(), 0.01);
      assertEquals((-7169.6726475231635), range0.getLowerBound(), 0.01);
      assertEquals((-728.2234894019607), range0.getCentralValue(), 0.01);
      assertEquals(12882.898316242405, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("lVD%;9SY|C(djd\r");
      assertEquals("lVD%;9SY|C(djd\r", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("lVD%;9SY|C(djd\r", datasetGroup0.getID());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultWindDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1572);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4218.04465460104;
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double double0 = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4218.04465460104, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2690.75876415), Double.POSITIVE_INFINITY, 238, (-1.0));
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 155);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 155, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1295.73);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1295.73)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      int int0 = (-2666);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1295.73)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1295.73)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, (-1295.73), (-2666), (-1295.73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Date[] dateArray0 = new Date[2];
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3584), "T7n)0gBX");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-3584), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("T7n)0gBX", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-3584), simpleTimeZone0.getRawOffset());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=T7n)0gBX,offset=-3584,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=17,MILLISECOND=736,ZONE_OFFSET=-3584,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate((-3584), 154, (-719), 154, (-1), (-208));
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3584);
      doubleArray0[1] = (double) 154;
      doubleArray0[2] = (double) 154;
      doubleArray0[3] = (double) (-719);
      doubleArray0[4] = (-544.68);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-3584.0), 154.0, 154.0, (-719.0), (-544.68)}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.14967001068E14), range0.getLowerBound(), 0.01);
      assertEquals((-6.3593146934E13), range0.getCentralValue(), 0.01);
      assertEquals(1.02747708268E14, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {(-3584.0), 154.0, 154.0, (-719.0), (-544.68)}, doubleArray0, 0.01);
      assertNotNull(range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultIntervalXYDataset0, (-2517.8075872904));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-2517.8075872904), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("T7n)0gBX"));
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.22192928E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.14967001068E14), range0.getLowerBound(), 0.01);
      assertEquals((-6.3593146934E13), range0.getCentralValue(), 0.01);
      assertEquals(1.02747708268E14, range0.getLength(), 0.01);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-2517.8075872904), xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("T7n)0gBX"));
      assertArrayEquals(new double[] {(-3584.0), 154.0, 154.0, (-719.0), (-544.68)}, doubleArray0, 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals((-2517.8075872904), xYBarDataset0.getBarWidth(), 0.01);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-544.68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowKeys' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimeTableXYDataset timeTableXYDataset1 = (TimeTableXYDataset)timeTableXYDataset0.clone();
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset1);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TimeTableXYDataset timeTableXYDataset2 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset2.equals((Object)timeTableXYDataset1));
      assertTrue(timeTableXYDataset2.equals((Object)timeTableXYDataset0));
      assertFalse(timeTableXYDataset2.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset2);
      
      Range range1 = timeTableXYDataset2.getDomainBounds(true);
      assertNotSame(timeTableXYDataset2, timeTableXYDataset0);
      assertNotSame(timeTableXYDataset2, timeTableXYDataset1);
      assertTrue(timeTableXYDataset2.equals((Object)timeTableXYDataset1));
      assertTrue(timeTableXYDataset2.equals((Object)timeTableXYDataset0));
      assertFalse(timeTableXYDataset2.getDomainIsPointsInTime());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-378.457), (-378.457), (-1), integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D1);
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int int0 = (-1952);
      Year year0 = new Year((-1952));
      assertEquals((-1952L), year0.getSerialIndex());
      assertEquals("-1952", year0.toString());
      assertEquals((-1952), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries(year0);
      assertEquals((-1952L), year0.getSerialIndex());
      assertEquals("-1952", year0.toString());
      assertEquals((-1952), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals((-1952L), year0.getSerialIndex());
      assertEquals("-1952", year0.toString());
      assertEquals((-1952), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1703.6822), (-441.39121), 23, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]", "]", numberArray0);
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(0, numberArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.removeAll(vector0);
      assertFalse(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, Double.NEGATIVE_INFINITY);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stream<YIntervalSeriesCollection> stream0 = stack0.parallelStream();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stream0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range2);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2649.6312737615817));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-2649.6312737615817), range3.getLowerBound(), 0.01);
      assertEquals((-2649.6312737615817), range3.getCentralValue(), 0.01);
      assertEquals((-2649.6312737615817), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      DomainOrder domainOrder0 = xYIntervalSeriesCollection0.getDomainOrder();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Number[] numberArray0 = new Number[5];
      numberArray0[0] = null;
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-40));
      assertEquals(3, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-40), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNotNull(stack0);
      
      stack0.addElement(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.removeAll(stack0);
      assertFalse(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNotNull(vector1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector1, false);
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeriesCollection1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection1, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-718));
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(number0);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(boolean1 == boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("inW1)&%F)4", 12, 12);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(12));
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, true);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(12));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-870.329), (-870.329), (-870.329), (-870.329), (-870.329));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-870.329);
      doubleArray1[1] = (-870.329);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-870.329);
      doubleArray1[4] = (-870.329);
      doubleArray1[5] = (-870.329);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-870.329);
      doubleArray2[3] = (-870.329);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-870.329);
      doubleArray2[6] = (-870.329);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-870.329);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-870.329);
      doubleArray3[3] = (-870.329);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1.5;
      doubleArray3[6] = (-870.329);
      doubleArray3[7] = (-870.329);
      doubleArray3[8] = (-870.329);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      DomainOrder domainOrder0 = xYIntervalSeriesCollection0.getDomainOrder();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range3);
      
      Comparable<String> comparable0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      boolean boolean0 = true;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      vector0.addElement(defaultIntervalXYDataset0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.removeAll(vector0);
      assertFalse(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(vector0.contains(defaultIntervalXYDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, Double.NEGATIVE_INFINITY);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 0.0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = true;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1);
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(0L, regularTimePeriod0.getLastMillisecond());
      assertEquals(0L, regularTimePeriod0.getSerialIndex());
      assertNotNull(regularTimePeriod0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.0, 1.0, 1, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-718));
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = defaultKeyedValues2DDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(defaultIntervalCategoryDataset0));
      assertNotNull(vector0);
      
      Vector<DefaultIntervalCategoryDataset> vector1 = new Vector<DefaultIntervalCategoryDataset>();
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains(defaultIntervalCategoryDataset0));
      assertNotNull(vector1);
      
      int int0 = 1;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(defaultIntervalXYDataset0));
      assertNotNull(stack0);
      
      stack0.addElement(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultIntervalXYDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.removeAll(vector0);
      assertFalse(boolean0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertFalse(vector0.contains(defaultIntervalXYDataset0));
      
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains(timeSeriesCollection0));
      assertNotNull(vector1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(defaultIntervalXYDataset0));
      assertNull(range1);
      
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<ChronoLocalDate>) fixedMillisecond0;
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      assertNotNull(japaneseDate0);
      
      comparableArray0[1] = (Comparable<ChronoLocalDate>) japaneseDate0;
      comparableArray0[3] = (Comparable<ChronoLocalDate>) fixedMillisecond0;
      comparableArray0[4] = (Comparable<ChronoLocalDate>) fixedMillisecond0;
      comparableArray0[5] = (Comparable<ChronoLocalDate>) fixedMillisecond0;
      Comparable<Short>[] comparableArray1 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray1, (Number[][]) null, (Number[][]) null);
      assertEquals(0, comparableArray1.length);
      assertEquals(6, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) japaneseDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DomainOrder domainOrder0 = yIntervalSeriesCollection0.getDomainOrder();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      yIntervalSeriesCollection0.removeChangeListener(xYTaskDataset0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-518.018968);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-518.018968)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2948.58112672737, 2948.58112672737, 537, (-518.018968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        Week.parseWeek("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
         verifyException("org.jfree.data.time.Week", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.shift(range1, Double.POSITIVE_INFINITY);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      Range range3 = Range.combine(range2, (Range) null);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertSame(range2, range3);
      assertNotSame(range3, range1);
      assertSame(range3, range2);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      LinkedList<XYSeriesCollection> linkedList0 = new LinkedList<XYSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) linkedList0, range2, true);
      assertNotSame(range1, range3);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertSame(range2, range3);
      assertFalse(range1.equals((Object)range3));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(60);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(spreadsheetDate0);
      
      TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      yIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNull(range1);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) spreadsheetDate0);
      assertEquals(28, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getMonth());
      assertEquals(4, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(60, spreadsheetDate0.toSerial());
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.remove((-335.2749144162), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(200.0, 23.0, "`.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 128, 3);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(3, seriesChangeInfo0.getIndex2());
      assertEquals(128, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(categoryTableXYDataset0, seriesChangeInfo0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(3, seriesChangeInfo0.getIndex2());
      assertEquals(128, seriesChangeInfo0.getIndex1());
      assertNotNull(seriesChangeEvent0);
      
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals(3, seriesChangeInfo0.getIndex2());
      assertEquals(128, seriesChangeInfo0.getIndex1());
      
      categoryTableXYDataset0.add(200.0, 0.0, "org.jfree.data.general.DatasetUtilities");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 169);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      MockDate mockDate0 = new MockDate((-1), 154, 0, (-1), 168, (-786));
      mockDate0.getTime();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals((-1.22192928E13), number0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultKeyedValues2DDataset0.hasListener(defaultIntervalCategoryDataset0);
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      Vector<DefaultIntervalCategoryDataset> vector1 = new Vector<DefaultIntervalCategoryDataset>();
      vector0.addAll((Collection<? extends DefaultIntervalCategoryDataset>) vector1);
      vector0.add(defaultIntervalCategoryDataset0);
      vector0.iterator();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone.getTimeZone(zoneId0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      Range.combine(range0, range0);
      MockDate mockDate0 = new MockDate((-1794L));
      Month month0 = new Month(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
      timeSeries0.update((RegularTimePeriod) month0, (Number) null);
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-718));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) pieDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Range range1 = Range.expandToInclude((Range) null, 0.0);
      Range.combine(range1, range0);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range1, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      stack0.parallelStream();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.addElement(defaultIntervalXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0);
      intervalXYDelegate0.getDomainBounds(true);
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = null;
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone.getTimeZone(zoneId0);
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = null;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2333.6051436);
      doubleArray1[1] = (-167.73755794888);
      doubleArray1[2] = 452.57250359;
      doubleArray1[3] = (-167.73755794888);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 452.57250359;
      doubleArray2[1] = (-167.73755794888);
      doubleArray2[2] = 452.57250359;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2333.6051436);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      vector0.add(defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.addElement(defaultIntervalXYDataset0);
      Vector<DefaultIntervalCategoryDataset> vector1 = new Vector<DefaultIntervalCategoryDataset>();
      vector1.iterator();
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "?#fe^D;PZJU^B|", numberArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector1, false);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 8, 8);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      MockDate mockDate0 = new MockDate(1, 187, 2406, 187, 187, 1406);
      Day day0 = new Day(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) day0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      vector0.retainAll(arrayDeque0);
      vector0.addElement(defaultIntervalXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2477.476261);
      doubleArray1[1] = (-2477.476261);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3070.07;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray2[2] = 3070.07;
      doubleArray2[3] = (-2477.476261);
      doubleArray2[4] = 3070.07;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "+p%X}K*0 OY!]", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 71, 1627);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) 3070.07);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      Object object0 = new Object();
      xYIntervalSeriesCollection0.equals(object0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      stack0.listIterator();
      DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4927, 4927);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(608.451335114, 877.590255, true, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) simpleHistogramBin0, 5691.0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.0);
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2935, "Null 'tasks' argument.", 2575, 4927, 4927, (-4434), 4927, (-1114), (-1308), 0, 2575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 2575
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertNull(number0);
      
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray0[3] = numberArray4;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      boolean boolean0 = false;
      int int0 = 2;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2, 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.addElement(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.fireSelectionEvent();
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      jDBCPieDataset0.hasListener(defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0.0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      numberArray4[0] = null;
      numberArray4[1] = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, Double.NEGATIVE_INFINITY);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, true);
      assertNull(range0);
      
      Long long0 = Long.valueOf(999L);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) long0, 0.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      double[][] doubleArray0 = new double[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.indexOf(integer0);
      double double0 = 0.0;
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 0.0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      boolean boolean0 = true;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      double double1 = 1.0;
      int int0 = 1;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) regularTimePeriod0, 0.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Number[][] numberArray0 = new Number[0][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 331);
      stack0.add(defaultIntervalCategoryDataset0);
      Week week0 = new Week();
      week0.next();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, (-1813.472274194), (-685));
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      yIntervalSeriesCollection0.removeChangeListener(xYTaskDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, Double.POSITIVE_INFINITY);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.fireSelectionEvent();
      jDBCPieDataset0.hasListener(defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, false);
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0);
      taskSeriesCollection0.addChangeListener(xYBarDataset0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      int int0 = (-3083);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, (-3083), 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) "9s`L?a~~HB:Q", (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2726, 2726);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      int int0 = (-1687);
      List<DefaultTableXYDataset> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(2958465, 707, 2958465, 2200, 2, 2200);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2200;
      doubleArray0[1] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1295.73);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 202;
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, (-1295.73), 202, (-1295.73));
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      Range.expandToInclude(range0, 0.0);
      Range range1 = Range.expandToInclude((Range) null, 0.0);
      Range.combine(range1, range0);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range1, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, 2027.6129218359808);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, Double.POSITIVE_INFINITY, 2027.6129218359808, 1157, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.createCategoryDataset((Comparable) "kenulORA2l?_]8FM&", (KeyedValues) pieDataset0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = null;
      numberArray2[1] = null;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "2=b/>R8/x", 994.59);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "2=b/>R8/x", (KeyedValues) jDBCPieDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, stack0, false);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, false);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(227.8021796, 2.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1180.412021474521, 994.59, 2193, "2=b/>R8/x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.addElement(defaultIntervalXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) integer0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, Double.NEGATIVE_INFINITY);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      yIntervalSeriesCollection0.getDomainOrder();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      yIntervalSeriesCollection0.removeChangeListener(xYTaskDataset0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.8, 0.8, 723, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = null;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2333.6051436);
      doubleArray1[1] = (-167.73755794888);
      doubleArray1[2] = 452.57250359;
      doubleArray1[3] = (-167.73755794888);
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.findMinimumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYIntervalSeriesCollection0, 0.0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 994.59;
      doubleArray1[1] = 994.59;
      doubleArray1[2] = 994.59;
      doubleArray1[3] = 994.59;
      doubleArray1[4] = 994.59;
      doubleArray1[5] = 994.59;
      doubleArray1[7] = 3012.488;
      doubleArray1[8] = (-185.03877015);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Duplicate items in 'columnKeys'.", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(double0);
      assertEquals((-185.03877015), (double)double0, 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(3012.488, range1.getUpperBound(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) defaultPieDataset0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      Hour hour0 = new Hour();
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      arrayList0.add(hijrahEra0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2146725623), "qB>0-;F[?q\u0000oHqx`");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(89, 0, hour0, simpleTimeZone0);
      HijrahEra hijrahEra1 = HijrahEra.AH;
      arrayList0.add(hijrahEra1);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      arrayList0.add(hijrahEra0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 983.0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      ArrayList<HijrahEra> arrayList0 = new ArrayList<HijrahEra>();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-870.329), (-870.329), (-870.329), (-870.329), (-870.329));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      linkedList0.listIterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 2697.957701073;
      doubleArray1[2] = (-1068.29235606);
      doubleArray1[3] = 1.5;
      doubleArray1[4] = (-2455.8580857490374);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (-2786.27695525886);
      doubleArray1[7] = 6779.046342765484;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 6779.046342765484;
      doubleArray3[1] = 1836.91359297004;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1.0);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("K", (String) null, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      vector0.addElement(defaultIntervalXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      boolean boolean0 = true;
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      vector0.parallelStream();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4927, 4927);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      vector0.parallelStream();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 4927, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range.combine((Range) null, (Range) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray4[5] = null;
      numberArray0[3] = numberArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "2=b/>R8/x", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      yIntervalSeriesCollection0.removeChangeListener(xYTaskDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      yIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = "";
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T7n)0gBX");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MockDate mockDate0 = new MockDate((-1), 154, 0, (-1), 168, 168);
      mockDate0.getTime();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = date0;
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      stack0.add(yIntervalSeriesCollection0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(mockDate0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ArrayDeque<DefaultTableXYDataset> arrayDeque0 = new ArrayDeque<DefaultTableXYDataset>();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      stack1.add(integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      Range range1 = Range.combine(range0, range0);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range1, false);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 497, 497);
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = number1;
      numberArray2[1] = null;
      numberArray2[2] = number1;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      numberArray3[0] = null;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=Bc%KH5fZ|Aww-", "=Bc%KH5fZ|Aww-", numberArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.getSeriesCount();
      DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.fireSelectionEvent();
      DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      jDBCPieDataset0.hasListener(defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("9s`L?a~~HB:Q", "9s`L?a~~HB:Q", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2726, 2726);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Minute minute0 = null;
      try {
        minute0 = new Minute(2726, 0, (-1687), 2039, 4239);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'month' argument must be in the range 1 to 12.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      linkedList0.listIterator();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      String string0 = "2\\=b/>R8/x";
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray4[5] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[5];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-737);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-737), 0);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete((Comparable) "2=b/>R8/x", (Comparable) "2=b/>R8/x");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 564.476654;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-2869.401311607);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 1355.948194553478;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 564.476654;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1355.948194553478;
      doubleArray3[4] = 0.8;
      doubleArray3[5] = 1355.948194553478;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.7976931348623157E308;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 1355.948194553478;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = Double.NaN;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = Double.NaN;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = Double.NaN;
      doubleArray8[1] = (-2869.401311607);
      doubleArray8[2] = (-2869.401311607);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Zzv5", "Zzv5", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4927, 4927);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 4927);
      slidingGanttCategoryDataset0.addChangeListener(categoryToPieDataset0);
      DefaultIntervalCategoryDataset[] defaultIntervalCategoryDatasetArray0 = new DefaultIntervalCategoryDataset[0];
      vector0.toArray(defaultIntervalCategoryDatasetArray0);
      vector0.parallelStream();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 497, 497);
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = number0;
      numberArray2[1] = null;
      numberArray2[2] = number0;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<Long> vector0 = new Vector<Long>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      vector0.add((DefaultIntervalCategoryDataset) null);
      vector0.iterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "The number of row keys does not match the number of rows in the data array.";
      stringArray0[2] = "Null 'values' argument.";
      stringArray0[3] = "7Q&7w60DTC+";
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      double[][] doubleArray0 = new double[0][6];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, 0, 0);
      OHLCDataItem oHLCDataItem0 = null;
      try {
        oHLCDataItem0 = new OHLCDataItem((Date) null, (-1.0), 165.904843605564, 0.0, (-1.0), 960);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'date' argument.
         //
         verifyException("org.jfree.data.xy.OHLCDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "The number of row keys does not match the number of rows in the data array.";
      String string1 = "Null 'values' argument.";
      stringArray0[2] = "Null 'values' argument.";
      stringArray0[3] = "7Q&7w60DTC+";
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      defaultIntervalCategoryDataset0.getColumnKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "7Q&7w60DTC+");
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      int int0 = (-3893);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(52, (-3893), timeZone0);
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.setTimeBase((RegularTimePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2477.476261);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3070.07;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 3070.07;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3070.07;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 3070.07;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 3070.07;
      doubleArray3[2] = 3070.07;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 165.904843605564;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 0, 963);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      xYIntervalSeriesCollection0.getDomainOrder();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = null;
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2333.6051436);
      doubleArray1[1] = (-167.73755794888);
      doubleArray1[2] = 452.57250359;
      doubleArray1[3] = (-2333.6051436);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 452.57250359;
      doubleArray2[1] = (-167.73755794888);
      doubleArray2[2] = 452.57250359;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2333.6051436);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      vector0.add(defaultIntervalCategoryDataset0);
      vector0.iterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.category.DefaultIntervalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      String string0 = "Exception.";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("Exception.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      int int0 = 0;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 0);
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(3645.83, (-1353.6536), true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 3645.83 to -1353.6536
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-718));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      Minute minute0 = null;
      try {
        minute0 = new Minute(0, (Hour) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hour' argument.
         //
         verifyException("org.jfree.data.time.Minute", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Stack<Integer> stack0 = new Stack<Integer>();
      timeTableXYDataset0.getDomainBounds(true);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(177, 60, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "4PWu!8>";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(470, "4PWu!8>");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(470, 470, simpleTimeZone0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      boolean boolean0 = false;
      vector0.listIterator();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 0);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Series index out of bounds.", "Series index out of bounds.", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
